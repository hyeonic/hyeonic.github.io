{"componentChunkName":"component---src-templates-post-jsx","path":"/precourse-1/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"789c6ea4-3527-5953-b8a0-7018cb7c2cea","excerpt":"미션 - 숫자 야구 게임 우아한테크코스 4기 프리코스 1주차 미션을 진행하며 고민한 내용을 정리하고 추가적인 개인 목표를 세워 정리해보았다. 미션 - 숫자 야구 게임 구현 기능 목록 프로젝트를 진행할 때 최초에 모든 기능 목록을 작성하기 보다 작업을 진행하며 추가적인 기능을 지속적으로 업데이트 할 수 있도록 노력하였다. 1부터 9까지 서로 다른 수로 이루…","html":"<h2>미션 - 숫자 야구 게임</h2>\n<p>우아한테크코스 4기 프리코스 1주차 미션을 진행하며 고민한 내용을 정리하고 추가적인 개인 목표를 세워 정리해보았다.</p>\n<p><a href=\"https://github.com/woowacourse/java-baseball-precourse\">미션 - 숫자 야구 게임</a></p>\n<h2>구현 기능 목록</h2>\n<p>프로젝트를 진행할 때 최초에 모든 기능 목록을 작성하기 보다 작업을 진행하며 추가적인 기능을 지속적으로 업데이트 할 수 있도록 노력하였다.</p>\n<details>\n<summary>ver 0.1 기능 목록</summary>\n<p>1부터 9까지 서로 다른 수로 이루어진 3자리 수를 맞추는 야구 게임</p>\n<h3>1. 1에서 9까지의 서로 다른 임의의 수를 3개 자동으로 생성한다.</h3>\n<ul>\n<li>임의의 수는 <code class=\"language-text\">camp.nextstep.edu.missionutils</code>에서 제공하는 <code class=\"language-text\">Randoms</code> API 사용. 값 추출은 <code class=\"language-text\">pickNumberInRange()</code>를 활용한다.</li>\n<li>3자리 수는 서로 다른 수 이기 때문에 <code class=\"language-text\">중복 여부</code>를 확인하여 생성한다.</li>\n</ul>\n<h3>2. 사용자에게 3자리 수를 입력 받는다.</h3>\n<ul>\n<li>상대방(컴퓨터)은 입력 안내 메시지를 제공한다.</li>\n</ul>\n<h3>3. 사용자의 입력을 바탕으로 볼, 스트라이크의 개수를 반환한다.</h3>\n<ul>\n<li>같은 수만 n개 존재할 경우: <code class=\"language-text\">n볼</code></li>\n<li>같은 수가 같은 자리에 n개 있는 경우: <code class=\"language-text\">n스트라이크</code></li>\n<li>다른 자리에 같은 수가 n개, 같은 수가 같은 자리에 m개 있는 경우: <code class=\"language-text\">n볼 m스트라이크</code> </li>\n<li>같은 수가 전혀 없는 경우: <code class=\"language-text\">낫싱</code></li>\n</ul>\n<h3>4. 게임은 정답을 맞출 때 까지 반복된다.</h3>\n<ul>\n<li>3스트라이크가 나오면 해당 게임은 종료된다.</li>\n</ul>\n<h3>5. 게임이 종료되면 재시작, 애플리케이션 종료할 수 있다.</h3>\n<ul>\n<li>사용자가 1을 입력하면 게임은 새로 시작한다.</li>\n<li>사용자가 2를 입력하면 게임은 즉시 종료된다. 즉 <code class=\"language-text\">애플리케이션이 종료</code>된다.</li>\n</ul>\n<h3>6. 사용자가 잘못된 값을 입력할 경우 <code class=\"language-text\">IllegalArgumentException</code> 을 발생시킨다.</h3>\n<ul>\n<li>\n<p>해당 예외가 발생하면 <code class=\"language-text\">애플리케이션을 종료</code> 시킨다. 즉 게임을 더 이상 진행할 수 없다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.2 기능 목록</summary>\n<p>1부터 9까지 서로 다른 수로 이루어진 3자리 수를 맞추는 야구 게임</p>\n<h3>1. 1에서 9까지의 서로 다른 임의의 수를 3개 자동으로 생성한다.</h3>\n<ul>\n<li>임의의 수는 <code class=\"language-text\">camp.nextstep.edu.missionutils</code>에서 제공하는 <code class=\"language-text\">Randoms</code> API 사용한다. 값 추출은 <code class=\"language-text\">pickNumberInRange()</code>를 활용한다.</li>\n<li>3자리 수는 서로 다른 수 이기 때문에 <code class=\"language-text\">중복 여부</code>를 확인하여 생성한다.</li>\n</ul>\n<h3>2. 사용자에게 3자리 수를 입력 받는다.</h3>\n<ul>\n<li>상대방(컴퓨터)은 입력 안내 메시지를 제공한다.</li>\n<li>3자리가 넘어가면 <code class=\"language-text\">IllegalArgumentException</code>을 던진다. ✚</li>\n</ul>\n<h3>3. 사용자의 입력을 바탕으로 볼, 스트라이크의 개수를 반환한다.</h3>\n<ul>\n<li>임의의 수와 입력값을 활용하여 볼, 스트라이크의 개수를 계산한다. ✚</li>\n<li>같은 수만 n개 존재할 경우: <code class=\"language-text\">n볼</code></li>\n<li>같은 수가 같은 자리에 n개 있는 경우: <code class=\"language-text\">n스트라이크</code></li>\n<li>다른 자리에 같은 수가 n개, 같은 자리에 같은 수가 m개 있는 경우: <code class=\"language-text\">n볼 m스트라이크</code></li>\n<li>같은 수가 전혀 없는 경우: <code class=\"language-text\">낫싱</code></li>\n<li>스트라이크 개수를 기준으로 게임 성공 여부를 반환한다. ✚</li>\n</ul>\n<h3>4. 게임은 정답을 맞출 때 까지 반복된다.</h3>\n<ul>\n<li>3스트라이크가 나오면 해당 게임은 종료된다.</li>\n</ul>\n<h3>5. 게임이 종료되면 재시작, 애플리케이션 종료할 수 있다.</h3>\n<ul>\n<li>사용자가 1을 입력하면 게임은 새로 시작한다.</li>\n<li>사용자가 2를 입력하면 게임은 즉시 종료된다. 즉 <code class=\"language-text\">애플리케이션이 종료</code>된다.</li>\n</ul>\n<h3>6. 사용자가 잘못된 값을 입력할 경우 IllegalArgumentException 을 발생시킨다.</h3>\n<ul>\n<li>\n<p>해당 예외가 발생하면 <code class=\"language-text\">애플리케이션을 종료</code> 시킨다. 즉 게임을 더 이상 진행할 수 없다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.3 기능 목록</summary>\n<p>1부터 9까지 서로 다른 수로 이루어진 3자리 수를 맞추는 야구 게임</p>\n<h3>1. 1에서 9까지의 서로 다른 임의의 수를 3개 자동으로 생성한다.</h3>\n<ul>\n<li>임의의 수는 <code class=\"language-text\">camp.nextstep.edu.missionutils</code>에서 제공하는 <code class=\"language-text\">Randoms</code> API 사용한다. 값 추출은 <code class=\"language-text\">pickNumberInRange()</code>를 활용한다.</li>\n<li>3자리 수는 서로 다른 수 이기 때문에 <code class=\"language-text\">중복 여부</code>를 확인하여 생성한다.</li>\n</ul>\n<h3>2. 사용자에게 3자리 수를 입력 받는다.</h3>\n<ul>\n<li>상대방(컴퓨터)은 입력 안내 메시지를 제공한다.</li>\n<li>\n<p>잘못된 예외에 대한 예외 처리를 진행한다.</p>\n<ul>\n<li>입력 받은 수가 3자리가 아니면 예외를 던진다. ✚</li>\n<li>입력값이 숫자가 아니면 예외를 던진다. ✚</li>\n<li>입력 받은 수 중 같은 수가 존재하면 예외를 던진다. ✚</li>\n<li>입력 받은 수가 1 ~ 9 범위가 아니면 예외를 던진다. 즉 0이 될 수 없다. ✚</li>\n</ul>\n</li>\n</ul>\n<h3>3. 사용자의 입력을 바탕으로 볼, 스트라이크의 개수를 반환한다.</h3>\n<ul>\n<li>임의의 수와 입력값을 활용하여 볼, 스트라이크의 개수를 계산한다. ✚</li>\n<li>같은 수만 n개 존재할 경우: <code class=\"language-text\">n볼</code></li>\n<li>같은 수가 같은 자리에 n개 있는 경우: <code class=\"language-text\">n스트라이크</code></li>\n<li>다른 자리에 같은 수가 n개, 같은 자리에 같은 수가 m개 있는 경우: <code class=\"language-text\">n볼 m스트라이크</code></li>\n<li>같은 수가 전혀 없는 경우: <code class=\"language-text\">낫싱</code></li>\n<li>스트라이크 개수를 기준으로 게임 성공 여부를 반환한다. ✚</li>\n</ul>\n<h3>4. 게임은 정답을 맞출 때 까지 반복된다.</h3>\n<ul>\n<li>3스트라이크가 나오면 해당 게임은 종료된다.</li>\n</ul>\n<h3>5. 게임이 종료되면 재시작, 애플리케이션 종료할 수 있다.</h3>\n<ul>\n<li>사용자가 1을 입력하면 게임은 새로 시작한다.</li>\n<li>사용자가 2를 입력하면 게임은 즉시 종료된다. 즉 <code class=\"language-text\">애플리케이션이 종료</code>된다.</li>\n<li>1과 2 이외의 입력이 주어지면 <code class=\"language-text\">IllegalArgumentException</code>을 던진다.</li>\n</ul>\n<h3>6. 사용자가 잘못된 값을 입력할 경우 IllegalArgumentException 을 발생시킨다.</h3>\n<ul>\n<li>\n<p>해당 예외가 발생하면 <code class=\"language-text\">애플리케이션을 종료</code> 시킨다. 즉 게임을 더 이상 진행할 수 없다.</p>\n</details>\n</li>\n</ul>\n<h2>자바 코드 컨벤션 적용</h2>\n<p><a href=\"https://naver.github.io/hackday-conventions-java/\">캠퍼스 핵데이 Java 코딩 컨벤션</a></p>\n<p>이번 프리코스에서는 코드 컨벤션 적용을 위해 위 링크를 참고하였다. 또한 빠른 적용을 위해 xml 파일까지 제공된다.</p>\n<p>현재 개발 m1 맥북 + intellij를 활용하여 개발을 진행하고 있다. 위 설정을 그대로 적용하고 git commit을 진행하면 tab size가 8로 적용되는 문제를 확인하였다. </p>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/143804973-88a32d76-6019-4cca-b8e2-56fe9ae36560.png\"></p>\n<p>위 <code class=\"language-text\">Use tab character</code>를 해제하고 다시 commit을 진행하면 tab size가 정상적으로 적용된 것을 확인할 수 있었다.</p>\n<h2>상수 사용</h2>\n<p>문자열, 정수 등의 값을 하드 코딩하지 않고 static final을 활용하여 적용하였다. 해당 문자열, 숫자에 의도를 나타낼 수 있도록 노력하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NUMBERS_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">RANGE_MIN_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">RANGE_MAX_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>역할, 책임, 협력에 기반하여 설계하기</h2>\n<p>객체들이 애플리케이션의 기능을 구현하기 위해 수행하는 상호작용을 <code class=\"language-text\">협력</code>이라고 한다. 객체가 협력에 참여하기 위해 수행하는 로직은 <code class=\"language-text\">책임</code>이라고 부른다. 객체들이 협력 안에서 수행하는 책임들이 모여 객체가 수행하는 <code class=\"language-text\">역할</code>을 구성한다. </p>\n<p><code class=\"language-text\">오브젝트</code>를 읽으며 객체에게 적절한 책임을 부여하여 설계하도록 노력하였다.</p>\n<h3>BaseballNumbers: 서로 다른 임의의 수를 생성하기 위한 책임</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseballNumbers</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NUMBERS_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">RANGE_MIN_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">RANGE_MAX_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> baseballNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseballNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseballNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">generateNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">generateNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validateSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">addRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Randoms</span><span class=\"token punctuation\">.</span><span class=\"token function\">pickNumberInRange</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RANGE_MIN_NUMBER</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">RANGE_MAX_NUMBER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validateSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NUMBERS_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> randomNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">validateDuplicate</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            baseballNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validateDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> randomNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">BaseballNumbers</code>는 <code class=\"language-text\">1에서 9까지의 서로 다른 임의의 수를 3개 자동으로 생성하는 책임</code>만 가진다. 랜덤으로 생성된 List는 한 번 생성되면 게임이 진행되는 동안 내부 요소들이 변하지 않아야 한다. 때문에 List를 그대로 외부에 노출하는 것은 큰 리스크를 가지고 있다고 판단하였다. </p>\n<p>또한 <code class=\"language-text\">1에서 9까지 서로 다른 임의의 수를 3개를 가진 List</code>는 기존에 제공되는 자료구조가 아니다. 오직 숫자야구 게임이라는 비즈니스에 종속된 자료구조이다. 이러한 자료구조는 <code class=\"language-text\">일급 컬렉션</code>을 활용하여 구현하였다. 일급 컬렉션의 이점과 사용 이유에 대해 학습하는 좋은 계기가 되었다.</p>\n<h3>InputView: 사용자에게 입력 받는 책임</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_NUMBERS_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"숫자를 입력해주세요 : \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_RESTART_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"게임을 새로 시작하려면 1, 종료하려면 2를 입력하세요.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_NUMBERS_DELIMITER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INPUT_NUMBERS_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_RESTART_COMMAND</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_END_COMMAND</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INPUT_MIN_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INPUT_MAX_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getInputNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_NUMBERS_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> inputNumbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateSize</span><span class=\"token punctuation\">(</span>inputNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateDigit</span><span class=\"token punctuation\">(</span>inputNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token function\">toList</span><span class=\"token punctuation\">(</span>inputNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateDuplicate</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateNumberRange</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> command <span class=\"token operator\">=</span> <span class=\"token function\">inputCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateCommand</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_RESTART_COMMAND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> <span class=\"token constant\">INPUT_NUMBERS_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVALID_SIZE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateDigit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputNumbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVALID_NUMBER</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputNumbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>inputNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_NUMBERS_DELIMITER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateDuplicate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> noneDuplicatedNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>noneDuplicatedNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">INPUT_NUMBERS_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DUPLICATE_NUMBER</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNumberRange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> size <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">>=</span> <span class=\"token constant\">INPUT_MIN_NUMBER</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">INPUT_MAX_NUMBER</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">!=</span> <span class=\"token constant\">INPUT_NUMBERS_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVALID_NUMBER_RANGE</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">inputCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_RESTART_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_RESTART_COMMAND</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_END_COMMAND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVALID_INPUT_COMMAND</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>입력과 관련된 모든 책임이 부여된다. 사용자가 잘못된 입력을 시도할 경우 적절한 예외처리를 할 수 있도록 구현하였다. 아쉬운 점은 잘못된 입력에 대한 검증에 대한 책임까지 가지고 있기 때문에 너무 많은 책임을 부여한 것은 아닌지 고민이 되었다. </p>\n<p>결국 얻고자 하는 것은 <code class=\"language-text\">중복되지 않는 3개의 숫자</code>인데 이것을 이루기 위해서는 위에서 작성한 BaseballNumbers의 검증 방식과 상당 부분 중복 되고 있었다. <code class=\"language-text\">3개의 숫자를 관리하기 위한 책임</code>을 분리하는 것이 더 좋은지 고민하였지만 너무 세세하게 책임을 나누지 않기로 결정하였다.</p>\n<p>중복된 숫자인지 검증하기 위해 <code class=\"language-text\">Set</code>을 사용하였다. 입력된 숫자는 무조건 3자리를 보장해야 한다. 해당 숫자 리스트를 Set으로 변경한 뒤 size가 3보다 작으면 중복된 숫자가 있다고 판단하여 예외 처리를 진행한다.</p>\n<h3>BaseballReferee: ball, strike의 개수를 계산하는 책임</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseballReferee</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">ZERO_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">START_INDEX</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">END_INDEX</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseballState</span> <span class=\"token function\">referee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> baseballNumbers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> inputNumbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> ballCount <span class=\"token operator\">=</span> <span class=\"token function\">calculateBall</span><span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">,</span> inputNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> strikeCount <span class=\"token operator\">=</span> <span class=\"token function\">calculateStrike</span><span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">,</span> inputNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BaseballState</span><span class=\"token punctuation\">(</span>ballCount <span class=\"token operator\">-</span> strikeCount<span class=\"token punctuation\">,</span> strikeCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculateBall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> baseballNumbers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> inputNumbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> originalSize <span class=\"token operator\">=</span> baseballNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> inputNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> noneDuplicateNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        noneDuplicateNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        noneDuplicateNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>inputNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> originalSize <span class=\"token operator\">-</span> noneDuplicateNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculateStrike</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> baseballNumbers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> inputNumbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> strikeCount <span class=\"token operator\">=</span> <span class=\"token constant\">ZERO_COUNT</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token constant\">START_INDEX</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">END_INDEX</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>inputNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                strikeCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> strikeCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">BaseballReferee</code>은 이름처럼 <code class=\"language-text\">심판의 역할</code>을 진행한다. <code class=\"language-text\">referee</code> 메서드는 랜덤으로 생성된 baseballNumbers와 입력으로 주어진 inputNumbers를 활용하여 ball과 strike를 계산하여 ball과 strike의 개수를 관리하는 <code class=\"language-text\">BaseballState</code>를 반환한다.</p>\n<p>ball 계산을 진행할 때 Set을 활용하였다. 중복된 숫자가 존재할 경우 합산한 size가 줄어 들기 때문에 줄어든 size 만큼 ball 개수라고 판단하였다.</p>\n<h3>BaseballState: 계산된 ball, strike의 개수를 관리하는 책임</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseballState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">BALL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"%d볼\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">STRIKE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"%d스트라이크\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">BALL_AND_STRIKE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"%d볼 %d스트라이크\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NOTTING</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"낫싱\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">ZERO_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">SUCCESS_STRIKE_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ballCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> strikeCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseballState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ballCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> strikeCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ballCount <span class=\"token operator\">=</span> ballCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strikeCount <span class=\"token operator\">=</span> strikeCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strikeCount <span class=\"token operator\">==</span> <span class=\"token constant\">SUCCESS_STRIKE_COUNT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ballCount <span class=\"token operator\">==</span> <span class=\"token constant\">ZERO_COUNT</span> <span class=\"token operator\">&amp;&amp;</span> strikeCount <span class=\"token operator\">==</span> <span class=\"token constant\">ZERO_COUNT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">NOTTING</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ballCount <span class=\"token operator\">==</span> <span class=\"token constant\">ZERO_COUNT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STRIKE</span><span class=\"token punctuation\">,</span> strikeCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strikeCount <span class=\"token operator\">==</span> <span class=\"token constant\">ZERO_COUNT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BALL</span><span class=\"token punctuation\">,</span> ballCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BALL_AND_STRIKE</span><span class=\"token punctuation\">,</span> ballCount<span class=\"token punctuation\">,</span> strikeCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>계산된 Ball, Strike의 개수를 관리하기 위한 책임을 가진 <code class=\"language-text\">BaseballState</code>이다. 단순히 <code class=\"language-text\">ballCount</code>, <code class=\"language-text\">strikeCount</code>를 get으로 반환하여 내부 특성을 노출하지 않도록 노력하였다. </p>\n<p>즉 외부에서 해당 특성을 활용한 비즈니스 로직을 사용하지 않고 모두 BaseballState <code class=\"language-text\">내부에서 처리</code>하도록 구현하였다. ballCount와 strikeCount 라는 특성을 활용하여 게임 성공 여부와 메시지를 생성하는 메서드를 제공한다. </p>\n<h3>GameMachine: 게임을 성공적으로 진행할 책임</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GameMachine</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BaseballReferee</span> baseballReferee<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">InputView</span> inputView<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OutputView</span> outputView<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">GameMachine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BaseballReferee</span> baseballReferee<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InputView</span> inputView<span class=\"token punctuation\">,</span> <span class=\"token class-name\">OutputView</span> outputView<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseballReferee <span class=\"token operator\">=</span> baseballReferee<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputView <span class=\"token operator\">=</span> inputView<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outputView <span class=\"token operator\">=</span> outputView<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BaseballNumbers</span> baseballNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BaseballNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">BaseballState</span> state <span class=\"token operator\">=</span> baseballReferee<span class=\"token punctuation\">.</span><span class=\"token function\">referee</span><span class=\"token punctuation\">(</span>baseballNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">getNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inputView<span class=\"token punctuation\">.</span><span class=\"token function\">getInputNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outputView<span class=\"token punctuation\">.</span><span class=\"token function\">outputRefereeResult</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                outputView<span class=\"token punctuation\">.</span><span class=\"token function\">outputSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputView<span class=\"token punctuation\">.</span><span class=\"token function\">isRestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>게임을 진행할 책임을 가진 <code class=\"language-text\">GameMachine</code>이다. GameMachine은 다양한 객체에게 <code class=\"language-text\">메시지</code>를 보내며 <code class=\"language-text\">협력</code>을 이루고 있다. 한 예시로는 baseballState에게 ball, strike 계산을 위해 <code class=\"language-text\">referee</code> 라는 메시지를 전송하여 객체 간의 통신을 진행한다. 앞서 작성한 책임을 가지는 객체들이 모두 협력을 이루며 <code class=\"language-text\">하나의 숫자 야구 게임</code>을 이루는 중심축이 되었다.</p>\n<p>게임 반복을 위해서는 <code class=\"language-text\">while</code>을 활용한 반복문을 사용하였다.</p>\n<h3>OutputView: 출력을 담당하는 책임</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">END_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3개의 숫자를 모두 맞히셨습니다! 게임 종료\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">outputRefereeResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">outputSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">END_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>최초에는 GameMachine에서 출력까지 모든 부분을 담당하였다. 하지만 <code class=\"language-text\">GameMachine</code>에게 오직 실행을 위한 책임을 갖도록 하기 위해 출력을 위한 책임을 분리하였다.</p>\n<h2>테스트 코드 작성</h2>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/143803451-e479ae65-f562-4e2c-877e-9cd9aaa6a889.png\"></p>\n<p><code class=\"language-text\">given-when-then</code> 패턴을 적용하여 단위 테스트를 진행하였다. 최대한 모든 코드를 커버할 수 있도록 꼼꼼하게 작성하려 노력했다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputViewTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">InputStream</span> <span class=\"token function\">generateStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"숫자를 입력하면 List를 반환한다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">inputNumbersThenToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIn</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputView</span> inputView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> inputView<span class=\"token punctuation\">.</span><span class=\"token function\">getInputNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"입력한 숫자의 길이가 4이상이면 IllegalArgumentException을 던진다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">sizeOverThrowIllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIn</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputView</span> inputView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when &amp; then</span>\n        <span class=\"token function\">assertThatThrownBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            inputView<span class=\"token punctuation\">.</span><span class=\"token function\">getInputNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트 메서드 이름은 전부 <code class=\"language-text\">CamelCase</code>를 활용 했지만 가독성 측면에서 좋지 못하였다. 해당 테스트의 의도를 정확히 전달하기 위해 <code class=\"language-text\">@DisplayName</code> 애노테이션을 활용하여 가독성이 떨어지는 이름을 보완하려 노력하였다. </p>\n<h2>Refernces</h2>\n<ul>\n<li>조영호, 『오브젝트』, 위키북스(2019), p73-96.</li>\n</ul>\n<h3>코딩 컨벤션</h3>\n<ul>\n<li><a href=\"https://naver.github.io/hackday-conventions-java/\">hackday-conventions-java</a></li>\n<li><a href=\"https://hodol.dev/journal/coding-convention/\">코딩 컨벤션 적용</a></li>\n</ul>\n<h3>일급 컬렉션</h3>\n<ul>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2020-05-08-First-Class-Collection/\">일급 컬렉션을 사용하는 이유</a></li>\n<li><a href=\"https://jojoldu.tistory.com/412\">일급 컬렉션의 소개와 써야할 이유</a></li>\n</ul>\n<h3>테스트 코드</h3>\n<ul>\n<li><a href=\"https://sakjung.tistory.com/33\">System.in과 System.out에 대한 테스트</a></li>\n<li><a href=\"https://mangkyu.tistory.com/143\">[TDD] 단위 테스트(Unit Test) 작성의 필요성 (1/3)</a></li>\n</ul>","frontmatter":{"title":"프리코스 1주차","date":"November 01, 2021","update":"November 01, 2021","tags":["우아한테크코스","프리코스"],"series":"우아한테크코스 4기 프리코스"},"fields":{"slug":"/precourse-1/","readingTime":{"minutes":20.645}}},"seriesList":{"edges":[{"node":{"id":"789c6ea4-3527-5953-b8a0-7018cb7c2cea","fields":{"slug":"/precourse-1/"},"frontmatter":{"title":"프리코스 1주차"}}},{"node":{"id":"3e440879-b393-5bfe-98b7-c97f07f9ad94","fields":{"slug":"/precourse-2/"},"frontmatter":{"title":"프리코스 2주차"}}},{"node":{"id":"51d28271-7e5f-5e6a-9b59-8e8b82bb2903","fields":{"slug":"/precourse-3/"},"frontmatter":{"title":"프리코스 3주차"}}},{"node":{"id":"82313531-fb31-5b67-8ace-a356ec4bc3e3","fields":{"slug":"/precourse-pass/"},"frontmatter":{"title":"우아한테크코스 프리코스 후기"}}}]},"previous":null,"next":{"fields":{"slug":"/precourse-2/"},"frontmatter":{"title":"프리코스 2주차"}}},"pageContext":{"id":"789c6ea4-3527-5953-b8a0-7018cb7c2cea","series":"우아한테크코스 4기 프리코스","previousPostId":null,"nextPostId":"3e440879-b393-5bfe-98b7-c97f07f9ad94"}},"staticQueryHashes":[],"slicesMap":{}}