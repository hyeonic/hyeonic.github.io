(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{463:function(t,a,s){t.exports=s.p+"assets/img/hikari-dependency.a78576c7.png"},464:function(t,a,s){t.exports=s.p+"assets/img/thread-compare.0c90554d.png"},465:function(t,a,s){t.exports=s.p+"assets/img/disk-io.70231203.png"},738:function(t,a,s){"use strict";s.r(a);var n=s(21),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"hikaricp와-적절한-풀-사이즈-고민하기-1-이론편"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hikaricp와-적절한-풀-사이즈-고민하기-1-이론편"}},[t._v("#")]),t._v(" HikariCP와 적절한 풀 사이즈 고민하기 (1) - 이론편")]),t._v(" "),n("blockquote",[n("p",[t._v("👉 "),n("a",{attrs:{href:"https://hyeonic.github.io/woowacourse/dallog/hikari-cp-1-theory.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP와 적절한 풀 사이즈 고민하기 (1) - 이론편"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://hyeonic.github.io/woowacourse/dallog/hikari-cp-2-actual.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP와 적절한 풀 사이즈 고민하기 (2) - 실전편"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://hyeonic.github.io/woowacourse/dallog/hikari-cp-3-spadework.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP와 적절한 풀 사이즈 고민하기 (3) - 삽질편"),n("OutboundLink")],1),t._v(" "),n("br")])]),t._v(" "),n("p",[n("code",[t._v("HikariCP")]),t._v("는 "),n("code",[t._v("connection pooling")]),t._v("을 제공하는 "),n("code",[t._v("JDBC DataSource 구현체")]),t._v("이다.")]),t._v(" "),n("h2",{attrs:{id:"데이터베이스-커넥션-풀"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#데이터베이스-커넥션-풀"}},[t._v("#")]),t._v(" 데이터베이스 커넥션 풀")]),t._v(" "),n("p",[t._v("데이터베이스 커넥션이 필요할 때마다 매번 생성해서 연결하는 것은 매우 비효율적이다. 데이터베이스 커넥션을 생성해둔 뒤 사용하는 방식을 데이터베이스 커넥션 풀이라 한다.")]),t._v(" "),n("p",[t._v("요청 마다 커넥션 객체를 생성하여 쿼리를 전달하기 위해서는 항상 아래와 같은 과정을 겪어야 한다.")]),t._v(" "),n("ul",[n("li",[t._v("JDBC 드라이버를 로드한다.")]),t._v(" "),n("li",[t._v("연결 정보를 기반으로 데이터베이스에 연결해야 한다.")]),t._v(" "),n("li",[t._v("Statement를 생성한다.")]),t._v(" "),n("li",[t._v("SQL문을 전송한다.")]),t._v(" "),n("li",[t._v("ResultSet을 통해 결과를 확인한다.")]),t._v(" "),n("li",[t._v("연결을 해제한다.")])]),t._v(" "),n("p",[t._v("커넥션 객체를 생성하는 비용 자체도 문제가 되지만 매번 SQL 쿼리 자체를 전송하기 위해 "),n("code",[t._v("객체를 생성하고 해제하는 과정")]),t._v("이 매우 비효율적으로 느껴진다.")]),t._v(" "),n("p",[t._v("또한 커넥션 연결도 "),n("code",[t._v("TCP/IP")]),t._v("를 통해 이루어진다. 즉 "),n("code",[t._v("3-way-handshaking")]),t._v(" 과정을 통해 통신을 준비하는데, 이 과정이 쿼리를 요청할 때 마다 반복되면 네트워크 구간에서 병목의 원인이 될 수 있다.")]),t._v(" "),n("blockquote",[n("p",[t._v("커넥션을 생성하는 과정은 전체 과정 중 대략 50%를 차지한다고 한다.")])]),t._v(" "),n("p",[t._v("정리하면 데이터베이스 커넥션 풀은 아래와 같은 이점을 가지고 있다.")]),t._v(" "),n("ul",[n("li",[t._v("이미 커넥션을 맺은 상태로 커넥션 풀에서 관리되기 때문에 데이터베이스와 "),n("code",[t._v("네트워크 연결 시간을 단축")]),t._v(" 시켜 준다. 이러한 응답 시간 단축은 처리량 증가로 이어질 수 있다.")]),t._v(" "),n("li",[t._v("데이터베이스에 대한 커넥션 개수를 일정 수준으로 제한하여 불필요한 리소스를 줄일 수 있다. 또한 과한 커넥션을 맺지 않도록 방지하여 일관된 데이터베이스 성능을 유지할 수 있다.")])]),t._v(" "),n("p",[t._v("데이터베이스 커넥션 풀은 대표적으로 "),n("code",[t._v("commons-dbcp")]),t._v(", "),n("code",[t._v("tomcat-jdbc-pool")]),t._v(", "),n("code",[t._v("HikariCP")]),t._v(" 등이 존재한다.")]),t._v(" "),n("h2",{attrs:{id:"hikaricp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hikaricp"}},[t._v("#")]),t._v(" HikariCP")]),t._v(" "),n("p",[n("code",[t._v("HikariCP")]),t._v("는 "),n("code",[t._v("connection pooling")]),t._v("을 제공하는 "),n("code",[t._v("JDBC DataSource 구현체")]),t._v("이다.")]),t._v(" "),n("p",[t._v("공식 문서에 따르면 몇몇 바이트코드 레벨의 구현이 있으며, 마이크로 최적화, "),n("code",[t._v("ArrayList<Statement>")]),t._v(" 사용 대신 FastList 직접 구현으로 처음부터 끝까지 모든 것을 스캔하는 과정을 생략하는 등 다른 프레임워크보다 빠른 속도를 가지고 있다고 소개하고 있다.")]),t._v(" "),n("p",[t._v("Spring Boot 2.0 이후 "),n("code",[t._v("HikariCP")]),t._v("를 default 커넥션 풀로 활용하고 있다.")]),t._v(" "),n("p",[n("img",{attrs:{src:s(463),alt:""}})]),t._v(" "),n("h2",{attrs:{id:"hikaricp-설정"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hikaricp-설정"}},[t._v("#")]),t._v(" HikariCP 설정")]),t._v(" "),n("h3",{attrs:{id:"maximumpoolsize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maximumpoolsize"}},[t._v("#")]),t._v(" maximumPoolSize")]),t._v(" "),n("p",[t._v("풀이 제공할 수 있는 최대 커넥션 개수를 의미한다. 최대 커넥션 개수는 "),n("code",[t._v("사용 중인 커넥션 수 + 유후 커넥션 수")]),t._v("와 같다. 기본값은 "),n("code",[t._v("10개")]),t._v("이다.")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfig")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfigMXBean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" DEFAULT_POOL_SIZE "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("최대 커넥션 개수는 "),n("code",[t._v("TPS")]),t._v("에 가장 많은 영향을 주는 옵션이다. 아래 공식 문서에 소개된 공식과 서버 상황에 따라 적절한 값을 설정해야 한다.")]),t._v(" "),n("h3",{attrs:{id:"connectiontimeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connectiontimeout"}},[t._v("#")]),t._v(" connectionTimeout")]),t._v(" "),n("p",[t._v("커넥션 풀에서 커넥션을 구하기 위해 "),n("code",[t._v("대기")]),t._v("하는 시간이다. 만약 풀에서 모든 커넥션을 사용중인 경우 대기가 발생하게 된다. 기본값은 "),n("code",[t._v("30초")]),t._v("이다.")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfig")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfigMXBean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" longCONNECTION_TIMEOUT "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SECONDS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toMillis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("사용자가 응답을 받기 까지 기본값 "),n("code",[t._v("30초")]),t._v("를 대기하는 것은 너무 길다. 스레드 풀 기반의 WAS는 순간적으로 트래픽이 증가하게 되면 스레드가 대기할 수 있다. 사용자는 응답 없이 기다리는 것 보다 빠르게 에러 화면 이라도 마주하는 것이 더 낫다.")]),t._v(" "),n("p",[t._v("보통의 웹 서비스는 "),n("code",[t._v("0.5 ~ 3초")]),t._v(" 이내로 설정하여 응답 시간을 최소화 한다.")]),t._v(" "),n("h3",{attrs:{id:"maxlifetime"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maxlifetime"}},[t._v("#")]),t._v(" maxLifeTime")]),t._v(" "),n("p",[t._v("커넥션을 생성한 뒤 설정된 시간이 지나면 커넥션을 닫고 풀에서 제거한다. 제거한 뒤 커넥션을 새롭게 생성한다. 기본값은 "),n("code",[t._v("30초")]),t._v("이다.")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfig")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfigMXBean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" MAX_LIFETIME "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MINUTES"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toMillis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("기본적인 규칙은 네트워크나 데이터베이스의 관련 설정 값보다 작은 값을 사용한다. 관련 설정의 예시로는 네트워크 장비의 최대 TCP 커넥션 유지 시간이 될 수 있다. 최대 TCP 유지 시간이 10분이라고 가정한다. 이 값이 관련 설정보다 크게되면 "),n("code",[t._v("이미 유효하지 않은 커넥션")]),t._v("이 풀에 남게 된다.")]),t._v(" "),n("p",[t._v("풀에서 유효하지 않은 커넥션을 검증하는 과정에서 추가적인 커넥션이 새로 생성된다. 즉 트래픽이 몰리는 시점에 성능 저하를 유발할 수 있다.")]),t._v(" "),n("h3",{attrs:{id:"keepalivetime"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keepalivetime"}},[t._v("#")]),t._v(" keepaliveTime")]),t._v(" "),n("p",[t._v("커넥션이 살아 있는지 확인하는 주기이다. 유휴 커넥션에 대해 커넥션을 검증하고 유효하지 않은 경우 풀에서 제거한다. 제거 후 커넥션을 새로 생성한다.")]),t._v(" "),n("p",[t._v("이 또한 네트워크나 데이터베이스의 관련 설정 값보다 작은 값을 사용한다. 관련 설정 예시로는 데이터베이스의 미활동 대기 시간이 될 수 있다. 데이터베이스의 미활동 시간보다 설정 시간이 긴 경우 이미 데이터베이스에서 커넥션을 제거했기 때문에 "),n("code",[t._v("무의미한 검증 시간")]),t._v("이 될 수 있다.")]),t._v(" "),n("h3",{attrs:{id:"minimumidle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#minimumidle"}},[t._v("#")]),t._v(" minimumIdle")]),t._v(" "),n("p",[t._v("풀에서 유지할 최소 유휴 커넥션 개수를 지정한다. 기본 값은 "),n("code",[t._v("maximumPoolSize")]),t._v("와 동일하다.")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfig")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfigMXBean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxPoolSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" minIdle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HikariConfig")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        minIdle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        maxPoolSize "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("validate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("validateNumerics")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("validateNumerics")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minIdle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" minIdle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" maxPoolSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            minIdle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" maxPoolSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("HikariCP 문서에 따르면 설정하지 않는 것을 추천한다. 즉 maximumPoolSize와 동일 크기를 추천한다. 이 값을 작게 설정할 경우 급격한 트래픽 증가 시 성능 저하를 일으킬 수 있다.")]),t._v(" "),n("p",[t._v("해당 설정은 트래픽이 적은 시간대에 데이터베이스 자원 사용을 줄이기 위함이다.")]),t._v(" "),n("h3",{attrs:{id:"idletimeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#idletimeout"}},[t._v("#")]),t._v(" idleTimeout")]),t._v(" "),n("p",[t._v("사용하지 않고 풀에 머물 수 있는 시간인 최대 유휴 시간을 설정한다. 풀에서 설정한 시간동안 머무른 커넥션은 종료하고 풀에서 제거한다. 해당 설정은 "),n("code",[t._v("minimumIdle < maximumPoolSize")]),t._v("인 경우 적용된다.")]),t._v(" "),n("h2",{attrs:{id:"적절한-커넥션-풀-사이즈-고민하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#적절한-커넥션-풀-사이즈-고민하기"}},[t._v("#")]),t._v(" 적절한 커넥션 풀 사이즈 고민하기")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing",target:"_blank",rel:"noopener noreferrer"}},[t._v("About Pool Sizing"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("커넥션 풀을 구성하는 것은 개발자가 자주 실수하는 것이다. 풀을 구성할 때 이해 해야하는 몇 가지 원칙이 있을 수 있다.")]),t._v(" "),n("p",[t._v("하나의 CPU 코어가 있는 컴퓨터도 수십 혹은 수백 개의 스레드를 "),n("code",[t._v("동시에")]),t._v(" 지원할 수 있다. 하지만 이것은 운영체제의 속임수일 뿐이다. 실제로 단일 코어는 "),n("code",[t._v("한 번에 하나의 스레드")]),t._v("만 실행할 수 있다. 운영체제는 "),n("code",[t._v("컨텍스트 스위칭")]),t._v("을 한 뒤 다른 스레드의 코드를 실행할 뿐이다. 즉 빠른 시간의 "),n("code",[t._v("컨텍스트 스위칭")]),t._v("으로 동시에 진행하는 것 처럼 보일 뿐이다.")]),t._v(" "),n("p",[t._v("단일 CPU가 주어지면 "),n("code",[t._v("A와 B를 순차적으로 실행하는 것")]),t._v("이 "),n("code",[t._v("시분할을 통해 A와 B를 동시에 실행하는 것")]),t._v(" 보다 항상 빠를 것이라는 것은 컴퓨팅의 기본 법칙이다. 스레드 수가 CPU 코어 수를 초과하면 단순히 스레드 수가 더 많아질 뿐이지 더 빠른 속도를 보장하는 것은 아니다. 즉 단순히 풀의 크기를 늘린다고 더 빠른 속도로 처리되는 것은 아니다.")]),t._v(" "),n("p",[n("img",{attrs:{src:s(464),alt:""}})]),t._v(" "),n("p",[t._v("데이터베이스의 주요 병목 현상에 대해 살펴보면 CPU, 디스크, 네트워크 세 가지 관점으로 요약할 수 있다. 디스크와 네트워크를 무시하면 간단히 계산할 수 있다. 예시로 8개의 CPU 코어가 있는 서버가 있다고 가정하자. 서버는 커넥션 풀안에 커넥션 수를 8로 설정하면 최적의 성능을 제공할 수 있으며 이 이상의 커넥션을 생성할 경우 컨텍스트 스위칭의 오버헤드로 인해 속도는 느려질 것이다.")]),t._v(" "),n("p",[t._v("그러나 "),n("code",[t._v("디스크")]),t._v("와 "),n("code",[t._v("네트워크")]),t._v("가 변수로 작용하게 된다. 데이터베이스는 일반적으로 디스크에 저장하는데, 전통적인 모터 구동 암에 읽기/쓰기 헤드가 장착된 회전 금속 플레이트로 구성된다. 읽기/쓰기 헤드는 한 번에 한 곳에만 읽을 수 있으며 다른 쿼리에 대한 데이터를 읽기 위해서는 새 위치를 "),n("code",[t._v("검색")]),t._v(" 해야 한다. 따라서 탐색 시간 비용과 플래터의 데이터가 다시 돌아오기 까지 디스크를 기다려야 하는 "),n("code",[t._v("회전 비용")]),t._v("이 추가적으로 발생한다.")]),t._v(" "),n("p",[t._v("디스크에서 위 과정이 일어나는 동안 스레드는 "),n("code",[t._v("block")]),t._v(" 된다. 이 시간 동안 다른 스레드의 작업을 처리할 수 있는 여유가 생기게 된다. 이러한 여유 덕분에 실제로 더 많은 작업을 수행할 수 있게 된다.")]),t._v(" "),n("p",[t._v("네트워크도 디스크와 유사하다. 이더넷 인터페이스를 통해  유선으로 데이터를 작성하면 송/수신 버퍼가 가득차거나 멈출 때 "),n("code",[t._v("block")]),t._v("이 발생할 수 있다.")]),t._v(" "),n("p",[n("img",{attrs:{src:s(465),alt:""}})]),t._v(" "),n("p",[t._v("다양한 상황을 고려 했을 때 PostgreSQL에서는 아래와 같은 공식을 제안했다. 또한 여러 데이터베이스에도 적용할 수 있다고 언급되어 있다.")]),t._v(" "),n("blockquote",[n("p",[n("em",[t._v("connections = (core_count * 2) + effective_spindle_count")])])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("core_count * 2")]),t._v(": 코어 수에 근접할 수록 좋지만, 위에서 언급한 디스크 및 네트워크와 CPU의 속도차이로 인한 여유 시간을 활용하기 위해 계수 2를 곱해준다.")]),t._v(" "),n("li",[n("code",[t._v("effective_spindle_count")]),t._v(": 하드 디스크는 하나의 spindle을 가진다. spindle은 데이터베이스 서버가 관리할 수 있는 동시 I/O 요청 수를 말한다. 디스크가 "),n("code",[t._v("n개")]),t._v(" 존재하면 "),n("code",[t._v("spindle_count")]),t._v("는 "),n("code",[t._v("n")]),t._v("이 될 수 있다.")])]),t._v(" "),n("blockquote",[n("p",[t._v("PostgreSQL 공식 문서에 따르면 SSD에서는 얼마나 잘 작동하는지에 대한 분석은 아직까지 없다.")])]),t._v(" "),n("p",[t._v("하나의 하드 디스크가 있는 4-core i7 CPU를 가진 서버에서 "),n("code",[t._v("9 = (4 * 2) + 1")]),t._v("의 커넥션 풀을 설정해야 한다. 대략 10을 설정할 수 있다. 위 공식은 절대적인 것이 아니기 때문에 풀 크기를 선정할 때 기준으로 활용할 수 있다.")]),t._v(" "),n("p",[t._v("사용자가 10,000명이라고 커넥션 풀이 10,000개를 설정한 것은 굉장한 낭비에 가깝다. 1,000개도 많다. 심지어 100개의 커넥션도 과하다. 위에 언급한 바와 같이 "),n("code",[t._v("CPU core * 2")]),t._v(" 보다 훨씬 많은 경우는 거의 없다. 데이터베이스를 과도하게 낭비하지 말자.")]),t._v(" "),n("p",[t._v("다음 시간에는 이러한 내용을 기반으로 달록에 직접 적용해보려 한다.")]),t._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References.")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/brettwooldridge/HikariCP",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://techblog.woowahan.com/2663/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP Dead lock에서 벗어나기 (이론편)"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://techblog.woowahan.com/2664/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HikariCP Dead lock에서 벗어나기 (실전편)"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://www.youtube.com/watch?v=6Q7iRTb4tQE",target:"_blank",rel:"noopener noreferrer"}},[t._v("프로그래밍 초식: 커넥션풀 설정"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://hyuntaeknote.tistory.com/m/12",target:"_blank",rel:"noopener noreferrer"}},[t._v("내가 만든 서비스는 얼마나 많은 사용자가 이용할 수 있을까? - 3편(DB Connection Pool)"),n("OutboundLink")],1),n("br"),t._v(" "),n("a",{attrs:{href:"https://dba.stackexchange.com/questions/228663/what-is-effective-spindle-count",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is effective spindle count"),n("OutboundLink")],1)]),t._v(" "),n("TagLinks")],1)}),[],!1,null,null,null);a.default=e.exports}}]);