{
    "version": "https://jsonfeed.org/version/1",
    "title": "배움을 기록",
    "home_page_url": "https://hyeonic.github.io",
    "feed_url": "https://hyeonic.github.io/feed.json",
    "description": "배움을 기록하기 위한 블로그입니다.",
    "items": [
        {
            "id": "https://hyeonic.github.io/retrospect/2022-retrospect.html",
            "url": "https://hyeonic.github.io/retrospect/2022-retrospect.html",
            "title": "조금 늦은 2022년 회고",
            "summary": "2022년은 내게 조금은 특별한 해이다. 단순히 기술적인 성장을 넘어 한 사람으로서의 가치관을 형성할 수 있었던 시기였다. 회고를 통해 지난 1년을 뒤돌아보며 점검할 수 있는 회고를 적어보려 한다.",
            "image": "https://hyeonic.github.io/./2022-restrospect/1.png",
            "date_modified": "2023-01-12T21:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/concurrency/concurrency-5.html",
            "url": "https://hyeonic.github.io/spring/concurrency/concurrency-5.html",
            "title": "🚗 차근차근 동시성 이슈 해결하기 (5)",
            "summary": "🚗 차근차근 동시성 이슈 해결하기 (2) - Pessimistic Lock\n> 🚗 차근차근 동시성 이슈 해결하기 (3) - Optimistic Lock\n> 🚗 차근차근 동시성 이슈 해결하기 (4) - Named Lock\n> 👉 🚗 차근차근 동시성 이슈 해결하기 (5) - Spinlock",
            "image": "https://hyeonic.github.io/./concurrency-5/1.png",
            "date_modified": "2022-12-14T23:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/concurrency/concurrency-4.html",
            "url": "https://hyeonic.github.io/spring/concurrency/concurrency-4.html",
            "title": "🚗 차근차근 동시성 이슈 해결하기 (4)",
            "summary": "네임드 락은 GET_LOCK() 함수를 활용하여 임의의 문자열에 대한 잠금을 설정할 수 있다. 단순히 사용자가 지정한 문자열에 대한 락을 획득하고 반납한다.",
            "image": "https://hyeonic.github.io/./concurrency-4/1.png",
            "date_modified": "2022-12-14T17:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/concurrency/concurrency-3.html",
            "url": "https://hyeonic.github.io/spring/concurrency/concurrency-3.html",
            "title": "🚗 차근차근 동시성 이슈 해결하기 (3)",
            "summary": "이점이 많다.",
            "image": "https://hyeonic.github.io/./concurrency-3/1.png",
            "date_modified": "2022-12-13T23:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/concurrency/concurrency-2.html",
            "url": "https://hyeonic.github.io/spring/concurrency/concurrency-2.html",
            "title": "🚗 차근차근 동시성 이슈 해결하기 (2)",
            "summary": "예제 코드는 이전에 synchronized를 활용한 동시성 이슈 해결에서 사용한 Product 엔티티를 재사용할 것이다. 추가된 부분은 x-lock을 건 뒤 조회하는 메서드가 추가 되었다.",
            "image": "https://hyeonic.github.io/./concurrency-2/1.png",
            "date_modified": "2022-12-12T16:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/concurrency/concurrency-1.html",
            "url": "https://hyeonic.github.io/spring/concurrency/concurrency-1.html",
            "title": "🚗 차근차근 동시성 이슈 해결하기 (1)",
            "summary": "먼저 이번 글에서 사용하는 예제 코드를 살펴보자. 아래는 특정 상품을 나타내기 위한 Product 엔티티이다. Product는 이름과 한정된 개수를 나타내는 quantity를 가지고 있다.",
            "image": "https://hyeonic.github.io/./concurrency-1/1.png",
            "date_modified": "2022-12-11T17:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/java/basic/java-string.html",
            "url": "https://hyeonic.github.io/java/basic/java-string.html",
            "title": "문자열 생성 방식 비교하기",
            "summary": "}\n}\n`",
            "image": "https://hyeonic.github.io/./java-string/1.png",
            "date_modified": "2022-12-10T17:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/db/spring-transaction-2.html",
            "url": "https://hyeonic.github.io/spring/db/spring-transaction-2.html",
            "title": "스프링이 개선한 트랜잭션 (2)",
            "summary": "public class TransactionTemplate extends DefaultTransactionDefinition\n        implements TransactionOperations, InitializingBean {\n    // ...\n    public  T execute(TransactionCallback action) throws TransactionException {\n        // ...\n        T result;\n        try {\n            result = action.doInTransaction(status);\n        } catch (RuntimeException | Error ex) {\n            // Transactional code threw application exception -> rollback\n            rollbackOnException(status, ex);\n            throw ex;\n            // ...\n            this.transactionManager.commit(status);\n            return result;\n        }\n        // ...\n    }\n    // ...\n}\n`",
            "date_modified": "2022-12-10T13:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/db/spring-transaction-1.html",
            "url": "https://hyeonic.github.io/spring/db/spring-transaction-1.html",
            "title": "스프링이 개선한 트랜잭션 (1)",
            "summary": "new Account(account.getId(), account.getHolder(), account.getAmount() - amount));\n            connection.commit();\n        } catch (final SQLException e) {\n            connection.rollback();\n            throw new RuntimeException(e);\n        }\n    }\n    // ...\n}\n`",
            "date_modified": "2022-12-10T00:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/jpa/basic/optimistic-locking.html",
            "url": "https://hyeonic.github.io/jpa/basic/optimistic-locking.html",
            "title": "낙관적 락과 동시성 테스트",
            "summary": "}",
            "image": "https://hyeonic.github.io/./optimistic-locking/version.png",
            "date_modified": "2022-12-03T12:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/jpa/basic/save-persist-merge.html",
            "url": "https://hyeonic.github.io/jpa/basic/save-persist-merge.html",
            "title": "SimpleJpaRepository의 save()는 어떻게 새로운 엔티티를 판단할까?",
            "summary": "그렇다면 isNew()는 어떻게 새로운 entity인지 확인할까? 구현 코드를 살펴보자.",
            "date_modified": "2022-11-21T00:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/woowacourse/dallog/hikari-cp-3-spadework.html",
            "url": "https://hyeonic.github.io/woowacourse/dallog/hikari-cp-3-spadework.html",
            "title": "HikariCP와 적절한 풀 사이즈 고민하기 (3) - 삽질편",
            "summary": ");\n        }\n        ...\n    }\n}\n`",
            "image": "https://hyeonic.github.io/./hikari-cp-3-spadework/1.png",
            "date_modified": "2022-11-01T12:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/jpa/basic/osiv.html",
            "url": "https://hyeonic.github.io/jpa/basic/osiv.html",
            "title": "OSIV와 사용하며 직면한 문제",
            "summary": "spring:\n    jpa:\n        open-in-view: true\n`",
            "image": "https://hyeonic.github.io/./osiv/1.png",
            "date_modified": "2022-10-24T20:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/woowacourse/dallog/hikari-cp-2-actual.html",
            "url": "https://hyeonic.github.io/woowacourse/dallog/hikari-cp-2-actual.html",
            "title": "HikariCP와 적절한 풀 사이즈 고민하기 (2) - 실전편",
            "summary": "보다 더 유의미한 처리량을 확인하기 위해 반복 횟수(loop count)도 적절히 설정한다.",
            "image": "https://hyeonic.github.io/./hikari-cp-2-actual/t4gmicro.png",
            "date_modified": "2022-10-18T17:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/woowacourse/dallog/hikari-cp-1-theory.html",
            "url": "https://hyeonic.github.io/woowacourse/dallog/hikari-cp-1-theory.html",
            "title": "HikariCP와 적절한 풀 사이즈 고민하기 (1) - 이론편",
            "summary": "...\n    private static final long MAX_LIFETIME = MINUTES.toMillis(30);\n    ...\n}\n`",
            "image": "https://hyeonic.github.io/./hikari-cp-1-theory/hikari-dependency.png",
            "date_modified": "2022-10-16T21:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/database/basic/covering-index.html",
            "url": "https://hyeonic.github.io/database/basic/covering-index.html",
            "title": "커버링 인덱스",
            "summary": "`",
            "image": "https://hyeonic.github.io/./covering-index/image-1.png",
            "date_modified": "2022-10-10T12:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/basic/template-callback.html",
            "url": "https://hyeonic.github.io/spring/basic/template-callback.html",
            "title": "jdbcTemplate을 만들며 마주한 Template Callback 패턴",
            "summary": "JdbcTemplate은 아래와 같은 일을 담당한다.",
            "date_modified": "2022-10-09T17:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/spring/basic/ioc-container.html",
            "url": "https://hyeonic.github.io/spring/basic/ioc-container.html",
            "title": "IoC 컨테이너",
            "summary": "public User findById(long id) {\n        try (final var connection = dataSource.getConnection()) {\n            return users.get(id);\n        } catch (SQLException e) {\n            log.error(e.getMessage());\n            return null;\n        }\n    }\n}\n`",
            "date_modified": "2022-10-08T18:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/java/jdbc/jdbc.html",
            "url": "https://hyeonic.github.io/java/jdbc/jdbc.html",
            "title": "JDBC",
            "summary": "@Override\n  void setLoginTimeout(int seconds) throws SQLException;",
            "date_modified": "2022-10-08T10:00:00.000Z"
        },
        {
            "id": "https://hyeonic.github.io/woowacourse/dallog/cyclic-dependency.html",
            "url": "https://hyeonic.github.io/woowacourse/dallog/cyclic-dependency.html",
            "title": "cyclic dependency",
            "summary": "...\npublic class Subscriptions {\n    ...\n    public Color findColor(final IntegrationSchedule schedule) {\n        return subscriptions.stream()\n                .filter(schedule::isSameCategory)\n                .findAny()\n                .orElseThrow(() -> new NoSuchCategoryException(\"구독하지 않은 카테고리 입니다.\"))\n                .getColor();\n    }\n    ...\n}\n`",
            "image": "https://hyeonic.github.io/./cyclic-dependency/image-1.png",
            "date_modified": "2022-09-30T17:00:00.000Z"
        }
    ]
}