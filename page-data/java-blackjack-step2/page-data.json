{"componentChunkName":"component---src-templates-post-jsx","path":"/java-blackjack-step2/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"bb44264a-c6e4-5f39-abb1-f8cc54778430","excerpt":"목표  우아한테크코스에서 진행한 미션의 리뷰와 피드백에 대해 정리한다. 실제 리뷰는 [1단계 - 블랙잭] 매트(최기현) 미션 제출합니다.에서 확인할 수 있다. 06. 2단계 - 블랙잭(베팅) 리뷰 확인 System.lineSeparator() 리뷰 중 일부 은 부터 제공되며 프로그램이 실행되는 OS에 따라 적합한 개행 문자를 리턴해주는 것을 확인했다. J…","html":"<h2>목표</h2>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/152970395-a31c8134-fc89-449f-b4dc-441e03df929c.png\"></p>\n<p>우아한테크코스에서 진행한 미션의 리뷰와 피드백에 대해 정리한다. 실제 리뷰는 <a href=\"https://github.com/woowacourse/java-blackjack/pull/237\">[1단계 - 블랙잭] 매트(최기현) 미션 제출합니다.</a>에서 확인할 수 있다.</p>\n<h2>06. 2단계 - 블랙잭(베팅) 리뷰 확인</h2>\n<h2>System.lineSeparator()</h2>\n<h4>리뷰 중 일부</h4>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token code-snippet code keyword\">`럿고`</span>: <span class=\"token code-snippet code keyword\">`System.lineSeparator()`</span> 이걸 한번 알아보면 어떠신가요?</code></pre></div>\n<p><code class=\"language-text\">System.lineSeparator()</code>은 <code class=\"language-text\">JDK 1.7</code>부터 제공되며 프로그램이 실행되는 OS에 따라 적합한 개행 문자를 리턴해주는 것을 확인했다. Java에서 이러한 메서드를 제공하는 이유는 윈도우<code class=\"language-text\">(\\r\\n)</code>, 맥<code class=\"language-text\">(\\r)</code>, 유닉스<code class=\"language-text\">(\\n)</code>과 같은 운영체제 별로 개행문자를 다르게 해석하기 때문이라고 생각된다.</p>\n<p>더 나아가 자동으로 개행을 작성해주는 <code class=\"language-text\">System.out.println()</code> 메서드의 내부도 살펴보았다. 내부 로직을 따라가다 보면 <code class=\"language-text\">newLine</code> 부분에서 <code class=\"language-text\">System.lineSeparator()</code>을 활용하여 줄바꿈을 진행하는 것을 확인했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintStream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FilterOutputStream</span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Appendable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Closeable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- 클릭</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintStream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FilterOutputStream</span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Appendable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Closeable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ensureOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                textOut<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;- 클릭</span>\n                textOut<span class=\"token punctuation\">.</span><span class=\"token function\">flushBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                charOut<span class=\"token punctuation\">.</span><span class=\"token function\">flushBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>autoFlush<span class=\"token punctuation\">)</span>\n                    out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedIOException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            trouble <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedWriter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Writer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">lineSeparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사용되는 것을 확인</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>findFirst() vs findAny()</h2>\n<h4>리뷰 중 일부</h4>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token code-snippet code keyword\">`럿고`</span>: findFirst()가 더 맞지 않을까요?</code></pre></div>\n<p>Stream에서 어떤 조건에 일치하는 요소를 1개 찾을 때 <code class=\"language-text\">findFirst()</code>, <code class=\"language-text\">findAny()</code>와 같은 API를 사용할 수 있다. 가장 큰 차이는 <code class=\"language-text\">병렬 처리</code>할 때 이다.</p>\n<h3>findFirst()</h3>\n<p><code class=\"language-text\">findFirst()</code>는 여러 요소가 조건에 부합해도 Stream의 순서를 고려하여 가장 처음 부합하는 요소를 리턴한다.</p>\n<h3>findAny()</h3>\n<p><code class=\"language-text\">findAny()</code>는 멀티스레드에서 Stream을 처리할 때 가장 먼저 찾는 요소를 리턴한다. 즉 Stream의 순서를 고려하지 않는다.</p>\n<h2>BigDecimal을 사용한 BettingMoney</h2>\n<h4>리뷰 중 일부</h4>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token code-snippet code keyword\">`럿고`</span>: BigDecimal을 선택하신 이유가 있나요?\n\n<span class=\"token code-snippet code keyword\">`매트`</span>: 배팅 머니라서 돈이라는 도메인을 다루기 위해 BigDecimal을 사용하였습니다. Java에서 실수는 기본적으로 <span class=\"token code-snippet code keyword\">`부동 소수점 방식`</span>을 활용하기 때문에 <span class=\"token code-snippet code keyword\">`연산 시 정확한 답을 보장하지 않는다`</span>고 학습한 경험이 있습니다. 다양한 승리 조건에 따라 1.5, 1, 0 등을 곱해야 하기 때문에 단순히 double로 연산하게 될 경우 소중한 돈이 변경될 것을 우려하여 BigDecimal을 사용하였습니다! \n\n<span class=\"token code-snippet code keyword\">`럿고`</span>: 좋은 근거입니다~ 👍</code></pre></div>\n<p>이전 미션에서 금액을 다루는 도메인에 대한 리뷰를 진행할 때 <code class=\"language-text\">BigDecimal</code>에 대한 키워드들을 들을 수 있었다. 이번 미션에서도 비슷하게 베팅 머니인 돈과 관련된 도메인이 등장하게 되었고 이전에 학습한 것을 기반으로 적용하게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BettingMoney</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MONEY_SCALE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MONEY_LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MONEY_DIVIDE_STANDARD</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"000\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BettingMoney</span> <span class=\"token constant\">ZERO</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BettingMoney</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ZERO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BigDecimal</span> amount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BettingMoney</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span> bigDecimal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> bigDecimal<span class=\"token punctuation\">.</span><span class=\"token function\">setScale</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MONEY_SCALE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RoundingMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLOOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">BettingMoney</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateLength</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateDivide</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BettingMoney</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MONEY_LENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"배팅 금액은 1000원 이상입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateDivide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MONEY_DIVIDE_STANDARD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"배팅 금액은 1000으로 나누어 떨어져야 합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BettingMoney</span> <span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> percent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BigDecimal</span> multiplied <span class=\"token operator\">=</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>percent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BigDecimal</span> result <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>multiplied<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BettingMoney</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BettingMoney</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BettingMoney</span> otherBettingMoney<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BigDecimal</span> add <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>otherBettingMoney<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BettingMoney</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> amount<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">BettingMoney</span> that <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BettingMoney</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> that<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본적으로 VO로 동작하도록 값이 변하는 연산에는 새롭게 생성하여 반환 처리하였다. 또한 초기 <code class=\"language-text\">BettingMoney</code> 세팅 시 <code class=\"language-text\">1000이상이고 1000으로 나누어 떨어지는 상황</code>을 연출하기 위해 추가적인 검증을 진행하였다. 이러한 생성은 정적 팩토리 메서드 활용 하였다.</p>\n<p>정적 팩토리 메서드를 사용한 이유는 외부에서 생성될 때만 해당 검증을 진행하기 위해서이다. 객체 내부에서 사용할 때 해당 검증을 적용할 필요가 없기 때문에 검증을 분리하는 식으로 구현 하였다. 또한 자주 사용 되는 <code class=\"language-text\">ZERO</code>를 상수로 선언하여 이익 계산을 할 때 초기값으로 활용할 수 있도록 작성하였다.</p>\n<h2>객체도 상수가 될 수 있다.</h2>\n<h4>리뷰 중 일부</h4>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token code-snippet code keyword\">`럿고`</span>: <span class=\"token code-snippet code keyword\">`new Name(\"딜러\");`</span> 자체를 상수로 관리해도 될듯 한데, 혹시 어떻게 생각하실까요?</code></pre></div>\n<p>각 참가자는 이름을 가지고 있다. 이러한 이름은 게임 시작과 동시에 입력된다. 하지만 딜러의 이름은 게임 시작과 동시에 <code class=\"language-text\">딜러</code>로 고정된다. 이러한 딜러는 게임 내내 변하지 않기 때문에 문자열 상수로 처리하였다. 하지만 현재 문자열 이름은 원시값 포장되어 Name 객체로 관리되고 있다. 즉 Name 객체 자체를 상수로 가지고 있어도 무방하다는 것이다. 사소한 차이이지만 다양한 시선에서 생각하는 방법을 확인할 수 있었다.</p>\n<h2>상태 패턴</h2>\n<p>수업 시간 중에 블랙잭 피드백을 진행했다. 해당 수업에서는 상태 패턴에 관한 내용을 다뤘고 이것을 간단히 학습한 뒤 이번 미션에 적용하였다. 아래는 상태 패턴에 대해 간단히 정리한 것이다.</p>\n<h4>상태 패턴</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">상태 패턴은 특정 기능을 수행한 뒤 다음 상태를 반환하는 것이다. 동일한 메서드가 상태에 따라 다르게 동작할 수 있도록 별도의 하위 타입으로 구현한다. 같은 기능을 단순히 조건문을 활용할 경우 상태가 추가될 때마다 조건문도 함께 추가된다. 하지만 상태 패턴을 사용하게 될 경우 코드의 복잡도가 증가하지 않고 상태를 추가할 수 있다.</code></pre></div>\n<p>아래는 이번 미션에 실제 적용한 상태 패턴이다. 가지고 있는 카드의 점수를 기반으로 현재 상태를 판단하여 다음 상태를 반환하는 방식으로 구현했다.</p>\n<h3>State Interface</h3>\n<p>필요한 공통 상태를 선언한 인터페이스입니다. 구현할 상태에 변화를 줄 기능을 추상화한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">State</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Card</span> card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">State</span> <span class=\"token function\">stay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Cards</span> <span class=\"token function\">cards</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">earningRate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 인터페이스를 기반으로 적절한 상태를 하위 클래스로 만들어 구현 했다. 상태 패턴을 적용한 클래스들의 다이어그램은 아래와 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/159109492-3677601f-6009-4abd-8d8a-cd13684426ef.png\"></p>\n<p>모든 상태의 시작이 Ready가 될 수 있도록 나머지 상태는 protected로 외부 생성을 제한하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Blackjack</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Finished</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Blackjack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cards</span> cards<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 중간에 공통 상태(Finished)를 추상 클래스로 묶어 공통적인 행위들을 final로 지정하여 상속 받은 하위 타입이 다시 오버라이딩 할 수 없도록 제한하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Finished</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Started</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">BLACKJACK_WIN_RATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">WIN_RATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TIE_RATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">LOW_RATE</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Finished</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cards</span> cards<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">State</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Card</span> card<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"카드를 뽑을 수 없는 상태입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">State</span> <span class=\"token function\">stay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"스테이 상태로 변경할 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Collections.emptyList() vs new List Instance</h2>\n<h4>리뷰 중 일부</h4>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token code-snippet code keyword\">`럿고`</span>: <span class=\"token code-snippet code keyword\">`this(Collections.emptyList());`</span> 이런식으로 작성이 불가능 할까요?</code></pre></div>\n<p><code class=\"language-text\">Collections.emptyList()</code>와 <code class=\"language-text\">new ArrayList&lt;>()</code>의 핵심 차이점은 불변성이다. <code class=\"language-text\">Collections.emptyList()</code>는 수정할 수 없는 목록을 반환한다. 또한 이름에서 비어있는 리스트를 표현하고 있기 때문에 의도를 잘 표현하고 있다. 즉 더 좋은 가독성을 가지고 있다.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://codechacha.com/ko/java8-stream-difference-findany-findfirst/\">Java Stream - findAny()와 findFirst()의 차이점</a></li>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2021-04-26-state-pattern/\">상태 패턴(State Pattern)을 사용해보자</a></li>\n<li><a href=\"https://www.baeldung.com/java-collections-emptylist-new-list\">Collections.emptyList() vs. New List Instance</a></li>\n</ul>","frontmatter":{"title":"06. 2단계 - 블랙잭(베팅)","date":"March 21, 2022","update":"March 21, 2022","tags":["우아한테크코스","미션"],"series":"우아한테크코스 레벨1"},"fields":{"slug":"/java-blackjack-step2/","readingTime":{"minutes":10.835}}},"seriesList":{"edges":[{"node":{"id":"4725c2e2-e907-5ff3-bef0-faa91dcfe8ef","fields":{"slug":"/java-racing-car-step1/"},"frontmatter":{"title":"01. 1단계 - 자동차 경주 구현"}}},{"node":{"id":"65e96d09-08e4-5540-8744-dab5c29628a4","fields":{"slug":"/java-racing-car-step2/"},"frontmatter":{"title":"02. 2단계 - 자동차 경주 구현"}}},{"node":{"id":"2c1e28dd-599b-58fd-917e-0abefaf110fd","fields":{"slug":"/java-lotto-step1/"},"frontmatter":{"title":"03. 1단계 - 로또(자동)"}}},{"node":{"id":"c8b191aa-f4d7-5a77-a813-97fa5bfb1aa0","fields":{"slug":"/java-lotto-step2/"},"frontmatter":{"title":"04. 2단계 - 로또(수동)"}}},{"node":{"id":"6754ea3c-f1a8-591b-8995-96269d524c88","fields":{"slug":"/java-blackjack-step1/"},"frontmatter":{"title":"05. 1단계 - 블랙잭"}}},{"node":{"id":"bb44264a-c6e4-5f39-abb1-f8cc54778430","fields":{"slug":"/java-blackjack-step2/"},"frontmatter":{"title":"06. 2단계 - 블랙잭(베팅)"}}},{"node":{"id":"9069b1ac-c0e1-53c5-87c8-417b654a02e8","fields":{"slug":"/java-chess-step1/"},"frontmatter":{"title":"07. 1, 2, 3단계 - 체스"}}},{"node":{"id":"0b7ba85e-6e63-5679-a514-d1a84734d181","fields":{"slug":"/java-chess-step2/"},"frontmatter":{"title":"08. 4, 5단계 - 체스"}}}]},"previous":{"fields":{"slug":"/java-blackjack-step1/"},"frontmatter":{"title":"05. 1단계 - 블랙잭"}},"next":{"fields":{"slug":"/java-chess-step1/"},"frontmatter":{"title":"07. 1, 2, 3단계 - 체스"}}},"pageContext":{"id":"bb44264a-c6e4-5f39-abb1-f8cc54778430","series":"우아한테크코스 레벨1","previousPostId":"6754ea3c-f1a8-591b-8995-96269d524c88","nextPostId":"9069b1ac-c0e1-53c5-87c8-417b654a02e8"}},"staticQueryHashes":[],"slicesMap":{}}