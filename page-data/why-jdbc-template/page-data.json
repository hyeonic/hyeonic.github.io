{"componentChunkName":"component---src-templates-post-jsx","path":"/why-jdbc-template/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"2dac6856-47a1-5ef0-9c9f-d69d4234afcf","excerpt":"개요 웹 체스 미션을 진행하던 중 Spring Jdbc를 도입하기 위해 이전에 연결된 JDBC에 대한 의존성을 제거한 뒤 에서 제공하는 을 활용하여 SQL 쿼리를 사용하였다. 하지만 나는 에 대한  등록을 진행하지 않았다. 그렇다면 누가 자동으로 등록한 것일까?  JDBC (Java DataBase Connectivity) 우선 이전에 사용하던 JDBC에…","html":"<p><img src=\"https://user-images.githubusercontent.com/59357153/152970395-a31c8134-fc89-449f-b4dc-441e03df929c.png\"></p>\n<h2>개요</h2>\n<p>웹 체스 미션을 진행하던 중 Spring Jdbc를 도입하기 위해 이전에 연결된 JDBC에 대한 의존성을 제거한 뒤 <code class=\"language-text\">Spring-jdbc</code>에서 제공하는 <code class=\"language-text\">JdbcTemplate</code>을 활용하여 SQL 쿼리를 사용하였다. 하지만 나는 <code class=\"language-text\">JdbcTemplate</code>에 대한 <code class=\"language-text\">Bean</code> 등록을 진행하지 않았다. 그렇다면 누가 자동으로 등록한 것일까?</p>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/165691946-6761593a-9ea0-4a4e-aa45-72674eebc92f.png\"></p>\n<h2>JDBC (Java DataBase Connectivity)</h2>\n<p>우선 이전에 사용하던 JDBC에 대해 간단히 알아본다. JDBC는 Java와 데이터베이스를 연결하기 위한 Java 표준 인터페이스이다. 아래 그림과 같이 MySql, oracle 등 다양한 DB의 미들웨어의 드라이버를 제공하고 있다. 덕분에 어떤 DB에 연결되는지에 따라 드라이버를 선택하여 적용할 수 있다. 또한 어떤 DB의 드라이버인지 상관없이 일관적인 방식으로 사용할 수 있도록 도와준다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/165686797-ec8e6f35-dbd1-4f7e-a2d3-dedf2bb50482.png\"></p>\n<p>일반적인 JDBC를 그대로 사용하게 되면 아래와 같은 흐름으로 사용하게 된다.</p>\n<ul>\n<li>JDBC 드라이버를 로드</li>\n<li>DB를 연결</li>\n<li>DB의 데이터 조회 및 쓰기</li>\n<li>DB 연결 종료</li>\n</ul>\n<p>덕분에 DB에 접근하여 SQL 쿼리를 실행하기 위해 복잡한 코드를 동반하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcPieceDao</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PieceDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/chess\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">PASSWORD</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PieceDto</span> pieceDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO piece (id, piece_type) VALUES (?, ?)\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token class-name\">PreparedStatement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pieceDto<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">PieceType</span> pieceType <span class=\"token operator\">=</span> pieceDto<span class=\"token punctuation\">.</span><span class=\"token function\">getPieceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pieceType<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"기물의 위치는 중복될 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">USER</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PASSWORD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Spring JDBC</h2>\n<p><code class=\"language-text\">Spring JDBC</code>는 Driver 및 DB 연결과 <code class=\"language-text\">Connection</code> 객체의 관리를 수행하는 <code class=\"language-text\">DataSource</code>를 설정을 통해 생성하며 위에서 사용한 것 처럼 JDBC API를 직접 사용했을 때 불편했던 것들을 쉽게 사용할 수 있도록 도와준다.</p>\n<p>정리하면 JDBC API의 모든 저수준 처리를 Spring Framework에 위임하기 때문에 위에서 작성한 반복되는 처리를 개발자가 직접 처리하지 않고 Database에 대한 작업을 수행할 수 있도록 도와준다.</p>\n<h2>Data Access with JDBC</h2>\n<p>JBDC 데이터베이스 접근의 기초를 형성하기 위해 여러 접근 방식을 선택할 수 있다.</p>\n<ul>\n<li><code class=\"language-text\">JdbcTemplate</code>: 고전적이고 가장 인기 있는 Spring JDBC 방식이다. <code class=\"language-text\">lowest-level</code> 접근법과 다른 모든 것들은 <code class=\"language-text\">JdbcTemplate</code>를 사용한다.</li>\n<li><code class=\"language-text\">NamedParameterJdbcTemplate</code>: 기존 JDBC <code class=\"language-text\">?</code> 표시자 대신 <code class=\"language-text\">명명된 매개 변수를 제공</code>하기 위해 <code class=\"language-text\">JdbcTemplate을 랩핑</code>한다. 이러한 접근 방식은 SQL 문에 대한 매개 변수가 여러 개 일 때 더 나은 문서화와 사용 편의성을 제공한다.</li>\n<li><code class=\"language-text\">SimpleJdbcInsert</code>: 데이터베이스 메타데이터를 최적화하여 필요한 구성 양을 제한한다. 해당 방법을 사용하면 테이블 또는 프로시저의 이름만 제공하고 <code class=\"language-text\">column 이름과 일치하는 맵</code>을 제공해야 하므로 코딩이 매우 간소화된다. 하지만 이것은 데이터베이스가 적절한 메타데이터를 제공하는 경우에만 작동한다. 데이터베이스가 이 메타데이터를 제공하지 않는 경우 매개 변수의 명시적 구성을 제공해야 한다.</li>\n</ul>\n<h2>JdbcTemplate는 어디에?</h2>\n<p>이제 JDBC와 Spring JDBC에 대한 간단한 개념 정리를 진행했다. 본론으로 넘어와 <code class=\"language-text\">JdbcTemplate</code>를 자동으로 등록한 곳을 찾아보려 한다.</p>\n<p>Spring Boot의 자동 구성은 애플리케이션에 적용할 수 있는 여러 구성 클래스로 작동한다. 이런 모든 구성은 Spring 4.0의 조건부 구성 지원 기능을 이용하여 <code class=\"language-text\">런타임 시점</code>에 구성을 사용할지 여부를 결정한다.</p>\n<p>아래는 <code class=\"language-text\">org.springframework.boot.autoconfigure.jdbc</code> 패키지에 위치한 <code class=\"language-text\">JdbcTemplateConfiguration</code> 클래스이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>jdbc</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span><span class=\"token punctuation\">(</span>proxyBeanMethods <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcOperations</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcTemplateConfiguration</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token annotation punctuation\">@Primary</span>\n\t<span class=\"token class-name\">JdbcTemplate</span> <span class=\"token function\">jdbcTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JdbcProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">JdbcTemplate</span> jdbcTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">JdbcProperties<span class=\"token punctuation\">.</span>Template</span> template <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">getTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tjdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setFetchSize</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">getFetchSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tjdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxRows</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tjdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setQueryTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">getQueryTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">jdbcTemplate(DataSource dataSource, JdbcProperties properties)</code> 메서드는 <code class=\"language-text\">@Bean</code> 애너테이션 덕분에 <code class=\"language-text\">JdbcTemplate Bean</code>을 구성해준다. 하지만 주목해야 할 것은 <code class=\"language-text\">@ConditionalOnMissingBean(JdbcOperations.class)</code> 부분이다.</p>\n<h3>@ConditionalOnMissingBean(JdbcOperations.class)</h3>\n<p><code class=\"language-text\">@ConditionalOnMissingBean</code>은 속성으로 전달된 <code class=\"language-text\">JdbcOperations</code> 타임의 <code class=\"language-text\">Bean</code>이 없을 때만 동작한다. <code class=\"language-text\">JdbcTemplate</code>은 바로 <code class=\"language-text\">JdbcOperations</code>의 구현체이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JdbcAccessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">JdbcOperations</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 개발자가 명시적으로 <code class=\"language-text\">JdbcOperations</code> 타입의 Bean을 구성했다면 <code class=\"language-text\">@ConditionalOnMissingBean</code> 애너테이션의 조건에 만족하지 못하므로 해당 메서드는 사용되지 않는다. </p>\n<p>정리하면 나는 명시적으로 <code class=\"language-text\">JdbcTempalate</code>를 등록하지 않았다. 그렇기 때문에 <code class=\"language-text\">@ConditionalOnMissingBean</code> 애너테이션의 조건에 만족하여 <code class=\"language-text\">자동 구성에서 제공하는 JdbcTemplate를 Bean</code>으로 등록하여 사용하고 있는 것이다.</p>\n<p>관련 키워드를 검색하기 위해 구글링하던 중 <code class=\"language-text\">stackOverflow</code>에서 관련 된 글을 찾아볼 수 있었다.</p>\n<h3>Question</h3>\n<p><a href=\"https://stackoverflow.com/questions/61452371/how-does-spring-boot-inject-the-instance-of-applicationcontext-and-jdbctemplate\">How does spring boot inject the instance of ApplicationContext and JdbcTemplate using @Autowired without @Component annotation and xml configuration?</a></p>\n<p><strong>Spring Boot에서 @Component 및 xml 구성 없이 @Autowired를 사용하여 JdbcTemplate 인스턴스를 주입하는 방법은 무엇인가?</strong></p>\n<p>i'm in a spring boot app building rest controller.i find that ApplicationContext and JdbcTemplate source code,these 2 classes do not have any annotation.But they can be correctly injected into constructor.i am not using any configuration file like 'applicationContext.xml'.When do these 2 classes get scanned by spring ioc container?</p>\n<p><strong>ApplicationContext 및 JdbcTemplate 소스 코드, 이 두 클래스에는 annotation이 없다. 그러나 constructor에 올바르게 삽입할 수 있다. 'applicationContext.xml'과 같은 구성 파일을 사용하지 않았다.이 두 클래스는 언제 spring ioc 컨테이너로 스캔되는가?</strong></p>\n<h3>Answer</h3>\n<p>Spring Boot does a lot of auto configuration.</p>\n<p><strong>Sprign Boot는 많은 자동 구성을 수행한다.</strong></p>\n<p>I assume that you are using spring-data-jdbc or spring-data-jpa and there for the JdbcTemplate is auto configured.</p>\n<p><strong>spring-data-jdbc 또는 spring-data-jpa를 사용하고 있으며 JdbcTemplate에 대해 자동 구성되었다고 가정한다.</strong></p>\n<p>The most interesting project is: spring-boot-autoconfigure where all the magic happens.</p>\n<p><strong>가장 흥미로운 프로젝트는 <code class=\"language-text\">spring-boot-autoconfigure</code>이다. 모든 마술이 일어나는 곳이다!</strong></p>\n<p>And there you will find <code class=\"language-text\">JdbcTemplateConfiguration.java</code></p>\n<p><strong>또한 <code class=\"language-text\">JdbcTemplateConfiguration.java</code> 관련 설정을 찾아볼 수 있다.</strong></p>\n<h2>정리</h2>\n<p>정리하면 우린 <code class=\"language-text\">spring-boot-autoconfigure</code> 덕분에 명시적으로 JdbcTemplate을 Bean으로 등록하지 않아도 자동 설정되므로 사용가능하다.</p>\n<p>이러한 자동 구성 덕분에 우리는 편리하게 기능에만 집중할 수 있게 된다. 만약 추가적인 JdbcTempalate에 대한 설정이 필요하다면 명시적인 등록을 추가하여 Bean으로 작성하기만 하면 된다. </p>\n<h2>References.</h2>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html\">Spring Data Access</a><br>\n<a href=\"https://tech.junhabaek.net/infra-layer-with-spring-spring-jdbc-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C-1c3f4e3ccb63\">Infra layer with Spring — Spring jdbc 개념과 예시 코드</a><br>\n<a href=\"https://velog.io/@koseungbin/Spring-JDBC\">Spring JDBC</a><br>\n<a href=\"https://stackoverflow.com/questions/61452371/how-does-spring-boot-inject-the-instance-of-applicationcontext-and-jdbctemplate\">How does spring boot inject the instance of ApplicationContext and JdbcTemplate using @Autowired without @Component annotation and xml configuration?</a></p>","frontmatter":{"title":"JdbcTemplate는 어디에?","date":"April 28, 2022","update":"April 28, 2022","tags":["우아한테크코스","JDBC","spring-jdbc"],"series":null},"fields":{"slug":"/why-jdbc-template/","readingTime":{"minutes":8.835}}},"seriesList":{"edges":[{"node":{"id":"2dac6856-47a1-5ef0-9c9f-d69d4234afcf","fields":{"slug":"/why-jdbc-template/"},"frontmatter":{"title":"JdbcTemplate는 어디에?"}}},{"node":{"id":"b77737b7-c888-54d0-8901-9921b4bbb703","fields":{"slug":"/spring-jdbc-batch/"},"frontmatter":{"title":"Spring JDBC로 batch 활용하기"}}},{"node":{"id":"59e94329-3d48-53b9-9995-90d61432234d","fields":{"slug":"/local-date-time/"},"frontmatter":{"title":"java에서 날짜, 시간 제대로 사용하기"}}},{"node":{"id":"c8dda97d-41c7-5596-a0c8-703fd69d92e7","fields":{"slug":"/identity-strategy/"},"frontmatter":{"title":"IDENTITY 전략는 추가 조회를 하지 않을 수 있다."}}},{"node":{"id":"c50af7e8-5953-5168-b4af-1d186a4254a7","fields":{"slug":"/separated-interface/"},"frontmatter":{"title":"외부와 의존성 분리하기"}}},{"node":{"id":"ba9d009e-d6e8-574f-9f7b-89819e3e57ca","fields":{"slug":"/properties-to-object/"},"frontmatter":{"title":"properties 객체로 다루기"}}},{"node":{"id":"7b780208-a850-5305-a51c-f0937cbdaf93","fields":{"slug":"/google-refresh-token/"},"frontmatter":{"title":"Google은 Refresh Token을 쉽게 내주지 않는다."}}},{"node":{"id":"58f32f4d-b2d6-54d6-b3dd-cb4cf4da1d70","fields":{"slug":"/basic-tomcat/"},"frontmatter":{"title":"Tomcat"}}},{"node":{"id":"d26e840e-0646-5dd9-a2d5-5670ddc81ede","fields":{"slug":"/jdbc/"},"frontmatter":{"title":"JDBC"}}},{"node":{"id":"e0a32367-096e-595a-9580-0d3d2fc6e9aa","fields":{"slug":"/template-callback/"},"frontmatter":{"title":"jdbcTemplate을 만들며 마주한 Template Callback 패턴"}}},{"node":{"id":"fa938264-2615-556e-bcfa-d749c30aa8fe","fields":{"slug":"/covering-index/"},"frontmatter":{"title":"커버링 인덱스"}}},{"node":{"id":"cf3a2936-1b1f-5d11-832e-dbb9f8051755","fields":{"slug":"/osiv/"},"frontmatter":{"title":"OSIV와 사용하며 직면한 문제"}}},{"node":{"id":"53859931-2807-5303-a90d-33df33a856de","fields":{"slug":"/save-persist-merge/"},"frontmatter":{"title":"SimpleJpaRepository의 save()는 어떻게 새로운 엔티티를 판단할까?"}}},{"node":{"id":"09a96ca9-bb95-55ab-83cf-d9d053b2ad70","fields":{"slug":"/optimistic-locking/"},"frontmatter":{"title":"낙관적 락과 동시성 테스트"}}},{"node":{"id":"647737e4-08ec-5813-a092-c27ef1da4292","fields":{"slug":"/java-string/"},"frontmatter":{"title":"문자열 생성 방식 비교하기"}}},{"node":{"id":"696ee6ba-c2ea-5e8b-a25f-aaa4eccfa5e9","fields":{"slug":"/2022-retrospect/"},"frontmatter":{"title":"조금 늦은 2022년 회고"}}},{"node":{"id":"5a61e41a-16ff-5669-bf0e-028ea40e0af3","fields":{"slug":"/jpa-auditing/"},"frontmatter":{"title":"Spring Data JPA Auditing"}}}]},"previous":null,"next":{"fields":{"slug":"/spring-jdbc-batch/"},"frontmatter":{"title":"Spring JDBC로 batch 활용하기"}}},"pageContext":{"id":"2dac6856-47a1-5ef0-9c9f-d69d4234afcf","series":null,"previousPostId":null,"nextPostId":"b77737b7-c888-54d0-8901-9921b4bbb703"}},"staticQueryHashes":[],"slicesMap":{}}