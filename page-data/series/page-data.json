{"componentChunkName":"component---src-pages-series-jsx","path":"/series/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"allMarkdownRemark":{"group":[{"fieldValue":"IDENTITY","totalCount":1},{"fieldValue":"JDBC","totalCount":3},{"fieldValue":"JPA","totalCount":2},{"fieldValue":"Jakarta EE","totalCount":1},{"fieldValue":"Java","totalCount":1},{"fieldValue":"Java EE","totalCount":1},{"fieldValue":"LocalDateTime","totalCount":1},{"fieldValue":"OAuth","totalCount":1},{"fieldValue":"OSIV","totalCount":1},{"fieldValue":"OpenId","totalCount":1},{"fieldValue":"Spring","totalCount":1},{"fieldValue":"Template Callback 패턴","totalCount":1},{"fieldValue":"Tomcat","totalCount":1},{"fieldValue":"Web Container","totalCount":1},{"fieldValue":"auditing","totalCount":1},{"fieldValue":"batch","totalCount":1},{"fieldValue":"jdbcTempate","totalCount":1},{"fieldValue":"jpa","totalCount":2},{"fieldValue":"kotlin","totalCount":1},{"fieldValue":"merge","totalCount":1},{"fieldValue":"optimisitc-locking","totalCount":1},{"fieldValue":"persist","totalCount":1},{"fieldValue":"properties","totalCount":1},{"fieldValue":"refresh token","totalCount":1},{"fieldValue":"save","totalCount":1},{"fieldValue":"spring-jdbc","totalCount":2},{"fieldValue":"낙관적 락","totalCount":1},{"fieldValue":"달록","totalCount":3},{"fieldValue":"문자열","totalCount":1},{"fieldValue":"분리된 인터페이스","totalCount":1},{"fieldValue":"스프링","totalCount":2},{"fieldValue":"알록달록","totalCount":1},{"fieldValue":"우아한테크코스","totalCount":13},{"fieldValue":"의존성 분리","totalCount":1},{"fieldValue":"커버링 인덱스","totalCount":1},{"fieldValue":"트랜잭션","totalCount":2},{"fieldValue":"회고","totalCount":1}],"nodes":[{"excerpt":"Spring Data JPA Auditing 작성에 사용된 예제 코드는 jpa-auditing에서 확인해볼 수 있다. 언어는 kotlin으로 작성하였다. Spring Data는 엔티티를 하거나 과 를 투명하게 추적할 수 있는 정교한 지원을 제공한다.\n해당 기능을 사용하기 위해서는 애노테이션을 사용하거나 인터페이스를 구현하여 정의할 수 있는 auditing…","fields":{"slug":"/jpa-auditing/"},"frontmatter":{"date":"March 08, 2023","update":"Mar 08, 2023","title":"Spring Data JPA Auditing","tags":["kotlin","jpa","auditing"],"series":null}},{"excerpt":"2022년은 내게 조금은 특별한 해이다. 단순히 기술적인 성장을 넘어 한 사람으로서의 가치관을 형성할 수 있었던 시기였다. 회고를 통해 지난 1년을 뒤돌아보며 점검할 수 있는 회고를 적어보려 한다. 우아한테크코스 2022년의 시작은 대부분의 시간을 할애한 우테코를 빼놓고 이야기할 수 없을 것 같다. 정말 하고 싶었던 교육이었기 때문에 2021년은 대부분의…","fields":{"slug":"/2022-retrospect/"},"frontmatter":{"date":"January 12, 2023","update":"Jan 12, 2023","title":"조금 늦은 2022년 회고","tags":["회고"],"series":null}},{"excerpt":"Java는 객체지향 언어이기 때문에 기본적으로 제공하는 이 아닌 경우 모두 로 구성되어 있다. 이것은 문자열도 마찬가지다. 다만 은 여타 다른 객체와 차이점을 가지고\n있다. 그것은 바로 을 지원한다는 것이다. 문자열 생성 방법 Java에서 문자열을 생성하는 방법에는 두 가지가 있다. 생성자를 활용한 방식 문자열 리터럴을 활용한 방식 생성자를 활용한 방식 …","fields":{"slug":"/java-string/"},"frontmatter":{"date":"December 11, 2022","update":"Dec 11, 2022","title":"문자열 생성 방식 비교하기","tags":["Java","문자열"],"series":null}},{"excerpt":"작성에 사용된 예제 코드는 spring-transaction에서 확인해볼 수 있다. 이전 시간에 트랜잭션 추상화를 통해 여러 데이터 접근 기술 변경에 유연한 구조를 만들었다. 또한 트랜잭션 동기화를 통해 멀티 스레드 환경에서도 별도의 커넥션 객체를 사용하여 독립적으로 트랜잭션이 적용될 수 있도록 구현하였다.  이번 시간에는 템플릿 콜백 패턴을 활용한 과 …","fields":{"slug":"/spring-transaction-2/"},"frontmatter":{"date":"December 10, 2022","update":"Dec 10, 2022","title":"스프링이 개선한 트랜잭션 (2)","tags":["스프링","트랜잭션"],"series":"스프링이 개선한 트랜잭션"}},{"excerpt":"작성에 사용된 예제 코드는 spring-transaction에서 확인해볼 수 있다. 트랜잭션은 논리적인 작업 셋을 모두 완벽하게 처리하거나, 처리하지 못할 경우 원래 상태로 복구하여 작업의 일부만 적용되는 현상(Partial update)을 막아준다. 또한 트랜잭션은 하나의 논리적인 작업 셋의 쿼리 개수와 관계없이 논리적인 작업 셋 자체가 전부 적용(CO…","fields":{"slug":"/spring-transaction-1/"},"frontmatter":{"date":"December 09, 2022","update":"Dec 09, 2022","title":"스프링이 개선한 트랜잭션 (1)","tags":["스프링","트랜잭션"],"series":"스프링이 개선한 트랜잭션"}},{"excerpt":"동시성 이슈를 해결하기 위해서는 다양한 방법이 존재한다. 예를 들면 Java의 , 비관적 락과 낙관적 락, 분산 락 등이 존재한다. 이번에는 충돌이 발생하지 않는다고 낙관적으로 가정한 뒤 락을 처리하는 낙관적 락에 대해 알아보려 한다. 작성에 사용된 예제 코드는 optimistic-locking에서 확인해볼 수 있다. 낙관적 락 트랜잭션 충돌이 발생하지 …","fields":{"slug":"/optimistic-locking/"},"frontmatter":{"date":"December 03, 2022","update":"Dec 03, 2022","title":"낙관적 락과 동시성 테스트","tags":["optimisitc-locking","낙관적 락"],"series":null}},{"excerpt":"SimpleJpaRepository의 save()는 어떻게 새로운 엔티티를 판단할까? 를 사용하면 JPA 기반의 repository를 쉽게 구현할 수 있다. 대표적으로 를 통해 보다 더 정교한 기능들을 제공한다. 이를 통해 개발자는 데이터 접근 계층을 손쉽게 구현할 수 있다.  SimpleJpaRepository 는  인터페이스의 기본 구현이다. 이것은 …","fields":{"slug":"/save-persist-merge/"},"frontmatter":{"date":"November 21, 2022","update":null,"title":"SimpleJpaRepository의 save()는 어떻게 새로운 엔티티를 판단할까?","tags":["우아한테크코스","JPA","save","persist","merge"],"series":null}},{"excerpt":"OSIV OSIV는 Open Session In View의 준말로, 영속성 컨텍스트를 뷰까지 열어둔다는 것을 의미이다. 영속성 컨텍스트가 유지된다는 의미는 뷰에서도 과 같이 영속성 컨텍스트의 이점을 누릴 수 있다는 것이다. 요청 당 트랜잭션 OSIV의 핵심은 뷰에서도 이 가능하도록 하는 것이다. 가장 단순한 방법은 요청이 들어오자 마자  혹은 를 거치는 …","fields":{"slug":"/osiv/"},"frontmatter":{"date":"October 24, 2022","update":"Oct 24, 2022","title":"OSIV와 사용하며 직면한 문제","tags":["우아한테크코스","OSIV","JPA"],"series":null}},{"excerpt":"커버링 인덱스 MySQL 8.0 이상, InnoDB 스토리지 엔진을 기준으로 작성되었다. 인덱스를 사용하여 처리하는 쿼리 중 가장 큰 부하를 차지하는 부분은 어디일까? 바로 인덱스 검색에서 일치하는 키 값의 이다. 그림을 살펴보면 인덱스 검색에서 일치하는 키 값을 데이터 파일에서 읽을 때 비교적 느린 속도를 가진 디스크 I/O가 발생한다.  N개의 인덱스…","fields":{"slug":"/covering-index/"},"frontmatter":{"date":"October 10, 2022","update":"Oct 10, 2022","title":"커버링 인덱스","tags":["우아한테크코스","커버링 인덱스"],"series":null}},{"excerpt":"우아한테크코스 미션 중 Spring의 을 직접 구현해보며 순수한 JDBC만 사용했을 때 들을 분리하며 리팩토링하는 과정을 경험하였다. 미션을 진행하며 실제 Spring의 JdbcTemplate 내부 코드를 살펴보았는데, 특정한 패턴을 가진 코드가 반복되는 것을 확인할 수 있었다. 간단한 예제를 통해 Spring은 반복된 코드를 어떻게 개선 하였는지 알아보…","fields":{"slug":"/template-callback/"},"frontmatter":{"date":"October 09, 2022","update":"Oct 09, 2022","title":"jdbcTemplate을 만들며 마주한 Template Callback 패턴","tags":["우아한테크코스","Spring","jdbcTempate","Template Callback 패턴"],"series":null}},{"excerpt":"는 Java 프로그래밍 언어에서 을 제공한다. 를 사용하면 관계형 데이터베이스에서 스프레드 시트 및 플랫 파일에 이르기까지 거의 모든 데이터 소스에 접근할 수 있다. JDBC 기술은 tools와 alternate interfaces를 구축할 수 있는 common base를 제공한다. 특정 DBMS에서 JDBC API를 사용하려면 JDBC 기술과 데이터베이…","fields":{"slug":"/jdbc/"},"frontmatter":{"date":"October 08, 2022","update":"Oct 08, 2022","title":"JDBC","tags":["우아한테크코스","JDBC"],"series":null}},{"excerpt":"현재 우아한테크코스에서는  미션을 진행하고 있다. 지금까지 를 활용하여 기본적으로 적용되던 이었지만 어떠한 목적으로 등장 했으며, 무엇을 제공해주는지 알지 못한채 웹 애플리케이션 개발을 위해서만 사용하곤 했다. 직접 Tomcat을 만들어가는 미션을 시작한 만큼 이번 기회를 통해 에 대해 간단히 정리해보려 한다. 해당 게시글은 Tomcat 9.x.x 버전을…","fields":{"slug":"/basic-tomcat/"},"frontmatter":{"date":"September 03, 2022","update":"Sep 03, 2022","title":"Tomcat","tags":["우아한테크코스","Tomcat","Java EE","Jakarta EE","Web Container"],"series":null}},{"excerpt":"Google은 Refresh Token을 쉽게 내주지 않는다. 우리 달록은 캘린더를 손쉽게 공유할 수 이다. 현재에는 우리 서비스 내에서만 일정이 등록 가능한 상태이다. 추후 확장성을 고려하여 와 연동하기 위해 Google에서 제공하는 token 정보를 관리해야 하는 요구사항이 추가 되었다. code를 활용한 AccessToken 및 IdToken 발급 …","fields":{"slug":"/google-refresh-token/"},"frontmatter":{"date":"August 16, 2022","update":"Aug 16, 2022","title":"Google은 Refresh Token을 쉽게 내주지 않는다.","tags":["우아한테크코스","달록","OAuth","OpenId","refresh token"],"series":null}},{"excerpt":"properties 객체로 다루기 Spring에서 이나 에 존재하는 값을 불러오는 방법에는 대표적으로  애노테이션을 사용한 방법과 를 사용한 방법이 존재한다. 두 방식을 직접 적용해 본 뒤 차이와 이점에 대해 알아보려 한다. @Value 사용하기 는 기본적으로 설정 정보를 단일값으로 주입 받기 위해 사용된다. 아래는 실제 달록 프로젝트에서 적용한 예시이다…","fields":{"slug":"/properties-to-object/"},"frontmatter":{"date":"July 27, 2022","update":"Jul 27, 2022","title":"properties 객체로 다루기","tags":["우아한테크코스","달록","properties"],"series":null}},{"excerpt":"외부와 의존성 분리하기 도메인 로직은 우리가 지켜야할 매우 소중한 비즈니스 로직들이 담겨있다. 이러한 도메인 로직들은 변경이 최소화되어야 한다. 그렇기 때문에 외부와의 의존성을 최소화 해야 한다.  인터페이스 활용하기 우선 우리가 지금까지 학습한 것 중 객체 간의 의존성을 약하게 만들어 줄 수 있는 수단으로 인터페이스를 활용할 수 있다. 간단한 예시로 를…","fields":{"slug":"/separated-interface/"},"frontmatter":{"date":"July 24, 2022","update":"Jul 24, 2022","title":"외부와 의존성 분리하기","tags":["우아한테크코스","달록","분리된 인터페이스","의존성 분리"],"series":null}},{"excerpt":"개요 기본 키 할당 전략에 대한 학습을 진행하고 있었다. 기본 키 전략을 로 진행하면 데이터베이스에게 키 생성을 위임하기 때문에 JPA에서 기본 키 값을 얻어오기 위해서는 추가적인 데이터베이스 조회가 필요하다. 하지만 저장 관련 테스트를 진행했을 때 어디에도 조회와 관련된 쿼리는 찾을 수 없었다. 이게 어떻게 된 일인지 알아보려 한다. IDENTITY 앞…","fields":{"slug":"/identity-strategy/"},"frontmatter":{"date":"July 10, 2022","update":"Jul 10, 2022","title":"IDENTITY 전략는 추가 조회를 하지 않을 수 있다.","tags":["우아한테크코스","jpa","IDENTITY"],"series":null}},{"excerpt":"이번 팀 프로젝트를 진행하며 손쉽게 일정을 등록하고 관리할 수 있는 공유 캘린더를 주제로 진행하게 되었다. 캘린더를 기반한 도메인이 주를 이루기 때문에 날짜와 시간에 대한 조작이 필요했다. 이번 기회를 통해 이전에 잘 사용하지 않았던 Java의 날짜, 시간을 다루기 위한 객체에 대해 알아보려 한다. JDK 8 이전 JDK 8 이전에는 날짜와 시간을 다루기…","fields":{"slug":"/local-date-time/"},"frontmatter":{"date":"July 03, 2022","update":"Jul 03, 2022","title":"java에서 날짜, 시간 제대로 사용하기","tags":["우아한테크코스","알록달록","LocalDateTime"],"series":null}},{"excerpt":"개요 란 데이터를 실시간으로 처리하는 것이 아니라 일괄적으로 모아 하는 것을 의미한다. 의  메서드와 를 비교하여 배치로 진행한 것과 일반적으로 처리한 것에 어떠한 차이가 있는지 알아보려 한다. 프로젝트 세팅 github repository 바로가기 우선 Spirng 환경에서 jdbc와 h2 DB를 활용하기 위해 아래와 같이 에 의존성을 추가하였다. 단순…","fields":{"slug":"/spring-jdbc-batch/"},"frontmatter":{"date":"May 24, 2022","update":"May 24, 2022","title":"Spring JDBC로 batch 활용하기","tags":["우아한테크코스","JDBC","spring-jdbc","batch"],"series":null}},{"excerpt":"개요 웹 체스 미션을 진행하던 중 Spring Jdbc를 도입하기 위해 이전에 연결된 JDBC에 대한 의존성을 제거한 뒤 에서 제공하는 을 활용하여 SQL 쿼리를 사용하였다. 하지만 나는 에 대한  등록을 진행하지 않았다. 그렇다면 누가 자동으로 등록한 것일까?  JDBC (Java DataBase Connectivity) 우선 이전에 사용하던 JDBC에…","fields":{"slug":"/why-jdbc-template/"},"frontmatter":{"date":"April 28, 2022","update":"Apr 28, 2022","title":"JdbcTemplate는 어디에?","tags":["우아한테크코스","JDBC","spring-jdbc"],"series":null}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}