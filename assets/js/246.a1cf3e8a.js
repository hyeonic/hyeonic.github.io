(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{722:function(t,e,a){"use strict";a.r(e);var v=a(21),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2주차-http-기본-http-메서드"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2주차-http-기본-http-메서드"}},[t._v("#")]),t._v(" 2주차 HTTP 기본 & HTTP 메서드")]),t._v(" "),a("CenterImage",{attrs:{"image-src":"https://user-images.githubusercontent.com/59357153/152970395-a31c8134-fc89-449f-b4dc-441e03df929c.png"}}),t._v(" "),a("h2",{attrs:{id:"목표"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#목표"}},[t._v("#")]),t._v(" 목표")]),t._v(" "),a("p",[t._v("스터디를 통해 "),a("a",{attrs:{href:"https://www.inflearn.com/course/http-%EC%9B%B9-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("모든 개발자를 위한 HTTP 웹 기본 지식"),a("OutboundLink")],1),t._v("을 듣고 요약하며 나누고 싶은 내용을 정리한다.")]),t._v(" "),a("h2",{attrs:{id:"http-hypertext-transfer-protocol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-hypertext-transfer-protocol"}},[t._v("#")]),t._v(" HTTP (HyperText Transfer Protocol)")]),t._v(" "),a("p",[t._v("HTTP 메시지를 통해 다양한 데이터(ex. HTML, JSON 등)들을 전송할 수 있다. Socket 라이브러리를 통해 TCP를 직접 연결하는 특수한 경우(ex. 게임 서버)를 제외하면 대부분의 모든 것들이 HTTP를 통해 데이터를 전송한다.")]),t._v(" "),a("h3",{attrs:{id:"http의-역사"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http의-역사"}},[t._v("#")]),t._v(" HTTP의 역사")]),t._v(" "),a("ul",[a("li",[t._v("1991년 "),a("code",[t._v("HTTP/0.9")]),t._v(": 단순한 GET 메서드만 지원했다. 또한 HTTP 헤더를 포함하지 않았다.")]),t._v(" "),a("li",[t._v("1996년 "),a("code",[t._v("HTTP/1.0")]),t._v(": 다양한 메서드와 헤더가 추가되었다.")]),t._v(" "),a("li",[t._v("1997년 "),a("code",[t._v("HTTP/1.1")]),t._v(": 현재 사용하고 있는 HTTP의 근간이 된다. 가장 많이 사용하기 때문에 가장 중요한 버전이다.")]),t._v(" "),a("li",[t._v("2015년 "),a("code",[t._v("HTTP/2")]),t._v(": 성능이 개선되었다.")]),t._v(" "),a("li",[a("code",[t._v("HTTP3")]),t._v(": TCP 대신 UDP를 사용하며 성능이 개선되었다.")])]),t._v(" "),a("p",[t._v("현재에도 HTTP는 지속적으로 발전하고 있다.")]),t._v(" "),a("h3",{attrs:{id:"http-특징"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-특징"}},[t._v("#")]),t._v(" HTTP 특징")]),t._v(" "),a("ul",[a("li",[t._v("기본적으로 "),a("code",[t._v("클라이언트 서버 구조")]),t._v("를 가진다. 클라이언트는 서버에 "),a("code",[t._v("Request")]),t._v("를 보내고 "),a("code",[t._v("Response")]),t._v(" 받기 위해 대기한다. 서버는 "),a("code",[t._v("Request")]),t._v("에 대한 결과를 만들어 "),a("code",[t._v("Response")]),t._v("를 보낸다. 보통 서버에서 클라이언트로 Request하지 않는다.")]),t._v(" "),a("li",[t._v("상태를 가지지 않는 무상태 프로토콜(stateless)이다. 즉 비연결성을 띄고 있다.")]),t._v(" "),a("li",[t._v("HTTP 메시지를 가지고 있으며 단순한 구조 덕분에 유연한 확장이 가능하다.")])]),t._v(" "),a("CenterImage",{attrs:{"image-src":"https://user-images.githubusercontent.com/59357153/167232335-7d43beae-9454-4de5-93d1-20d346da97bd.png"}}),t._v(" "),a("ul",[a("li",[a("code",[t._v("클라이언트")]),t._v(": UI와 사용성에 집중한다. (ex. 앱, SPA)")]),t._v(" "),a("li",[a("code",[t._v("서버")]),t._v(": 비즈니스 로직과 데이터에 집중한다.")])]),t._v(" "),a("p",[t._v("서로 다른 곳에 집중하며 독립적인 성장이 가능하다.")]),t._v(" "),a("h3",{attrs:{id:"무상태-프로토콜"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#무상태-프로토콜"}},[t._v("#")]),t._v(" 무상태 프로토콜")]),t._v(" "),a("ul",[a("li",[t._v("서버가 클라이언트의 상태를 보관하지 않는다.")]),t._v(" "),a("li",[t._v("서버의 확장성이 높지만 클라이언트가 추가적인 데이터를 전송해야 한다.")])]),t._v(" "),a("h3",{attrs:{id:"stateful-vs-stateless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stateful-vs-stateless"}},[t._v("#")]),t._v(" Stateful vs Stateless")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Stateful")]),t._v(": 중간에 서버가 변경되면 안된다. 즉 항상 같은 서버가 유지되어야 한다. 만약 변경된다면 상태 정보를 공유해야 한다. 그렇기 때문에 해당 서버에 장애가 나면 해당 요청은 정상적으로 처리될 수 없다.")]),t._v(" "),a("li",[a("code",[t._v("Stateless")]),t._v(": 상태를 가지지 않기 때문에 아무 서버나 처리할 수 있다. 만약 다수의 트래픽이 몰린다면 서버를 증설하여 대응할 수 있다. 그렇기 때문에 해당 서버가 장애가 나면 다른 서버가 대신 처리할 수 있다.")])]),t._v(" "),a("h3",{attrs:{id:"stateless의-한계"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stateless의-한계"}},[t._v("#")]),t._v(" Stateless의 한계")]),t._v(" "),a("ul",[a("li",[t._v("상태 유지를 필요로 하는 로그인과 같은 기능은 Stateless로 만들기 어렵다. 로그인한 사용자의 경우 로그인을 진행했다는 상태를 서버에서 유지해야 한다. 그렇기 때문에 브라우저 쿠키와 서버 세션을 통해 추가적인 상태를 유지한다.")]),t._v(" "),a("li",[t._v("상태 유지는 서버의 자원을 사용한다. 즉 "),a("code",[t._v("최소한")]),t._v("만 사용하는 것이 좋다.")])]),t._v(" "),a("h2",{attrs:{id:"비연결성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#비연결성"}},[t._v("#")]),t._v(" 비연결성")]),t._v(" "),a("blockquote",[a("p",[t._v("여기서 비 연결성은 TCP의 연결 지향과는 결이 다르다.")])]),t._v(" "),a("ul",[a("li",[t._v("HTTP는 기본적으로 연결을 유지하지 않는 모델이다. 일반적으로 초 단위의 빠른 속도로 응답한 뒤 연결을 제거한다.")]),t._v(" "),a("li",[t._v("이러한 특성 덕분에 수천명이 서비스를 이용해도 실제 서버에서 동시에 처리하는 요청은 수십개에 불과하다.")]),t._v(" "),a("li",[t._v("서버는 클라이언트의 응답을 보내기 위한 "),a("code",[t._v("IP, PORT 정보")]),t._v("를 가지고 있다. 만약 연결성인 경우 해당 정보를 서버 자원으로 유지해야 한다. 하지만 비 연결성인 경우 이것을 유지할 필요가 없기 때문에 "),a("code",[t._v("서버 자원")]),t._v("을 매우 효율적으로 사용할 수 있다.")])]),t._v(" "),a("p",[t._v("하지만 비 연결성은 매번 새롭게 요청을 보낼 때 마다 "),a("code",[t._v("TCP/IP")]),t._v(" 연결을 새롭게 생성해야 한다. 즉 요청 시 마다 새롭게 3 way handshake를 위한 시간이 소요된다. 웹 브라우저는 단순히 HTML만 활용하여 웹 페이지를 그리는 것이 아니다. 해당 페이지를 꾸미기 위한 css와 javascript 이미지 등 수 많은 자원이 함께 다운로드 된다. 매번 각기 다른 데이터를 받기 위해 연결을 진행하는 것은 매우 비효율적이다.")]),t._v(" "),a("CenterImage",{attrs:{"image-src":"https://user-images.githubusercontent.com/59357153/167232899-f451d480-95b9-4395-a37d-4d5741ed6b67.png"}}),t._v(" "),a("p",[t._v("이것을 HTTP 지속 연결(Persistent Connections)로 해결 했다.")]),t._v(" "),a("CenterImage",{attrs:{"image-src":"https://user-images.githubusercontent.com/59357153/167233011-96d052d1-b90c-451f-a0dd-a416dfbb9c22.png"}}),t._v(" "),a("p",[t._v("지속 연결 시간은 기본적으로 60초이며 웹 서버에서 해당 시간을 수정할 수 있다. 보통 연결 제거는 서버에서 진행된다. 대부분의 웹서버가 해당 기능을 구현해두었다. 또한 HTTP/2, HTTP/3에서는 더 많은 최적화를 진행한다.")]),t._v(" "),a("h2",{attrs:{id:"http-메시지"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-메시지"}},[t._v("#")]),t._v(" HTTP 메시지")]),t._v(" "),a("CenterImage",{attrs:{"image-src":"https://user-images.githubusercontent.com/59357153/167235600-54601462-312f-4433-95bf-a29b7e81f333.png"}}),t._v(" "),a("h3",{attrs:{id:"http-요청-메시지"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-요청-메시지"}},[t._v("#")]),t._v(" HTTP 요청 메시지")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GET /search?q=hello&hl=ko HTTP/1.1\nHost: www.google.com\n\n")])])]),a("ul",[a("li",[a("code",[t._v("start-line")]),t._v(": "),a("strong",[t._v("request-line")]),t._v(" / status-line")]),t._v(" "),a("li",[a("code",[t._v("request-line")]),t._v(": HTTP method SP request-target(path) SP HTTP-version CRLF\n"),a("ul",[a("li",[a("code",[t._v("HTTP method")]),t._v(": GET, POST, PUT, DELETE 등 서버가 수행해야 할 동작을 지정한다.")]),t._v(" "),a("li",[a("code",[t._v("request-target")]),t._v(": 절대경로를 활용하여 요청 대상을 지정한다.")]),t._v(" "),a("li",[a("code",[t._v("HTTP-version")]),t._v(": HTTP/1.1 등과 같이 버전을 명시한다.")])])])]),t._v(" "),a("h3",{attrs:{id:"http-응답-메시지"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-응답-메시지"}},[t._v("#")]),t._v(" HTTP 응답 메시지")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("HTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nContent-Length: 3423\n\n<html>\n    <body>...</body>\n</html>\n")])])]),a("ul",[a("li",[a("code",[t._v("start-line")]),t._v(": request-line / "),a("strong",[t._v("status-line")])]),t._v(" "),a("li",[a("code",[t._v("status-line")]),t._v(": HTTP-version SP status-code SP reason-phrase CRLF\n"),a("ul",[a("li",[a("code",[t._v("HTTP-version")]),t._v(": HTTP/1.1 등과 같이 버전을 명시한다.")]),t._v(" "),a("li",[a("code",[t._v("status-code")]),t._v(": 요청 성공과 실패를 나타낸다. 2xx은 보통 성공의 의미하며 4xx은 클라이언트의 요청 오류, 5xx은 서버 내부 오류를 나타낸다.")]),t._v(" "),a("li",[a("code",[t._v("reason-phrase")]),t._v(": 사람이 이해할 수 있는 짧은 코드 설명 글을 담고 있다.")])])])]),t._v(" "),a("h3",{attrs:{id:"http-헤더"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-헤더"}},[t._v("#")]),t._v(" HTTP 헤더")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("field-name: field-value (field-name은 대소문자를 구분하지 않는다.)\n")])])]),a("ul",[a("li",[t._v("HTTP 전송에 필요한 부가정보를 담고 있다.")]),t._v(" "),a("li",[t._v("표준 헤더가 있지만 필요시 임의의 헤더를 추가할 수 있다. 다만 클라이언트나 서버가 임의의 헤더를 해석하고 사용할 수 있을 때만 가능하다.")])]),t._v(" "),a("h3",{attrs:{id:"http-메시지-바디"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-메시지-바디"}},[t._v("#")]),t._v(" HTTP 메시지 바디")]),t._v(" "),a("ul",[a("li",[t._v("실제 전송할 데이터를 나타낸다. HTML, JSON, 이미지 등 "),a("code",[t._v("byte로 표현할 수 있는 모든 데이터")]),t._v("를 전송할 수 있다.")])]),t._v(" "),a("h2",{attrs:{id:"http-메서드"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-메서드"}},[t._v("#")]),t._v(" HTTP 메서드")]),t._v(" "),a("h3",{attrs:{id:"api-uri-설계"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-uri-설계"}},[t._v("#")]),t._v(" API URI 설계")]),t._v(" "),a("p",[t._v("가장 중요한 것은 "),a("code",[t._v("리소스 식별")]),t._v("이다.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("회원")]),t._v(" 목록 조회 /users")]),t._v(" "),a("li",[a("code",[t._v("회원")]),t._v(" 조회 /users/{id}")]),t._v(" "),a("li",[a("code",[t._v("회원")]),t._v(" 등록 /users")]),t._v(" "),a("li",[a("code",[t._v("회원")]),t._v(" 수정 /users/{id}")]),t._v(" "),a("li",[a("code",[t._v("회원")]),t._v(" 삭제 /users/{id}")])]),t._v(" "),a("p",[t._v("여기서 "),a("code",[t._v("회원")]),t._v("이 리소스에 해당한다. 보통 계층 구조상 상위를 컬렉션으로 인식하고 복수 단어 사용을 권장한다. 즉 user 보단 users를 사용하자.")]),t._v(" "),a("p",[t._v("그렇다면 각 행위(조회, 등록, 수정, 삭제 등)는 어떻게 구분해야 할까? 바로 "),a("code",[t._v("HTTP 메서드")]),t._v("를 활용하는 것이다.")]),t._v(" "),a("h2",{attrs:{id:"http-메서드-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-메서드-2"}},[t._v("#")]),t._v(" HTTP 메서드")]),t._v(" "),a("h3",{attrs:{id:"http-메서드-종류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-메서드-종류"}},[t._v("#")]),t._v(" HTTP 메서드 종류")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("GET")]),t._v(": 리소스를 조회한다.")]),t._v(" "),a("li",[a("code",[t._v("POST")]),t._v(": 요청 데이터를 처리한다. 주로 등록에 사용한다.")]),t._v(" "),a("li",[a("code",[t._v("PUT")]),t._v(": 리소스를 "),a("code",[t._v("대체")]),t._v("한다. 해당 리소스가 없다면 생성한다.")]),t._v(" "),a("li",[a("code",[t._v("PATCH")]),t._v(": 리소스를 부분 변경한다. 만약 리소스가 존재하지 않다면 오류가 발생한다.")]),t._v(" "),a("li",[a("code",[t._v("DELETE")]),t._v(": 리소스를 삭제한다.")])]),t._v(" "),a("p",[t._v("위 메서드는 "),a("code",[t._v("관례적인 사용법")]),t._v("일 뿐이다. 온전히 지키는 것은 어려운 일이다. 해당 서버를 개발하는 개발자에게 달렸다.")]),t._v(" "),a("p",[t._v("그 밖에도 아래와 같은 메서드들이 존재한다.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HEAD")]),t._v(": GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환한다.")]),t._v(" "),a("li",[a("code",[t._v("OPTIONS")]),t._v(": 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명한다. 주로 (CORS)에서 사용한다.")]),t._v(" "),a("li",[a("code",[t._v("CONNECT")]),t._v(": 대상 자원으로 식별되는 서버에 대한 터널을 설정한다.")]),t._v(" "),a("li",[a("code",[t._v("TRACE")]),t._v(" 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행한다.")])]),t._v(" "),a("h3",{attrs:{id:"get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" GET")]),t._v(" "),a("ul",[a("li",[t._v("리소스 조회에 사용한다. 서버에 전달하고자 하는 데이터가 있다면 "),a("code",[t._v("query parameter")]),t._v("를 통해 전달한다.")]),t._v(" "),a("li",[t._v("메시지 바디를 사용할 수 있지만 지원하지 않는 곳이 많아서 권장하지 않는다.")])]),t._v(" "),a("h3",{attrs:{id:"post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" POST")]),t._v(" "),a("ul",[a("li",[t._v("요청 데이터를 처리한다. 메시지 바디를 통해 서버로 요청 데이터를 전달한다.")]),t._v(" "),a("li",[t._v("서버는 메시지 바디로 들어온 데이터를 처리하는 모든 기능을 수행한다. 주로 전달된 데이터는 리소스를 등록하거나 프로세스 처리에 사용된다.")]),t._v(" "),a("li",[t._v("해당 리소스만 변경하는 것이 아니라 "),a("code",[t._v("내부 프로세스를 실행")]),t._v("해야 할 때는 PATCH 보다 POST가 적절하다.")])]),t._v(" "),a("h3",{attrs:{id:"put"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[t._v("#")]),t._v(" PUT")]),t._v(" "),a("ul",[a("li",[t._v("리소스를 대체한다. POST와 동일하게 리소스가 없으면 생성한다. 단순히 이야기하면 완전히 대체하는 것이다.")]),t._v(" "),a("li",[t._v("클라이언트가 "),a("code",[t._v("리소스를 식별")]),t._v("할 수 있어야 한다. 해당 위치를 알고 URI를 지정한다.")])]),t._v(" "),a("h3",{attrs:{id:"patch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" PATCH")]),t._v(" "),a("ul",[a("li",[t._v("리소스를 부분 변경한다. 또한 리소스가 존재하지 않을 경우 오류가 발생한다.")]),t._v(" "),a("li",[t._v("PATCH가 지원이 되지 않는 경우 POST를 활용한다.")])]),t._v(" "),a("h3",{attrs:{id:"delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" DELETE")]),t._v(" "),a("ul",[a("li",[t._v("리소스를 제거한다.")])]),t._v(" "),a("h2",{attrs:{id:"http-메서드의-속성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-메서드의-속성"}},[t._v("#")]),t._v(" HTTP 메서드의 속성")]),t._v(" "),a("h3",{attrs:{id:"안전-safe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#안전-safe"}},[t._v("#")]),t._v(" 안전 (Safe)")]),t._v(" "),a("ul",[a("li",[t._v("호출해도 리소스를 변경하지 않는다. 즉 변경이 일어나지 않는다.")]),t._v(" "),a("li",[t._v("GET, HEAD, OPTIONS, TRACE가 존재한다.")]),t._v(" "),a("li",[t._v("안전은 해당 리소스만 고려한다. 로그와 같이 부가적인 것은 고려하지 않는다.")])]),t._v(" "),a("h3",{attrs:{id:"멱등-idempotent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#멱등-idempotent"}},[t._v("#")]),t._v(" 멱등 (Idempotent)")]),t._v(" "),a("ul",[a("li",[t._v("f(f(x)) = f(x)")]),t._v(" "),a("li",[t._v("한 번 호출하든 두 번 하든 매번 결과가 같다.")]),t._v(" "),a("li",[t._v("GET, PUT, DELETE가 이에 해당한다.")])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"멱등의-활용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#멱등의-활용"}},[t._v("#")]),t._v(" 멱등의 활용")]),t._v(" "),a("p",[t._v("자동 복구 메커니즘에 활용된다. 서버가 정상 응답을 주지 못했을 때 클라이언트가 같은 요청을 다시 보내도 괜찮은지에 대한 판단 근거가 될 수 있다.")])]),t._v(" "),a("p",[t._v("멱등은 외부 요인으로 중간에 리소스가 변경하는 것 까지 고려하지 않는다.")]),t._v(" "),a("h3",{attrs:{id:"캐시가능-cacheable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#캐시가능-cacheable"}},[t._v("#")]),t._v(" 캐시가능 Cacheable")]),t._v(" "),a("ul",[a("li",[t._v("응답 결과 리소스를 캐시해서 사용해도 되는지 유무이다.")]),t._v(" "),a("li",[t._v("GET, HEAD, POST, PATCH는 캐시가 가능하다. 하지만 GET, HEAD 정도만 사용한다.")]),t._v(" "),a("li",[t._v("POST, PATCH의 경우 본문 내용까지 캐시 키로 고려해야 하기 때문에 구현하기 쉽지 않다.")])]),t._v(" "),a("h2",{attrs:{id:"공유하고-싶은-내용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#공유하고-싶은-내용"}},[t._v("#")]),t._v(" 공유하고 싶은 내용")]),t._v(" "),a("h3",{attrs:{id:"jwt를-기반으로-활용한-인증-방식은-stateless인가"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt를-기반으로-활용한-인증-방식은-stateless인가"}},[t._v("#")]),t._v(" JWT를 기반으로 활용한 인증 방식은 Stateless인가?")]),t._v(" "),a("ul",[a("li",[t._v("단순한 JWT를 활용할 경우 서버에서 클라이언트의 정보를 보관하지 않는다. 그렇다면 이것을 Stateless로 봐도 괜찮을까?")])]),t._v(" "),a("h3",{attrs:{id:"멱등"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#멱등"}},[t._v("#")]),t._v(" 멱등")]),t._v(" "),a("ul",[a("li",[t._v("멱등을 보장할 수록 유연함을 보장하는가?")])]),t._v(" "),a("h3",{attrs:{id:"http-api-vs-rest-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-api-vs-rest-api"}},[t._v("#")]),t._v(" HTTP API vs REST API")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://bentist.tistory.com/37",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://bentist.tistory.com/37"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.inflearn.com/questions/126743",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.inflearn.com/questions/126743"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.inflearn.com/questions/152610",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.inflearn.com/questions/152610"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.inflearn.com/course/http-%EC%9B%B9-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC",target:"_blank",rel:"noopener noreferrer"}},[t._v("모든 개발자를 위한 HTTP 웹 기본 지식"),a("OutboundLink")],1),a("br")]),t._v(" "),a("TagLinks")],1)}),[],!1,null,null,null);e.default=s.exports}}]);