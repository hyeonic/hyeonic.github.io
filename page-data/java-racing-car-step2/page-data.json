{"componentChunkName":"component---src-templates-post-jsx","path":"/java-racing-car-step2/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"65e96d09-08e4-5540-8744-dab5c29628a4","excerpt":"목표  우아한테크코스에서 진행한 미션의 리뷰와 피드백에 대해 정리한다. 실제 리뷰는 [2단계 - 자동차 경주 리팩터링] 매트(최기현) 미션 제출합니다.에서 확인할 수 있다. 1. 객체지향 관점에서 유틸리티 클래스 최초에 미션을 접하고 설계를 진행할 때에도 객체지향적인 설계를 위해 노력했다. 하지만 모든 클래스에서 공유하여 사용할 수 있는 들의 사용은 장점…","html":"<h2>목표</h2>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/152970395-a31c8134-fc89-449f-b4dc-441e03df929c.png\"></p>\n<p>우아한테크코스에서 진행한 미션의 리뷰와 피드백에 대해 정리한다. 실제 리뷰는 <a href=\"https://github.com/woowacourse/java-racingcar/pull/349\">[2단계 - 자동차 경주 리팩터링] 매트(최기현) 미션 제출합니다.</a>에서 확인할 수 있다.</p>\n<h2>1. 객체지향 관점에서 유틸리티 클래스</h2>\n<p>최초에 미션을 접하고 설계를 진행할 때에도 객체지향적인 설계를 위해 노력했다. 하지만 모든 클래스에서 공유하여 사용할 수 있는 <code class=\"language-text\">클래스 메서드</code>들의 사용은 장점도 많지만 객체지향에 가깝지 않다고 학습한 경험이 있고 <code class=\"language-text\">클래스 메서드</code>들은 <code class=\"language-text\">객체의 생명주기</code>와 관계없이 관리되기 때문에 객체가 중심이 되는 <code class=\"language-text\">객체지향</code>과는 거리가 멀다고 판단했다.</p>\n<p>또한 기존 utils 패키지에 존재하던 <code class=\"language-text\">유틸리티 클래스(Console, Randoms)</code>의 역할이 다소 부실하다고 느꼈습니다. 또한 사용되는 곳이 한정적이기 때문에 굳이 클래스 분리를 하지 않고 객체 내부로 <code class=\"language-text\">해당 책임을 이전(InputView, RandomMovingPolicy)</code> 하여 유틸리티 클래스를 제거했다.</p>\n<p>이러한 학습을 기반으로 아래와 같이 개선했다.</p>\n<ul>\n<li>기존 utils 패키지에 있던 모든 클래스를 제거했다.</li>\n<li>클래스 메서드를 가졌던 InputView와 OutputView를 객체 생성으로 변경한 뒤 Controller 생성 시점에 주입했다.</li>\n</ul>\n<h4>InputView</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_NAMES_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"경주할 자동차 이름을 입력하세요(이름은 쉼표(,)를 기준으로 구분).\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SPLIT_REGEX</span> <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">SPLIT_LIMIT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_COUNT_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"시도할 회수는 몇회인가요?\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Scanner</span> scanner<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InputView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getCarNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_NAMES_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_REGEX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SPLIT_LIMIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_COUNT_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>OutputView</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">STATUS_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n실행 결과\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">WINNER_NAME_DELIMITER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">END_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"가 최종 우승했습니다.\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printStatusMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> carsStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>carsStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> winners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WINNER_NAME_DELIMITER</span><span class=\"token punctuation\">,</span> winners<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">END_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Application</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">RacingCarController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>변경 후 이점</h3>\n<p>변경 후 이점에 대해 고민 해보았다. 우선 RancingCarController 생성 시점에 View에 대한 의존성을 주입하기 때문에 후에 요구사항이 변경된다면 View를 다른 종류의 View(ex. web)를 주입하여 유연하게 변경이 가능하다고 생각한다.</p>\n<p>또한 외부의 자원에 의존하지 않기 때문에 단위 테스트를 작성할 때 온전히 해당 객체만을 테스트할 수 있었다. 덕분에 view와 관련된 단위 테스트까지 진행할 수 있었다.</p>\n<p>제이에게 이러한 방향성을 가지고 개선하였다는 것을 전달하였고 아래와 같은 답변을 확인할 수 있었다.</p>\n<h4>리뷰 중 일부</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">첫 번째 미션인데도 불구하고 많은것을 도전해보셨네요 👍\n랜덤값을 이용하는 Car에 대한 테스트를 어떻게 진행해야할까를 넘어서 Controller도 상황에 맞게 테스트 가능한 구조를 만들어보셨네요. 말씀 주신 내용에 대한 이견은 없습니다! 구조가 훨씬 유연해졌다고 생각해요.</code></pre></div>\n<p>긍정적인 답변을 확인할 수 있었다. 후에는 특정 객체를 생성하여 주입하는 책임을 따로 분리해볼 생각이다. 현재에는 생성자 주입을 통한 점진적인 코드로 발전시키기 위해 노력하고 있다.</p>\n<h2>View 테스트 진행</h2>\n<p>기존에 받은 피드백을 기반으로 view 테스트를 진행했고, 의도한 대로 동작하는 것을 확인했다. 특히 @MethodSource를 활용하여 복잡한 객체를 전달하는 방법을 습득하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> staticStream<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNamesMethodSourceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pobi,woni,jun\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",,,,\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",pobi,\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" , ,, , \"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pobi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>의도하지 않은 DTO 도입</h2>\n<p>이전에 Car에서 값을 가공하여 출력문을 만드는 책임을 <code class=\"language-text\">CarsStatus</code>에게 주어 <code class=\"language-text\">domain 패키지</code>에 위치하였다. 하지만 관련해서 아래와 같은 피드백을 확인하였다.</p>\n<h4>리뷰 중 일부</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CarStatus라는 도메인패키지에 위치하고있는 클래스안에서 carStatus.append(CAR_STATUS_CRITERIA); 와 같이 뷰에서 그려주는 로직들이 들어있는데요,(makeCarStatus메서드) domain에서 뷰에 그려주는 로직들을 분리하여 view에게 책임을 가져가도록 리팩토링해보면 어떨까요?</code></pre></div>\n<p>처음 의도는 <code class=\"language-text\">view에서 단순히 domain을 get하는 행위 조차 분리하기 위한 목적</code>이었다. 하지만 결국 CarsStatus에서는 <code class=\"language-text\">출력을 위한 문장을 만드는 책임</code>을 가지게 되었다. 결국 <code class=\"language-text\">domain 내부에 view와 관련된 로직이 포함</code>된 것이다. </p>\n<p>하지만 도저히 <code class=\"language-text\">view에서 domain 관련 객체를 get하는 것</code>은 자존심이 허락하지 않았다. 결국 개선하기 위한 다른 방법이 필요했다.</p>\n<p>위와 같은 피드백을 확인하고 아래와 같이 개선하였다.</p>\n<ul>\n<li><code class=\"language-text\">CarsStatus</code> 객체를 <code class=\"language-text\">제거</code>하였다.</li>\n<li><code class=\"language-text\">domain</code>이 <code class=\"language-text\">view</code>에서 사용되지 않도록 <code class=\"language-text\">추가적인 DTO를 사용</code>하여 <code class=\"language-text\">결합도를 낮추었다.</code></li>\n</ul>\n<h4>CarDto</h4>\n<p>Car 객체의 정보를 전달하기 위한 DTO이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CarDto</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CarDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> position<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>CarsDto</h4>\n<p>Cars 객체의 정보를 전달하기 위한 DTO이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CarsDto</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CarDto</span><span class=\"token punctuation\">></span></span> cars<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CarsDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cars</span> cars<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cars <span class=\"token operator\">=</span> cars<span class=\"token punctuation\">.</span><span class=\"token function\">getCars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CarDto</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CarDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getCars()</code>를 활용할 때 <code class=\"language-text\">Collections.unmodifiableList()</code>를 활용하여 불변성을 유지하기 위해 노력하였다.</p>\n<h4>OutputView</h4>\n<p>이제 <code class=\"language-text\">Cars(domain)</code>에서 직접적으로 값을 꺼내 출력문을 만들지 않고 <code class=\"language-text\">CarsDto</code>를 통해 전달 받은 값으로 출력문을 생성하도록 개선하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">STATUS_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n실행 결과\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CARS_STATUS_JOIN_DELIMITER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CAR_STATUS_CRITERIA</span> <span class=\"token operator\">=</span> <span class=\"token string\">\" : \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_POSITION</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CAR_STATUS_POSITION</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">WINNER_NAME_DELIMITER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">END_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"가 최종 우승했습니다.\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printStatusMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STATUS_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CarsDto</span> carsDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeCarsStatus</span><span class=\"token punctuation\">(</span>carsDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">makeCarsStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CarsDto</span> carsDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> carsDto<span class=\"token punctuation\">.</span><span class=\"token function\">getCars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">makeCarStatus</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CARS_STATUS_JOIN_DELIMITER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">makeCarStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CarDto</span> carDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> carStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>carDto<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        carStatus<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CAR_STATUS_CRITERIA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> carDto<span class=\"token punctuation\">.</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>position<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token constant\">DEFAULT_POSITION</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            carStatus<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CAR_STATUS_POSITION</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> carStatus<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> winners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WINNER_NAME_DELIMITER</span><span class=\"token punctuation\">,</span> winners<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">END_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>객체 간의 의존 관계를 그림으로 표현하면 아래와 같다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/154450880-b0c996b9-5366-4505-80d5-5be2ed0aca4b.png\"></p>\n<h2>VO</h2>\n<p>관련해서는 <a href=\"https://tecoble.techcourse.co.kr/post/2020-06-11-value-object\">VO(Value Ojbect)란 무엇일까?</a>에서 답을 확인할 수 있었다. 추가적인 학습을 통해 정리가 필요 할 것 같다.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2021-04-26-mvc/\">웹 MVC 각 컴포넌트 역할</a></li>\n<li><a href=\"https://sakjung.tistory.com/33\">System.in과 System.out에 대한 테스트</a></li>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2020-06-11-value-object\">VO(Value Ojbect)란 무엇일까?</a></li>\n</ul>","frontmatter":{"title":"02. 2단계 - 자동차 경주 구현","date":"February 17, 2022","update":"February 17, 2022","tags":["우아한테크코스","미션"],"series":"우아한테크코스 레벨1"},"fields":{"slug":"/java-racing-car-step2/","readingTime":{"minutes":9.19}}},"seriesList":{"edges":[{"node":{"id":"4725c2e2-e907-5ff3-bef0-faa91dcfe8ef","fields":{"slug":"/java-racing-car-step1/"},"frontmatter":{"title":"01. 1단계 - 자동차 경주 구현"}}},{"node":{"id":"65e96d09-08e4-5540-8744-dab5c29628a4","fields":{"slug":"/java-racing-car-step2/"},"frontmatter":{"title":"02. 2단계 - 자동차 경주 구현"}}},{"node":{"id":"2c1e28dd-599b-58fd-917e-0abefaf110fd","fields":{"slug":"/java-lotto-step1/"},"frontmatter":{"title":"03. 1단계 - 로또(자동)"}}},{"node":{"id":"c8b191aa-f4d7-5a77-a813-97fa5bfb1aa0","fields":{"slug":"/java-lotto-step2/"},"frontmatter":{"title":"04. 2단계 - 로또(수동)"}}},{"node":{"id":"6754ea3c-f1a8-591b-8995-96269d524c88","fields":{"slug":"/java-blackjack-step1/"},"frontmatter":{"title":"05. 1단계 - 블랙잭"}}},{"node":{"id":"bb44264a-c6e4-5f39-abb1-f8cc54778430","fields":{"slug":"/java-blackjack-step2/"},"frontmatter":{"title":"06. 2단계 - 블랙잭(베팅)"}}},{"node":{"id":"9069b1ac-c0e1-53c5-87c8-417b654a02e8","fields":{"slug":"/java-chess-step1/"},"frontmatter":{"title":"07. 1, 2, 3단계 - 체스"}}},{"node":{"id":"0b7ba85e-6e63-5679-a514-d1a84734d181","fields":{"slug":"/java-chess-step2/"},"frontmatter":{"title":"08. 4, 5단계 - 체스"}}}]},"previous":{"fields":{"slug":"/java-racing-car-step1/"},"frontmatter":{"title":"01. 1단계 - 자동차 경주 구현"}},"next":{"fields":{"slug":"/java-lotto-step1/"},"frontmatter":{"title":"03. 1단계 - 로또(자동)"}}},"pageContext":{"id":"65e96d09-08e4-5540-8744-dab5c29628a4","series":"우아한테크코스 레벨1","previousPostId":"4725c2e2-e907-5ff3-bef0-faa91dcfe8ef","nextPostId":"2c1e28dd-599b-58fd-917e-0abefaf110fd"}},"staticQueryHashes":[],"slicesMap":{}}