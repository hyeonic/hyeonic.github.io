(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{530:function(a,t,e){"use strict";e.r(t);var s=e(21),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"java-virtual-machine"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-virtual-machine"}},[a._v("#")]),a._v(" Java Virtual Machine")]),a._v(" "),e("ul",[e("li",[a._v("Java 애플리케이션을 OS 독립적으로 실행 가능할 수 있도록 도와준다.")]),a._v(" "),e("li",[a._v("GC로 자동으로 메모리 관리되기 때문에 안정적이다.")])]),a._v(" "),e("h2",{attrs:{id:"jvm-구성"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm-구성"}},[a._v("#")]),a._v(" JVM 구성")]),a._v(" "),e("p",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://user-images.githubusercontent.com/59357153/136951463-0690ec5f-a255-4fe9-a95e-ef3113dbbf30.png"}})]),a._v(" "),e("h3",{attrs:{id:"java-compiler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-compiler"}},[a._v("#")]),a._v(" java compiler")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("java source code(.java)")]),a._v("는 "),e("code",[a._v("java compiler(javac)")]),a._v("를 거쳐 "),e("code",[a._v("bytecode(.class)")]),a._v("로 변환된다.")])]),a._v(" "),e("h3",{attrs:{id:"class-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-loader"}},[a._v("#")]),a._v(" Class Loader")]),a._v(" "),e("ul",[e("li",[a._v("변경된 "),e("code",[a._v("class")]),a._v(" 파일들은 "),e("code",[a._v("Class Loader")]),a._v("가 JVM 메모리 영역인 "),e("code",[a._v("Runtime Data Area")]),a._v("로 "),e("code",[a._v("Loading")]),a._v(" 시킨다.")])]),a._v(" "),e("h3",{attrs:{id:"runtime-data-area"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#runtime-data-area"}},[a._v("#")]),a._v(" Runtime Data Area")]),a._v(" "),e("p",[a._v("애플리케이션 수행을 위해 OS에서 할당 받은 공간이다.")]),a._v(" "),e("h4",{attrs:{id:"method-area"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#method-area"}},[a._v("#")]),a._v(" method area")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Method 영역은 JVM이 시작될 때 생성되는 공간으로 바이트코드가 이 영역에 저장된다.")])]),a._v(" "),e("li",[e("p",[a._v("올라가는 정보의 종류")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("field information")]),a._v(": 멤버변수의 이름, 데이터 타입, 접근 제어자에 대한 정보")]),a._v(" "),e("li",[e("code",[a._v("method information")]),a._v(": 메소드의 이름, 리턴타입, 매개변수, 접근 제어자에 대한 정보")]),a._v(" "),e("li",[e("code",[a._v("type information")]),a._v(": class/interface 여부 저장, type의 속성, 전체 이름, super class의 이름 등")])])]),a._v(" "),e("li",[e("p",[e("code",[a._v("클래스 데이터")]),a._v("를 위한 공간이다.")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("모든 스레드가 공유")]),a._v("한다.")])])]),a._v(" "),e("h4",{attrs:{id:"heap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#heap"}},[a._v("#")]),a._v(" heap")]),a._v(" "),e("ul",[e("li",[a._v("heap 영역은 "),e("code",[a._v("동적으로 생성된 객체")]),a._v("가 저장되는 영역으로 "),e("code",[a._v("GC의 대상")]),a._v("이 되는 공간이다.")]),a._v(" "),e("li",[e("code",[a._v("new 연산")]),a._v("을 통하여 동적으로 생성된 "),e("code",[a._v("인스턴스 변수")]),a._v("가 저장된다. ex) 클래스의 객체, 배열")]),a._v(" "),e("li",[a._v("그렇게 생성된 변수는 해당 객체가 소멸되기 전, GC가 정리하기 전까지는 해당 영역에 남아있다. 쉽게 소멸되는 데이터가 아니다.")]),a._v(" "),e("li",[e("code",[a._v("GC")]),a._v("의 대상이 되는 공간이다.")]),a._v(" "),e("li",[e("code",[a._v("모든 스레드가 공유")]),a._v("한다.")])]),a._v(" "),e("h4",{attrs:{id:"stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[a._v("#")]),a._v(" stack")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("stack")]),a._v(" 영역은 "),e("code",[a._v("지역변수")]),a._v("나 메서드의 "),e("code",[a._v("매개변수")]),a._v(", 임시적으로 사용되는 변수, "),e("code",[a._v("메서드의 정보")]),a._v("가 저장되는 영역이다.")]),a._v(" "),e("li",[a._v("지역변수와 매개변수의 특성상 해당 메서드의 호출이 "),e("code",[a._v("종료")]),a._v("되면 이 안에 선언된 변수들은 사라진다.")]),a._v(" "),e("li",[a._v("금방 사용되고 끝나는 데이터가 저장되는 공간이다.")]),a._v(" "),e("li",[a._v("스레드 마다 "),e("code",[a._v("독립적인")]),a._v(" "),e("code",[a._v("stack")]),a._v(" 영역을 가지고 있다.")])]),a._v(" "),e("h4",{attrs:{id:"heap과-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#heap과-stack"}},[a._v("#")]),a._v(" heap과 stack")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Location")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("y "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Location")]),a._v(" location "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Location")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("ul",[e("li",[e("code",[a._v("location")]),a._v("는 "),e("code",[a._v("stack")]),a._v(" 영역에 저장된다.")]),a._v(" "),e("li",[e("code",[a._v("new Location(2, 5)")]),a._v("는 인스턴스 변수로 "),e("code",[a._v("heap")]),a._v(" 영역에 저장된다.")]),a._v(" "),e("li",[e("code",[a._v("reference type")]),a._v("의 변수들이 실행될 때 마다 "),e("code",[a._v("stack")]),a._v(" 영역에 쌓여서 비효율적이므로 "),e("code",[a._v("heap")]),a._v(" 영역에 실제 데이터를 저장하고 그 메모리의 주소를 "),e("code",[a._v("참조하는 변수")]),a._v("를 "),e("code",[a._v("stack")]),a._v(" 영역에 저장한다.")])]),a._v(" "),e("h4",{attrs:{id:"pc-register"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pc-register"}},[a._v("#")]),a._v(" PC Register")]),a._v(" "),e("ul",[e("li",[a._v("CPU Register의 PC를 의미하는 것이 아니다.")]),a._v(" "),e("li",[a._v("스레드가 시작될 때 생성되며, 현재 수행중인 JVM의 "),e("code",[a._v("명령어 주소")]),a._v("를 "),e("code",[a._v("저장")]),a._v("하는 공간이다. 스레드가 어떤 명령어로 수행할지를 저장하는 공간이다.")])]),a._v(" "),e("h4",{attrs:{id:"native-method-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#native-method-stack"}},[a._v("#")]),a._v(" Native Method Stack")]),a._v(" "),e("ul",[e("li",[a._v("Native Method Stack은 Java가 아닌 다른 언어로 작성된 코드를 위한 공간이다.")]),a._v(" "),e("li",[a._v("즉 "),e("code",[a._v("JNI(Java Native Interface)")]),a._v("를 통해 호출하는 "),e("code",[a._v("C/C++")]),a._v(" 등의 코드를 수행하기 위한 공간")]),a._v(" "),e("li",[e("code",[a._v("Java")]),a._v(" 프로그램이 컴파일되어 생성되는 "),e("code",[a._v("바이트코드")]),a._v("가 아닌 실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역이다.")])]),a._v(" "),e("h3",{attrs:{id:"execution-engine"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#execution-engine"}},[a._v("#")]),a._v(" Execution Engine")]),a._v(" "),e("ul",[e("li",[a._v("JVM은 Java 컴파일러가 컴파일한 ByteCode를 ClassLoader를 이용해 Runtime Data Area에 실행 가능한 상태로 적재한다. "),e("code",[a._v("Execution Engine")]),a._v("은 "),e("code",[a._v("Runtime Data Area")]),a._v("에 할당된 "),e("code",[a._v("바이트코드")]),a._v("를 "),e("code",[a._v("실행하는 역할")]),a._v("을 담당한다.")]),a._v(" "),e("li",[a._v("바이트코드를 실행시키기 위해서는 "),e("code",[a._v("바이트코드")]),a._v("를 컴퓨터가 이해할 수 있는 "),e("code",[a._v("기계어")]),a._v("로 바꾸는 작업이 필요한데, "),e("code",[a._v("interpreter")]),a._v("와 "),e("code",[a._v("jit compiler")]),a._v("가 해당 역할을 진행한다.")])]),a._v(" "),e("h4",{attrs:{id:"interpreter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interpreter"}},[a._v("#")]),a._v(" Interpreter")]),a._v(" "),e("ul",[e("li",[a._v("명령어를 한줄한줄 해석하면서 실행한다.")]),a._v(" "),e("li",[a._v("한줄씩 수행하기 때문에 느린 실행 속도를 가지고 있는 것이 단점이다.")])]),a._v(" "),e("h4",{attrs:{id:"jit-compiler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jit-compiler"}},[a._v("#")]),a._v(" JIT Compiler")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Interpreter")]),a._v("의 단점을 보완하기 위한 방법이다.")]),a._v(" "),e("li",[e("code",[a._v("Interpreter")]),a._v(" 방식으로 실행하다가 적절한 시점에 바이트코드 전체를 컴파일하여 기계어로 변경하고, 이후 직접 실행하는 방식이다.")]),a._v(" "),e("li",[a._v("한 번에 전체를 컴파일하기 때문에 "),e("code",[a._v("Interpreter")]),a._v("보다 오래 걸린다. 만약 한 번만 실행되는 코드라면 "),e("code",[a._v("JIT Compiler")]),a._v("를 사용하는 것 보다 "),e("code",[a._v("Interpreter")]),a._v("를 사용하는 것이 유리하다. JIT Compiler는 JVM 내부적으로 해당 메서드가 "),e("code",[a._v("얼마나 자주 수행")]),a._v("되는지 체크하고 특정한 상황을 넘어서면 compile을 진행한다.")]),a._v(" "),e("li",[e("code",[a._v("Runtime")]),a._v(" 시간에 한꺼번에 변경하여 실행한다.")])]),a._v(" "),e("h2",{attrs:{id:"native-method-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#native-method-interface"}},[a._v("#")]),a._v(" Native Method Interface")]),a._v(" "),e("ul",[e("li",[a._v("JVM에 의해 실행되는 코드 중 네이티브로 실행하는 것이 있다면 해당 네이티브 코드를 호출하거나 호출될 수 있도록 만든 일종의 프레임워크이다.")])]),a._v(" "),e("h2",{attrs:{id:"native-method-libraries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#native-method-libraries"}},[a._v("#")]),a._v(" Native Method Libraries")]),a._v(" "),e("ul",[e("li",[a._v("네이티브 메서드 실행에 필요한 라이브러리이다.")])]),a._v(" "),e("h2",{attrs:{id:"todo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[a._v("#")]),a._v(" TODO")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://performeister.tistory.com/75",target:"_blank",rel:"noopener noreferrer"}},[a._v("[JVM Internal]Java Performance Fundamental 교재를 공유합니다."),e("OutboundLink")],1),a._v(": Java Performace Fundamental의 저자분이 책 내용을 기반으로 ppt를 공유하였다.")]),a._v(" "),e("li",[e("a",{attrs:{href:"https://tecoble.techcourse.co.kr/post/2021-07-12-jvm-jre-jdk/",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM에 관하여 - Part 1, JVM, JRE, JDK"),e("OutboundLink")],1),a._v(": jvm의 내부 구조를 그림과 코드로 깔끔히 정리하였다.")])]),a._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[a._v("#")]),a._v(" References")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=AWXPnMDZ9I0",target:"_blank",rel:"noopener noreferrer"}},[a._v("자바 메모리 구조 뿌시기 [JVM이란?]"),e("OutboundLink")],1),e("br"),a._v(" "),e("a",{attrs:{href:"https://asfirstalways.tistory.com/158",target:"_blank",rel:"noopener noreferrer"}},[a._v("#자바가상머신, JVM(Java Virtual Machine)이란 무엇인가?"),e("OutboundLink")],1)]),a._v(" "),e("TagLinks")],1)}),[],!1,null,null,null);t.default=r.exports}}]);