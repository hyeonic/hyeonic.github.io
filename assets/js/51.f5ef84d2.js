(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{515:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"comparator-활용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparator-활용"}},[t._v("#")]),t._v(" Comparator 활용")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#method.summary",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#method.summary"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("code",[t._v("Comparator")]),t._v(" 인터페이스는 메소드의 body가 없는 추상 메소드인 "),a("code",[t._v("compare(T o1, T o2)")]),t._v("가 하나만 존재하는 "),a("code",[t._v("함수형 인터페이스")]),t._v("이다. 그외 선언된 메소드들은 Java 8 이후 등장한 default 메소드로 이루어져 있다. 그렇기 때문에 해당 인터페이스를 구현하기 위해서는 "),a("code",[t._v("compare")]),t._v(" 메소드만 재정의하여 사용하면 된다.")]),t._v(" "),a("p",[a("code",[t._v("Comparator")]),t._v("는 "),a("code",[t._v("두 객체")]),t._v("를 "),a("code",[t._v("비교")]),t._v("하기 위한 객체이다. 새롭게 정의한 클래스 객체에는 다양한 필드들이 존재하기 때문에 "),a("code",[t._v("특정한 규칙")]),t._v(" 없이는 두 객체를 비교할 수 없다.")]),t._v(" "),a("h2",{attrs:{id:"person-java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#person-java"}},[t._v("#")]),t._v(" Person.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("위 코드는 간단히 새롭게 정의한 "),a("code",[t._v("Person")]),t._v(" 클래스이다. "),a("code",[t._v("나이 정보")]),t._v("인 age와 "),a("code",[t._v("이름 정보")]),t._v(" name을 가지고 있다. 만약 사람들을 "),a("code",[t._v("나이가 큰 순")]),t._v(", "),a("code",[t._v("나이가 같다면 이름 사전 순")]),t._v("으로 정렬한다고 가정해보자.\n우리는 새롭게 정의한 "),a("code",[t._v("Person")]),t._v(" 클래스를 서로 "),a("code",[t._v("비교")]),t._v("해야 한다. 단순히 나이 비교만 한다면 문제 없지만 나이가 같은 경우에는 사전 순으로 정렬해야 한다.")]),t._v(" "),a("p",[t._v("사람들을 줄세우는 방법은 위 방법으로 끝이 아니다. "),a("code",[t._v("나이가 작은 순")]),t._v("으로 정렬할 수도 있고, "),a("code",[t._v("이름을 사전 역순")]),t._v("으로 정렬할 수도 있다. 매번 "),a("code",[t._v("정해지지 않은 규칙")]),t._v("들로 인하여 부가적인 코드들이 늘어날 것이다.")]),t._v(" "),a("p",[t._v("그 중 "),a("code",[t._v("Comparator")]),t._v(" 인터페이스의 "),a("code",[t._v("compare")]),t._v(" 메소드는 매개변수로 전달된 "),a("code",[t._v("두 객체")]),t._v("를 비교한다.")]),t._v(" "),a("h2",{attrs:{id:"정렬에서-compare-메소드"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#정렬에서-compare-메소드"}},[t._v("#")]),t._v(" 정렬에서 compare 메소드")]),t._v(" "),a("p",[t._v("독립적으로 넘어온 두 매개변수를 비교하는 메소드이다. 사용자가 구현하는 방식에 따라 "),a("code",[t._v("compare")]),t._v(" 메소드는 "),a("code",[t._v("양수")]),t._v(", "),a("code",[t._v("0")]),t._v(", "),a("code",[t._v("음수")]),t._v("로 반환이 가능하다. 보통은 양수는 "),a("code",[t._v("1")]),t._v(", 음수는 "),a("code",[t._v("-1")]),t._v("로 표현한다.")]),t._v(" "),a("p",[t._v("정렬과 compare 메소드는 매우 긴밀한 연관을 가지고 있다. 어떠한 리스트를 오름차순, 혹은 내림차순 정렬을 위해서는 리스트의 원소들을 매번 비교해야 한다. 하지만 리스트의 원소들이 Person과 같이 "),a("code",[t._v("새롭게 정의한 클래스")]),t._v("인 경우 특정한 "),a("code",[t._v("규칙")]),t._v("이 없기 때문에 "),a("code",[t._v("정렬")]),t._v("이 불가능하다.")]),t._v(" "),a("p",[t._v("Java에서 정렬은 기본적으로 "),a("code",[t._v("오름차순")]),t._v("이 기본이다. 오름차순은 선행 원소의 크기가 후행 원소의 크기 보다 작다.")]),t._v(" "),a("p",[t._v("결국 기준 원소인 선행 원소를 기준으로 후행원소 보다 작으면 "),a("code",[t._v("음수")]),t._v("이므로 두 원소의 "),a("code",[t._v("위치")]),t._v("를 "),a("code",[t._v("교환하지 않는다")]),t._v(".\n선행 원소가 후행 원소보다 크다면 "),a("code",[t._v("양수")]),t._v("이므로 오름차순 정렬을 위해 두 원소의 "),a("code",[t._v("위치")]),t._v("를 "),a("code",[t._v("교환")]),t._v("한다.")]),t._v(" "),a("p",[t._v("위의 기준은 단순히 오름차순인 경우를 예시로 든 것이다. 만약 사용자가 "),a("code",[t._v("내림차순")]),t._v(" 정렬을 하고 싶다면 위에서 명시한 방법과 반대로 행하면 된다.")]),t._v(" "),a("p",[t._v("이런 부분은 사용자가 compare 메소드를 "),a("code",[t._v("어떤식으로 구현하냐")]),t._v("에 따라 달라진다. 즉 상황에 맞게 compare 메소드를 구현하여 적절히 사용하면 된다.")]),t._v(" "),a("h2",{attrs:{id:"compare-메소드-구현"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compare-메소드-구현"}},[t._v("#")]),t._v(" compare 메소드 구현")]),t._v(" "),a("p",[a("code",[t._v("Comparator")]),t._v(" 인터페이스는 "),a("code",[t._v("추상 메소드")]),t._v("를 1개만 가진 "),a("code",[t._v("함수형 인터페이스")]),t._v("이다. 즉 익명 클래스 구현하여 사용할 수 있다.")]),t._v(" "),a("p",[t._v("List 인터페이스에는 sort() default 메소드가 존재한다. 해당 메소드는 매개변수로 Compartor를 받도록 되어 있다.\n즉 우리는 요구사항에 맞춰 compare 메소드의 내용을 구현하여 전달하기만 하면 된다.")]),t._v(" "),a("p",[t._v("아래는 간단한 사용 방법이다.")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" personList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"personA"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"personB"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"personC"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"personD"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"personE"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"personF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" o2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 선행 원소의 age가 더 작은 경우 두 원소를 교환하지 않는다.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 즉, 오름차순 정렬이다.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" o2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 원소의 나이가 같은 경우 name을 사전순, 즉 문자열 오름차순 정렬한다.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" o2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" o1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 위에 해당하지 않는 경우 두 원소를 교환한다.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" personList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("10 personA\n15 personD\n15 personE\n20 personB\n20 personF\n30 personC\n")])])]),a("p",[t._v("출력 결과를 살펴보면 나이 "),a("code",[t._v("오름차순")]),t._v(", 이름은 "),a("code",[t._v("사전순")]),t._v("으로 정렬된 것을 확인 할 수 있다.")]),t._v(" "),a("p",[t._v("이처럼 다양한 방식으로 "),a("code",[t._v("compare")]),t._v(" "),a("code",[t._v("메소드")]),t._v("를 구현하면 의도에 따라 다양한 방법으로 정렬이 가능하다.")]),t._v(" "),a("h2",{attrs:{id:"더-생각해보기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#더-생각해보기"}},[t._v("#")]),t._v(" 더 생각해보기")]),t._v(" "),a("p",[t._v("Compare 메소드가 반환하는 값은 양수, 0, 음수로 크게 3가지 경우이다. 보통 0은 두 원소가 같을 때 반환한다.\n정렬을 생각해보면 두 원소가 같으면 위치를 이동하거나 하지 않아도 값은 동일하게 나타난다.")]),t._v(" "),a("p",[t._v("구글링 중 재밌는 질문을 찾게 되었다.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/58267950/why-we-need-to-return-0-when-comparator-compare-become-equal",target:"_blank",rel:"noopener noreferrer"}},[t._v("why we need to return 0 when Comparator.compare become equal"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Only certain, stable sort algorithms will treat negative values and 0 the same. It may be handled differently with other algorithms. Besides that, you copied the error of the OP to assume that a comparator has to return one of -1, 0, or +1. A comparator can return any int value, if nonzero, only the sign matters. – Holger Oct 25 '19 at 10:56")])]),t._v(" "),a("p",[t._v("특정한 안정적인 정렬 알고리즘만 음수 값과 0일 "),a("code",[t._v("동일")]),t._v("하게 처리한다고 한다. 다른 알고리즘이 동일하게 처리하는 것을 보장하지 않기 때문에 "),a("code",[t._v("의도와 다르게")]),t._v(" 처리될 여지가 있다. 결국 compare 메소드는 양수, 0, 음수를 "),a("code",[t._v("모두 반환")]),t._v("하도록 처리하는 것이 바람직하다!")]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://st-lab.tistory.com/243",target:"_blank",rel:"noopener noreferrer"}},[t._v("자바 [JAVA] - Comparable 과 Comparator의 이해"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Interface Comparator"),a("OutboundLink")],1),a("br"),t._v(" "),a("a",{attrs:{href:"https://stackoverflow.com/questions/58267950/why-we-need-to-return-0-when-comparator-compare-become-equal",target:"_blank",rel:"noopener noreferrer"}},[t._v("why we need to return 0 when Comparator.compare become equal"),a("OutboundLink")],1)]),t._v(" "),a("TagLinks")],1)}),[],!1,null,null,null);s.default=e.exports}}]);