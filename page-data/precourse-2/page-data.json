{"componentChunkName":"component---src-templates-post-jsx","path":"/precourse-2/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"3e440879-b393-5bfe-98b7-c97f07f9ad94","excerpt":"미션 - 자동차 경주 게임 우아한테크코스 4기 프리코스 2주차 미션을 진행하며 고민한 내용을 정리하고 추가적인 개인 목표를 세워 정리해보았다. 미션 - 자동차 경주 게임 제출 코드 목차 1. 살아 있는 문서 2. 구현 순서 맞추기 3. 매직 넘버, 매직 리터럴 4. Car, Strategy Pattern 적용 5. 캡슐화 6. String의 split 메…","html":"<h2>미션 - 자동차 경주 게임</h2>\n<p>우아한테크코스 4기 프리코스 2주차 미션을 진행하며 고민한 내용을 정리하고 추가적인 개인 목표를 세워 정리해보았다.</p>\n<ul>\n<li><a href=\"https://github.com/woowacourse/java-racingcar-precourse\">미션 - 자동차 경주 게임</a></li>\n<li><a href=\"https://github.com/hyeonic/java-racingcar-precourse/tree/hyeonic\">제출 코드</a></li>\n</ul>\n<h2>목차</h2>\n<ul>\n<li><a href=\"#_1-%E1%84%89%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%A1-%E1%84%8B%E1%85%B5%E1%86%BB%E1%84%82%E1%85%B3%E1%86%AB-%E1%84%86%E1%85%AE%E1%86%AB%E1%84%89%E1%85%A5\">1. 살아 있는 문서</a></li>\n<li><a href=\"#_2-%E1%84%80%E1%85%AE%E1%84%92%E1%85%A7%E1%86%AB-%E1%84%89%E1%85%AE%E1%86%AB%E1%84%89%E1%85%A5-%E1%84%86%E1%85%A1%E1%86%BD%E1%84%8E%E1%85%AE%E1%84%80%E1%85%B5\">2. 구현 순서 맞추기</a></li>\n<li><a href=\"#_3-%E1%84%86%E1%85%A2%E1%84%8C%E1%85%B5%E1%86%A8-%E1%84%82%E1%85%A5%E1%86%B7%E1%84%87%E1%85%A5-%E1%84%86%E1%85%A2%E1%84%8C%E1%85%B5%E1%86%A8-%E1%84%85%E1%85%B5%E1%84%90%E1%85%A5%E1%84%85%E1%85%A5%E1%86%AF\">3. 매직 넘버, 매직 리터럴</a></li>\n<li><a href=\"#_4-car-strategy-pattern-%E1%84%8C%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%AD%E1%86%BC\">4. Car, Strategy Pattern 적용</a></li>\n<li><a href=\"#_5-%E1%84%8F%E1%85%A2%E1%86%B8%E1%84%89%E1%85%B2%E1%86%AF%E1%84%92%E1%85%AA\">5. 캡슐화</a></li>\n<li><a href=\"#_6-string%E1%84%8B%E1%85%B4-split-%E1%84%86%E1%85%A6%E1%84%89%E1%85%A5%E1%84%83%E1%85%B3\">6. String의 split 메서드</a></li>\n<li><a href=\"#_7-string-%E1%84%8B%E1%85%A7%E1%86%AB%E1%84%89%E1%85%A1%E1%86%AB%E1%84%8C%E1%85%A1%E1%84%87%E1%85%A9%E1%84%83%E1%85%A1-stringbuilder\">7. String + 연산자보다 StringBuilder</a></li>\n<li><a href=\"#_7-%E1%84%86%E1%85%A9%E1%84%83%E1%85%B3%E1%86%AB-%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%89%E1%85%B5%E1%84%80%E1%85%A1%E1%86%B9%E1%84%80%E1%85%AA-%E1%84%86%E1%85%AE%E1%86%AB%E1%84%8C%E1%85%A1%E1%84%8B%E1%85%A7%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF-%E1%84%91%E1%85%A9%E1%84%8C%E1%85%A1%E1%86%BC%E1%84%92%E1%85%A1%E1%84%85%E1%85%A1\">8. 모든 원시값과 문자열을 포장하라</a></li>\n<li><a href=\"#_8-%E1%84%83%E1%85%A1%E1%86%AB%E1%84%8B%E1%85%B1-%E1%84%90%E1%85%A6%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3-%E1%84%86%E1%85%A7%E1%86%BC%E1%84%86%E1%85%A7%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8\">9. 단위 테스트 명명법</a></li>\n<li><a href=\"#_10-git-rebase\">10. git rebase</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<h2>1. 살아 있는 문서</h2>\n<p>아래는 1주차 공통 피드백에 담긴 내용들이다.</p>\n<h3>기능 목록을 업데이트하라</h3>\n<p>README.md 파일에 작성하는 기능 목록은 기능 구현을 하면서 <code class=\"language-text\">변경될 수 있다</code>. 시작할 때 모든 기능 목록을 완벽하게 정리해야 한다는 부담감을 가지기보다 기능을 구현하면서 문서를 <code class=\"language-text\">계속 업데이트</code>한다. 죽은 문서가 아니라 <code class=\"language-text\">살아 있는 문서</code>를 만들기 위해 노력한다.</p>\n<h3>기능 목록을 재검토하라</h3>\n<p>기능 목록을 클래스 설계와 구현, 함수(메서드) 설계와 구현과 같이 너무 <code class=\"language-text\">상세하게 작성하지 않는다.</code> 클래스 이름, 함수(메서드) 시그니처와 반환값은 언제든지 변경될 수 있기 때문이다. 너무 세세한 부분까지 정리하기 보다 구현해야 할 기능 목록을 정리하는 데 집중한다. <strong>정상적인 경우도 중요하지만, 예외적인 상황도 기능 목록에 정리</strong>한다. 특히 예외 상황은 시작 단계에서 모두 찾기 힘들기 때문에 기능을 구현하면서 계속해서 추가해 나간다.</p>\n<p>위와 같은 사항들을 확인할 수 있었다. 피드백을 기반으로 <code class=\"language-text\">살아 있는 문서</code>를 만들기 위해 노력한다.</p>\n<details> \n<summary>ver 0.1 기능 목록</summary>\n<h3>1. 자동차</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 이름을 가질 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 이름은 <code class=\"language-text\">5자 이하</code>만 가능하다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 전진 또는 멈출 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 0에서 9 사이에 무작위 값을 구한 후 무작위 값이 4 이상일 경우 전진한다.</li>\n</ul>\n<h3>2. 입력</h3>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 경주할 자동차 이름을 입력 받는다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 경주할 자동차 이름은 쉼표를 기준으로 나눈다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 입력 받은 자동차 이름은 검증을 마친 후 List로 변환되어 전달한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수를 입력 받는다.</li>\n</ul>\n<h3>3. 게임 실행</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임을 실행할 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임은 반복되지 않는다.</li>\n</ul>\n<h3>4. 출력</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 결과값 출력에 대한 전반적인 책임을 가진다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <code class=\"language-text\">IllegalArgumentException</code>이 발생할 경우 <code class=\"language-text\">\"[ERROR]\"로 시작하는 에러 메시지 출력</code>을 진행한다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.2 기능 목록</summary>\n<h3>1. 자동차</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 이름을 가질 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 이름은 <code class=\"language-text\">5자 이하</code>만 가능하다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 전진 또는 멈출 수 있다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 자동차는 이동 유무를 판단하는 <code class=\"language-text\">isMoving</code> 메서드를 가진 <code class=\"language-text\">MovingPolicy</code> 인터페이스를 가진다. ✚</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 전진 유무는 <code class=\"language-text\">MovingPolicy</code>의 <code class=\"language-text\">isMoving</code>을 통해 확인한다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">MovingPolicy</code>의 구현체인 <code class=\"language-text\">RandomMovingPolicy</code>을 활용하여 0에서 9 사이에 무작위 값을 구한 후 무작위 값이 4 이상일 경우 전진한다. ✚</li>\n</ul>\n</li>\n</ul>\n<h3>2. 입력</h3>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 경주할 자동차 이름을 입력 받는다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 경주할 자동차 이름은 쉼표를 기준으로 나눈다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 입력 받은 자동차 이름은 검증을 마친 후 List로 변환되어 전달한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수를 입력 받는다.</li>\n</ul>\n<h3>3. 게임 실행</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임을 실행할 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임은 반복되지 않는다.</li>\n</ul>\n<h3>4. 출력</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 결과값 출력에 대한 전반적인 책임을 가진다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <code class=\"language-text\">IllegalArgumentException</code>이 발생할 경우 <code class=\"language-text\">\"[ERROR]\"로 시작하는 에러 메시지 출력</code>을 진행한다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.3 기능 목록</summary>\n<h3>1. 자동차</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 이름을 가질 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 이름은 <code class=\"language-text\">5자 이하</code>만 가능하다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 전진 또는 멈출 수 있다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 자동차는 이동 유무를 판단하는 <code class=\"language-text\">isMoving</code> 메서드를 가진 <code class=\"language-text\">MovingPolicy</code> 인터페이스를 가진다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 전진 유무는 <code class=\"language-text\">MovingPolicy</code>의 <code class=\"language-text\">isMoving</code>을 통해 확인한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">MovingPolicy</code>의 구현체인 <code class=\"language-text\">RandomMovingPolicy</code>을 활용하여 0에서 9 사이에 무작위 값을 구한 후 무작위 값이 4 이상일 경우 전진한다.</li>\n</ul>\n</li>\n</ul>\n<h3>2. 입력</h3>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 경주할 자동차 이름을 입력 받는다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 경주할 자동차 이름은 쉼표를 기준으로 나눈다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 입력 받은 자동차 이름은 검증을 마친 후 List로 변환되어 전달한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수를 입력 받는다.</li>\n</ul>\n<h3>3. 자동차 리스트</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차들을 관리하는 일급 컬렉션이다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차들을 일괄적으로 움직이게할 수 있다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 각 차수별 실행 결과를 만들어 반환한다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 최종 우승자 안내 문구를 제공한다. ✚</li>\n</ul>\n<h3>4. 게임 실행</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임을 실행할 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임은 반복되지 않는다.</li>\n</ul>\n<h3>5. 출력</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 결과값 출력에 대한 전반적인 책임을 가진다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <code class=\"language-text\">IllegalArgumentException</code>이 발생할 경우 <code class=\"language-text\">\"[ERROR]\"로 시작하는 에러 메시지 출력</code>을 진행한다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.4 기능 목록</summary>\n<h3>1. 자동차</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 이름을 가질 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 이름은 <code class=\"language-text\">5자 이하</code>만 가능하다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 자동차의 이름은 <code class=\"language-text\">공백</code>이거나 <code class=\"language-text\">비어있는 경우</code> 예외 처리를 진행한다. 아래는 예외 처리가 일어날 수 있는 이름의 예시이다. ✚</p>\n<ul>\n<li><code class=\"language-text\"></code> ✚</li>\n<li><code class=\"language-text\">null</code> ✚</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 전진 또는 멈출 수 있다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 자동차는 이동 유무를 판단하는 <code class=\"language-text\">isMoving</code> 메서드를 가진 <code class=\"language-text\">MovingPolicy</code> 인터페이스를 가진다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 전진 유무는 <code class=\"language-text\">MovingPolicy</code>의 <code class=\"language-text\">isMoving</code>을 통해 확인한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">MovingPolicy</code>의 구현체인 <code class=\"language-text\">RandomMovingPolicy</code>을 활용하여 0에서 9 사이에 무작위 값을 구한 후 무작위 값이 4 이상일 경우 전진한다.</li>\n</ul>\n</li>\n</ul>\n<h3>2. 입력</h3>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 경주할 자동차 이름을 입력 받는다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 경주할 자동차 이름은 쉼표를 기준으로 나눈다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 입력 받은 자동차 이름은 검증을 마친 후 List로 변환되어 전달한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 시도할 회수를 입력 받는다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수가 숫자가 아니면 예외를 던진다. ✚</li>\n</ul>\n</li>\n</ul>\n<h3>3. 자동차 리스트</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차들을 관리하는 일급 컬렉션이다. </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차들을 일괄적으로 움직이게 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 각 차수별 실행 결과를 만들어 반환한다. </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 최종 우승자 안내 문구를 제공한다.</li>\n</ul>\n<h3>4. 게임 실행</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임을 실행할 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임은 반복되지 않는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 예외 처리가 일어나면 해당 에러 메시지를 출력한 후 입력을 다시 받는다. ✚</li>\n</ul>\n<h3>5. 출력</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 결과값 출력에 대한 전반적인 책임을 가진다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <code class=\"language-text\">IllegalArgumentException</code>이 발생할 경우 <code class=\"language-text\">\"[ERROR]\"로 시작하는 에러 메시지 출력</code>을 진행한다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.5 기능 목록</summary>\n<h3>1. 자동차</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 이름을 가질 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 이름은 <code class=\"language-text\">5자 이하</code>만 가능하다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 자동차의 이름은 <code class=\"language-text\">공백</code>이거나 <code class=\"language-text\">비어있는 경우</code> 예외 처리를 진행한다. 아래는 예외 처리가 일어날 수 있는 이름의 예시이다. </p>\n<ul>\n<li><code class=\"language-text\">''</code></li>\n<li><code class=\"language-text\">' '</code></li>\n<li><code class=\"language-text\">'   '</code></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차는 전진 또는 멈출 수 있다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 자동차는 이동 유무를 판단하는 <code class=\"language-text\">isMoving</code> 메서드를 가진 <code class=\"language-text\">MovingPolicy</code> 인터페이스를 가진다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 전진 유무는 <code class=\"language-text\">MovingPolicy</code>의 <code class=\"language-text\">isMoving</code>을 통해 확인한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">MovingPolicy</code>의 구현체인 <code class=\"language-text\">RandomMovingPolicy</code>을 활용하여 0에서 9 사이에 무작위 값을 구한 후 무작위 값이 4 이상일 경우 전진한다.</li>\n</ul>\n</li>\n</ul>\n<h3>2. 입력</h3>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 경주할 자동차 이름을 입력 받는다.</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 경주할 자동차 이름은 쉼표를 기준으로 나눈다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 입력 받은 자동차 이름은 검증을 마친 후 List로 변환되어 전달한다.</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수를 입력 받는다.</li>\n</ul>\n<h3>3. 시도 회수</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수를 표현하기 위한 역할을 가진다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수가 <code class=\"language-text\">숫자가 아니면</code> 예외를 던진다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 시도할 회수가 <code class=\"language-text\">음수</code>이면 예외를 던진다. ✚</li>\n</ul>\n<h3>4. 자동차 리스트</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차들을 관리하는 일급 컬렉션이다. </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차의 이름이 <code class=\"language-text\">중복</code>되는 경우 예외를 던진다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 자동차들을 일괄적으로 움직이게 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 각 차수별 실행 결과를 만들어 반환한다. </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 최종 우승자 안내 문구를 제공한다.</li>\n</ul>\n<h3>5. 게임 실행</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임을 실행할 수 있다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 레이싱 게임은 반복되지 않는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 예외 처리가 일어나면 해당 에러 메시지를 출력한 후 입력을 다시 받는다.</li>\n</ul>\n<h3>6. 출력</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 결과값 출력에 대한 전반적인 책임을 가진다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <code class=\"language-text\">IllegalArgumentException</code>이 발생할 경우 <code class=\"language-text\">\"[ERROR]\"로 시작하는 에러 메시지 출력</code>을 진행한다.</p>\n</details>\n</li>\n</ul>\n<h2>2. 구현 순서 맞추기</h2>\n<blockquote>\n<p>구현 순서도 코딩 컨벤션이다</p>\n<p>클래스는 상수, 멤버 변수, 생성자, 메서드 순으로 작성한다.</p>\n</blockquote>\n<p>1주차 공통 피드백에서 구현 순서에 따른 피드백도 확인할 수 있었다. 관련 자료를 더 찾아보기 위해 <a href=\"http://www.yes24.com/Product/Goods/11681152\">Clean Code 클린 코드 애자일 소프트웨어 장인 정신</a>을 참고하였다.</p>\n<blockquote>\n<p>형식 맞추기\n책의 세부 내용은 예제 코드를 기반으로 <a href=\"https://hyeonic.github.io/%EA%B8%B0%ED%83%80/clean-code/match-the-format.html\">형식 맞추기</a>에 작성하였다.</p>\n</blockquote>\n<p>공통 피드백과 책의 내용을 기반으로 구현 순서에 신경쓰며 작성하기 위해 노력하였다.</p>\n<h2>3. 매직 넘버, 매직 리터럴</h2>\n<blockquote>\n<p>매직 넘버를 사용하지 마라\n매직 넘버는 의미를 나타낼 수 있는 상수(static final)로 치환하여 코드의 가독성을 높인다.</p>\n</blockquote>\n<p>1주차 공통 피드백에서 매직 넘버와 관련된 피드백을 확인할 수 있었다. 매직 넘버, 매직 리터럴이 의미하는 바는 무엇이고 이것을 통해 얻고자 하는 것이 무엇인지 정리하였다.</p>\n<p><code class=\"language-text\">매직 넘버(magic number)</code>, <code class=\"language-text\">매직 리터럴(magic literal)</code> 이란 소스 코드에서 의미를 가진 숫자나 문자를 그대로 표현한 것을 말한다. </p>\n<p>이러한 표현은 소스 코드를 읽기 어렵게 만든다. 상수로 선언되어 있지 않은 숫자, 문자열은 무엇을 의미하는지 확신할 수 없게 만든다. 이러한 의미를 파악하기 위해 해당 클래스와 흐름을 이해하기 위해 많은 시간을 요구한다. </p>\n<p><code class=\"language-text\">상수(static final)</code>로 선언하게 되면 이러한 값들에게 <code class=\"language-text\">이름이 부여</code>된다. 이름을 통하여 <code class=\"language-text\">의미와 역할</code>을 확실히 전달할 수 있다.</p>\n<p>아래는 <a href=\"https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad\">What is a magic number, and why is it bad?</a>의 예제를 인용한 것이다.</p>\n<p>아래 코드는 매직 넘버가 사용된 예시이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// don't do this</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 아래와 같이 리팩토링 되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_PASSWORD_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token constant\">MAX_PASSWORD_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러한 리팩토링은 코드의 <code class=\"language-text\">가독성이 향상</code>되고 <code class=\"language-text\">유지 관리</code>가 더 쉽게 만들 수 있다.</p>\n<h3>적용</h3>\n<p>실제 제출 코드의 일부분을 가져온 것이다. 숫자와 문자열 모두 의미를 정확하게 전달할 수 있도록 이름을 부여하였기 때문에 이전 보다 더 명확하게 의도를 전달할 수 있게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_NAMES_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"경주할 자동차 이름을 입력하세요.(이름은 쉼표(,) 기준으로 구분)\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_TRY_COUNT_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"시도할 회수는 몇회인가요?\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SPLIT_REGEX</span> <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">SPLIT_LIMIT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_NAMES_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> inputNames <span class=\"token operator\">=</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> inputNames<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_REGEX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SPLIT_LIMIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TryCount</span> <span class=\"token function\">getTryCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_TRY_COUNT_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> inputTryCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TryCount</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>4. Car, Strategy Pattern 적용</h2>\n<h3>Strategy Pattern 도입 배경</h3>\n<p>기존 Car 객체 설계 당시 단순히 <code class=\"language-text\">내부</code>에서 랜덤한 값을 활용하여 <code class=\"language-text\">이동 여부를 처리</code>하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_POSITION</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NAME_MAX_LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MIN_NUMBER_RANGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_NUMBER_RANGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MOVE_CONDITION</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_POSITION</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateLength</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token constant\">NAME_MAX_LENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Randoms</span><span class=\"token punctuation\">.</span><span class=\"token function\">pickNumberInRange</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MIN_NUMBER_RANGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MAX_NUMBER_RANGE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token constant\">MOVE_CONDITION</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>당장 구현에 문제는 없었지만 Car에 <code class=\"language-text\">많은 책임</code>을 가지고 있지 않은지에 대한 고민과 <code class=\"language-text\">단위 테스트 작성</code> 시 <code class=\"language-text\">move 메서드 내부를 제어</code>할 수 없기 때문에 정상적인 테스트를 작성하는데 제한이 되었다.</p>\n<p>그때 <code class=\"language-text\">Strategy Pattern</code>에 대해 공부하게 되었다. <code class=\"language-text\">Strategy Pattern</code>은 <code class=\"language-text\">실행 중</code>에 <code class=\"language-text\">알고리즘을 선택</code>할 수 있게 도와준다.</p>\n<p><code class=\"language-text\">Car</code>에서 <code class=\"language-text\">isMoving</code>을 전략으로 활용하여 <code class=\"language-text\">실행 시점</code>에 <code class=\"language-text\">이동 여부를 반환</code>할 수 있도록 적용하면 좋을 것 같다는 판단을 세우게 되었다.</p>\n<h3>Strategy Pattern 적용</h3>\n<h4>MovingPolicy</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MovingPolicy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다양한 <code class=\"language-text\">이동 정책</code>을 적용하기 위한 함수형 인터페이스이다.</p>\n<h4>RandomMovingPolicy</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomMovingPolicy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MovingPolicy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MIN_NUMBER_RANGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_NUMBER_RANGE</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MOVE_CONDITION</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Randoms</span><span class=\"token punctuation\">.</span><span class=\"token function\">pickNumberInRange</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MIN_NUMBER_RANGE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MAX_NUMBER_RANGE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token constant\">MOVE_CONDITION</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">MovingPolicy</code>의 구현체로 <code class=\"language-text\">RandomMovingPolicy</code>를 작성하였다. <code class=\"language-text\">RandomMovingPolicy</code>는 랜덤하게 수를 뽑아 이동 조건을 판단하여 이동 유무를 반환하는 <code class=\"language-text\">isMoving</code>메서드를 오버라이딩하였다.</p>\n<h4>변경된 Car</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_POSITION</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NAME_MAX_LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MovingPolicy</span> movingPolicy<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_POSITION</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MovingPolicy</span> movingPolicy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>movingPolicy <span class=\"token operator\">=</span> movingPolicy<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateLength</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token constant\">NAME_MAX_LENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>movingPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">isMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p><code class=\"language-text\">MovingPolicy</code>는 <code class=\"language-text\">Car</code> 생성 시점에 전략이 정해진다. 이제 MovingPolicy의 구현체를 다양하게 적용 가능하기 때문에 Car와 Car의 이동에 대한 <code class=\"language-text\">결합도</code>도 낮출 수 있는 결과를 만들었다.</p>\n<p>또한 추후에 요구사항 변경에 의해 다른 이동 정책이 추가되면 단순히 <code class=\"language-text\">MovingPolicy</code>를 구현하면 되기 때문에 쉽게 <code class=\"language-text\">확장</code>이 가능하다.</p>\n<h3>유연한 테스트 작성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CarTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"movingPolicy의 isMoving이 true이면 position이 1 증가한다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">move_IsMovingThenTrue_IncreasePosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">MovingPolicy</span> movingPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pobi\"</span><span class=\"token punctuation\">,</span> movingPolicy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        car<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"movingPolicy의 isMoving이 false이면 position은 정지한다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">move_IsMovingThenFalse_StopPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">MovingPolicy</span> movingPolicy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pobi\"</span><span class=\"token punctuation\">,</span> movingPolicy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        car<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">Car</code>의 <code class=\"language-text\">move</code>를 자유롭게 테스트 가능하다. 테스트 시점에 이동 정책을 생성한 뒤 <code class=\"language-text\">move</code>를 진행하면 반환된 결과에 따라 Car의 <code class=\"language-text\">position</code>이 변하는 것을 확인하였다.</p>\n<h2>5. 캡슐화</h2>\n<p>객체를 사용하면 변경 가능성이 높은 부분은 내부에 숨기고 외부에는 상대적으로 안정적인 부분만 공개함으로써 변경의 여파를 통제할 수 있다. <code class=\"language-text\">캡슐화</code>는 외부에서 알 필요가 없는 부분을 감춤으로써 대상을 단순화하는 추상화의 종류이다. <code class=\"language-text\">캡슐화</code>는 변경 가능성이 높은 부분을 객체 내부로 숨기는 추상화 기법이다.</p>\n<p>아래는 캡슐화를 잘 지키는 것 처럼 보인다. 인스턴스 변수는 <code class=\"language-text\">private</code>를 사용 하였고 해당 변수에 접근하기 위한 <code class=\"language-text\">public get/set 메서드</code>를 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> positon <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> position<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">get/set 메서드</code>들은 객체 내부를 <code class=\"language-text\">전혀 보호 하지 못하고 있다.</code> 오히려 내부의 <code class=\"language-text\">상태 정보를 그대로 보여주고 있다.</code></p>\n<p>객체는 <code class=\"language-text\">스스로의 상태를 책임</code>져야 하며 외부에서는 <code class=\"language-text\">인터페이스에 정의된 메서드</code>를 통해서만 상태에 접근할 수 있어야 한다.</p>\n<h3>Car 리스트를 가지는 일급 컬렉션 Cars</h3>\n<p>레이싱 게임에서 여러 개의 Car list 관리를 위해 <code class=\"language-text\">일급 컬렉션</code> <code class=\"language-text\">Cars</code>를 사용하였다. Cars에서는 Car의 <code class=\"language-text\">내부 상태인 position</code>을 활용하여 <code class=\"language-text\">우승자를 선정</code>하고 <code class=\"language-text\">name을 조회</code>해야 했다. 이것을 구현하기 위해서는 Car의 내부 상태를 드러내는 <code class=\"language-text\">get 메서드</code>가 불가피하게 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cars</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NEW_LINE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">WINNER_NAMES_DELIMITER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_MAX_POSITION</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span> cars<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cars</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MovingPolicy</span> movingPolicy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cars <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> movingPolicy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cars<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getExecutionResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> cars<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token operator\">::</span><span class=\"token function\">getStateMessage</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NEW_LINE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getWinnersNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> maxPosition <span class=\"token operator\">=</span> <span class=\"token function\">getMaxPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> cars<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>car <span class=\"token operator\">-></span> car<span class=\"token punctuation\">.</span><span class=\"token function\">isSamePosition</span><span class=\"token punctuation\">(</span>maxPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 불가피한 get 사용</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WINNER_NAMES_DELIMITER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> cars<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token operator\">::</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 불가피한 get 사용</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_MAX_POSITION</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결국 이것은 Cars와 Car의 <code class=\"language-text\">결합도를 강하게 만드는 원인</code>이 아닌가 고민하게 되었다. 그렇다고 해당 로직은 Car로 옮기기에는 억지로 책임을 부여하는 듯한 기분이 들었다. </p>\n<h3>protected</h3>\n<p><code class=\"language-text\">protected</code>는 상속, 같은 패키지 내의 클래스에 접근 가능하도록 하는 접근 제어자 이다. 즉 Cars와 Car를 <code class=\"language-text\">같은 패키지</code>에만 위치 시키면 다른 <code class=\"language-text\">외부 패키지</code>는 Car의 get 메서드에 접근할 수 없다. Cars에서만 사용을 제한시키면 어느정도 <code class=\"language-text\">캡슐화로 내부 상태를 지킬 수 있다</code>는 판단을 하게 되었다.</p>\n<p>Car의 메서드는 protected로 접근 제어자를 활용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">ZERO_INDEX</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MOVING_STICK</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>movingPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">isMoving</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStateMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME_MESSAGE</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token constant\">ZERO_INDEX</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MOVING_STICK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> position<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSamePosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">==</span> maxPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/144742656-7207a192-5d23-4b29-93d8-e80ccf207736.png\"></p>\n<p>이러한 패키지 구조를 갖기 때문에 외부 다른 패키지에서는 Car의 <code class=\"language-text\">protected</code> 메서드에 접근하지 못한다.</p>\n<h2>6. String의 split 메서드</h2>\n<p>기능 요구 사항을 살펴보면 자동차 이름은 쉼표(,)를 기준으로 구분하여 사용한다. Java에서 구분자를 통한 문자열을 나누기 위해서는 흔히 <code class=\"language-text\">split</code> 메서드를 활용한다.</p>\n<h3>split</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위는 String 클래스의 일부분을 가져온 것이다. split 메서드의 경우 서로 다른 매개변수 리스트를 가진 메서드로 오버로딩 되어 있다. 흔히 사용하는 <code class=\"language-text\">spit(String regex)</code>은 <code class=\"language-text\">limit</code>가 <code class=\"language-text\">0</code>으로 설정되어 반환한다.</p>\n<p>limit 매개변수는 패턴이 적용되는 횟수를 제어한다. n이 0보다 크면 패턴이 최대 n - 1회 적용되고 배열의 길이는 n보다 크지 않으면 배열의 마지막 항목에는 마지막 일치 구분 기호 이후의 모든 문자열이 포함된다. <code class=\"language-text\">n이 양수가 아닌 경우 패턴이 최대한 많이 적용되고 배열은 임의의 길이를 가질 수 있다.</code> n이 0이면 패턴은 가능한 많이 적용되고 배열은 임의의 길이를 가질 수 있으며 후행 빈 문자열은 폐기된다.</p>\n<p>여기서 limit에 음수 값을 넣어 나눌 경우 패턴이 최대한 많이 적용되며 빈문자열이 폐기되지 않고 나눠진다. 아래는 0을 넣었을 때와 음수를 넣었을 때의 차이를 비교한 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a,b,c,d,e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a,b,c,d,e,\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a,  ,b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", , , , \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",,,,\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"나눌 문자열: \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limt이  0일 때: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limt이 -1일 때: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">나눌 문자열: a,b,c,d,e\nlimt이  <span class=\"token number\">0</span>일 때: <span class=\"token punctuation\">[</span>a, b, c, d, e<span class=\"token punctuation\">]</span>\nlimt이 -1일 때: <span class=\"token punctuation\">[</span>a, b, c, d, e<span class=\"token punctuation\">]</span>\n\n나눌 문자열: a,b,c,d,e,\nlimt이  <span class=\"token number\">0</span>일 때: <span class=\"token punctuation\">[</span>a, b, c, d, e<span class=\"token punctuation\">]</span>\nlimt이 -1일 때: <span class=\"token punctuation\">[</span>a, b, c, d, e, <span class=\"token punctuation\">]</span>\n\n나눌 문자열: a,  ,b\nlimt이  <span class=\"token number\">0</span>일 때: <span class=\"token punctuation\">[</span>a,   , b<span class=\"token punctuation\">]</span>\nlimt이 -1일 때: <span class=\"token punctuation\">[</span>a,   , b<span class=\"token punctuation\">]</span>\n\n나눌 문자열: , , , , \nlimt이  <span class=\"token number\">0</span>일 때: <span class=\"token punctuation\">[</span>,  ,  ,  ,  <span class=\"token punctuation\">]</span>\nlimt이 -1일 때: <span class=\"token punctuation\">[</span>,  ,  ,  ,  <span class=\"token punctuation\">]</span>\n\n나눌 문자열: ,,,,\nlimt이  <span class=\"token number\">0</span>일 때: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nlimt이 -1일 때: <span class=\"token punctuation\">[</span>, , , , <span class=\"token punctuation\">]</span>\n\n나눌 문자열: a\nlimt이  <span class=\"token number\">0</span>일 때: <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span>\nlimt이 -1일 때: <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span></code></pre></div>\n<p>가장 큰 차이를 보이는 것은 <code class=\"language-text\">a,b,c,d,e,</code>와 <code class=\"language-text\">,,,,</code>이다. limit이 0일 때는 <code class=\"language-text\">후행 빈 문자열이 자동으로 폐기</code>되는 것을 확인할 수 있었다.</p>\n<p>이번 레이싱 게임을 진행하며 자동차의 <code class=\"language-text\">이름에 대한 검증</code>은 모두 <code class=\"language-text\">Car</code>가 책임을 가지도록 하였다. 하지만 자동차의 이름을 <code class=\"language-text\">split</code>하는 것은 <code class=\"language-text\">InputView</code>의 책임으로 설정하였다. 즉 <code class=\"language-text\">빈 문자열</code>이라도 <code class=\"language-text\">정확히 나눠서</code> list로 전달해야 했다. 그래야 온전히 나눠진 문자열 리스트의 요소를 Car에서 검증이 가능하기 때문이다.</p>\n<h3>InputView</h3>\n<p><code class=\"language-text\">InputView</code>는 레이싱 게임의 모든 입력을 위한 책임을 가지고 있다. 앞서 언급한 것 처럼 빈 문자열까지 정확히 나누기 위해 아래와 같이 작성하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_NAMES_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"경주할 자동차 이름을 입력하세요.(이름은 쉼표(,) 기준으로 구분)\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SPLIT_REGEX</span> <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">SPLIT_LIMIT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_NAMES_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> inputNames <span class=\"token operator\">=</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> inputNames<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_REGEX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SPLIT_LIMIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">String[] names = inputNames.split(SPLIT_REGEX, SPLIT_LIMIT)</code>을 활용하여 쉼표(,)를 기준으로 빈 문자열을 포함하여 문자열 리스트를 만들어 반환한다. 이것에 대한 검증은 단위 테스트를 활용하여 검증하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputViewTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNamesMethodSourceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pobi,woni,jun\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",,,,\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",pobi,\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" , ,, , \"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pobi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"경주할 자동차 이름을 입력 받으면 쉼표를 기준으로 나눠 리스트를 반환한다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ParameterizedTest</span>\n    <span class=\"token annotation punctuation\">@MethodSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getNamesMethodSourceProvider\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getNames_InputNames_ListReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputNames<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIn</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateStream</span><span class=\"token punctuation\">(</span>inputNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputView</span> inputView <span class=\"token operator\">=</span> <span class=\"token function\">generateInputView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names <span class=\"token operator\">=</span> inputView<span class=\"token punctuation\">.</span><span class=\"token function\">getNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>7. String + 연산자보다 StringBuilder</h2>\n<p>String은 <code class=\"language-text\">불변 객체</code>이다. <code class=\"language-text\">+ 연산자</code>를 통해 문자열 객체를 수정할 경우 매번 <code class=\"language-text\">새로운 인스턴스</code>를 생성한다. </p>\n<p>Car 객체를 살펴보면 자신의 상태 메시지 반환을 위해 해당 position의 개수 만큼 <code class=\"language-text\">-</code>을 그려야 한다. 여기서 단순히 문자열 + 연산자를 사용하기 보다 <code class=\"language-text\">가변적인 문자열에 특화된 StringBuilder</code>에 대해 학습하고 적용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">racingcar<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span>car</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">racingcar<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ErrorMessage</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NAME_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"%s : \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MOVING_STICK</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MovingPolicy</span> movingPolicy<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_POSITION</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStateMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME_MESSAGE</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token constant\">ZERO_INDEX</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MOVING_STICK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>8. 모든 원시값과 문자열을 포장하라</h2>\n<blockquote>\n<p>규칙3: 원시값과 문자열의 포장</p>\n<p>int 값 하나 자체는 그냥 아무 의미 없는 스칼라 값일 뿐이다. 어떤 메서드가 int 값을 매개변수로 받는다면 그 메서드 이름은 해당 매개변수의 의도를 나타내기 위해 모든 수단과 방법을 가리지 않아야 한다. </p>\n<p>원시형 변수로는 컴파일러가 의미적으로 맞는 프로그램 작성을 안내할 수 없다. 객체로라면 아주 사소하더라도 컴파일러와 프로그래머에게 그 값이 어떤 값이며, 왜 쓰고 있는지에 대한 정보를 전하는 셈이다.</p>\n</blockquote>\n<p><em><a href=\"http://www.yes24.com/Product/Goods/3290339\">소트웍스 앤솔러지</a>를 일부분 발췌한 내용입니다.</em></p>\n<h3>원시 타입을 포장해야 하는 이유</h3>\n<h4>자신의 상태를 스스로 관리할 수 있다</h4>\n<p>아래 코드는 프리코스 제출 코드 일부분을 가져온 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryCount</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tryCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TryCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tryCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">TryCount</code>는 시도 횟수인 <code class=\"language-text\">원시 타입 int</code>를 가진 클래스이다. 내부에 <code class=\"language-text\">tryCount라는 상태</code>를 가지고 있기 때문에 해당 원시 타입에 대한 검증은 <code class=\"language-text\">TryCount 내부</code>에서 적용 가능하다. </p>\n<h4>적용</h4>\n<p>기존에는 시도 횟수를 입력 받으면 <code class=\"language-text\">InputView</code>에서 <code class=\"language-text\">모든 검증</code>을 진행하였다. <code class=\"language-text\">getTryCount</code>는 검증이 진행되고 난 후 단순히 원시 타입 int를 반환하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_TRY_COUNT_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"시도할 회수는 몇회인가요?\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">ZERO_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getTryCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_TRY_COUNT_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> inputTryCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateNumberFormat</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> tryCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateNegativeNumber</span><span class=\"token punctuation\">(</span>tryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> tryCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNegativeNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parseTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parseTryCount <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ZERO_NUMBER</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>이제 <code class=\"language-text\">TryCount</code>로 원시 타입을 포장한 뒤 모든 검증을 객체 내부로 이동시켰다. TryCount는 내부 상태에 대한 검증 및 책임을 모두 가지고 있다. 또한 내부 상태를 활용하는 행위가 필요하다면 단순히 추가해주기면 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TryCount</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">ZERO_NUMBER</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tryCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TryCount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateNumberFormat</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> tryCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateNegativeNumber</span><span class=\"token punctuation\">(</span>tryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tryCount <span class=\"token operator\">=</span> tryCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NUMBER_FORMAT_NOT_VALID</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNegativeNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parseTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parseTryCount <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ZERO_NUMBER</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NEGATIVE_NUMBER_NOT_VALID</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개선된 <code class=\"language-text\">InputView</code>이다. 오직 입력에 대한 책임을 뚜렷하게 나타내기 위해 노력하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InputView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_NAMES_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"경주할 자동차 이름을 입력하세요.(이름은 쉼표(,) 기준으로 구분)\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INPUT_TRY_COUNT_MESSAGE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"시도할 회수는 몇회인가요?\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SPLIT_REGEX</span> <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">SPLIT_LIMIT</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_NAMES_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> inputNames <span class=\"token operator\">=</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> inputNames<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLIT_REGEX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SPLIT_LIMIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TryCount</span> <span class=\"token function\">getTryCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_TRY_COUNT_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> inputTryCount <span class=\"token operator\">=</span> <span class=\"token class-name\">Console</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TryCount</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>9. 단위 테스트 명명법</h2>\n<p>단위 테스트를 진행하며 이름을 짓고 명명법을 통일하기 위해 많은 고민을 하였다. 그러던 중 <a href=\"https://dzone.com/articles/7-popular-unit-test-naming\">7 Popular Unit Test Naming Conventions</a>을 발견하게 되었다. </p>\n<p>크게 7가지 방법을 소개하고 있다. 우선 좋은 명명법 보다 통일성 있는 이름과 단위 테스트의 퀄리티를 올리기 위해 1번을 선택하게 되었다. </p>\n<p>1번 방법의 단점으로는 테스트 하고자 하는 <code class=\"language-text\">메서드의 이름을 포함하여 이름 짓기 때문에 메서드가 변경되면 단위 테스트 또한 변경을 진행해야 한다.</code> 덕분에 이러한 단점을 확실히 느낄 수 있는 계기가 되었다.</p>\n<p>아래는 실제 작성한 단위 테스트의 일부를 가져온 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TryCountTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문자열 시도 횟수가 숫자이고 음수가 아니면 정상적으로 생성된다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ParameterizedTest</span>\n    <span class=\"token annotation punctuation\">@ValueSource</span><span class=\"token punctuation\">(</span>strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">constructor_InputTryCountThenNumberFormatAndNotNegativeNumber_Success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given &amp; when &amp; then</span>\n        <span class=\"token function\">assertThatCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">TryCount</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doesNotThrowAnyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문자열 시도 횟수가 숫자가 아니면 예외를 던진다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@ParameterizedTest</span>\n    <span class=\"token annotation punctuation\">@ValueSource</span><span class=\"token punctuation\">(</span>strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"1a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3a0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4O\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"s5\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">constructor_InputTryCountThenNotNumberFormat_ExceptionThrown</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputTryCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given &amp; when &amp; then</span>\n        <span class=\"token function\">assertThatThrownBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">TryCount</span><span class=\"token punctuation\">(</span>inputTryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>익숙하지 않은 방식이었고 생성자의 경우 어떤식으로 명명해야 하는지 고민이 많았다. 다양한 코드를 접하며 더 좋은 명명법을 적용하기 위해 노력해야 겠다.</p>\n<h2>10. git rebase</h2>\n<p>진행 도중 테스트 코드 일부분이 수정되어 main에서 병합을 진행해야 하는 상황이 주어졌다. 관련 방법을 찾던 도중 <code class=\"language-text\">rebase</code>를 활용하여 적용하기로 결정하였다.</p>\n<h2>References</h2>\n<h3>매직 넘버, 매직 리터럴</h3>\n<ul>\n<li><a href=\"https://slipp.net/questions/356\">magic number 사용을 최대한 자제하자.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad\">What is a magic number, and why is it bad?</a></li>\n<li><a href=\"https://javabom.tistory.com/28\">1. 의미가 불분명한 매직 넘버를 상수로 선언하라.</a></li>\n</ul>\n<h3>캡슐화</h3>\n<ul>\n<li>조영호, 『오브젝트』, 위키북스(2019), p113-132.</li>\n</ul>\n<h3>String split</h3>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-int-\">Class String</a></li>\n</ul>\n<h3>모든 원시값과 문자열을 포장하라</h3>\n<ul>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2020-05-29-wrap-primitive-type/\">원시 타입을 포장해야 하는 이유</a></li>\n<li><a href=\"https://livenow14.tistory.com/37\">[Java] 원시값 포장이란?</a></li>\n<li><a href=\"https://developerfarm.wordpress.com/2012/01/27/object_calisthenics_4/\">더 나은 소프트웨어를 향한 9단계: 객체지향 생활 체조(4)</a></li>\n</ul>\n<h3>테스트 코드 명명법</h3>\n<ul>\n<li><a href=\"https://dzone.com/articles/7-popular-unit-test-naming\">7 Popular Unit Test Naming Conventions</a></li>\n</ul>","frontmatter":{"title":"프리코스 2주차","date":"November 08, 2021","update":"November 08, 2021","tags":["우아한테크코스","프리코스"],"series":"우아한테크코스 4기 프리코스"},"fields":{"slug":"/precourse-2/","readingTime":{"minutes":37.69}}},"seriesList":{"edges":[{"node":{"id":"789c6ea4-3527-5953-b8a0-7018cb7c2cea","fields":{"slug":"/precourse-1/"},"frontmatter":{"title":"프리코스 1주차"}}},{"node":{"id":"3e440879-b393-5bfe-98b7-c97f07f9ad94","fields":{"slug":"/precourse-2/"},"frontmatter":{"title":"프리코스 2주차"}}},{"node":{"id":"51d28271-7e5f-5e6a-9b59-8e8b82bb2903","fields":{"slug":"/precourse-3/"},"frontmatter":{"title":"프리코스 3주차"}}},{"node":{"id":"82313531-fb31-5b67-8ace-a356ec4bc3e3","fields":{"slug":"/precourse-pass/"},"frontmatter":{"title":"우아한테크코스 프리코스 후기"}}}]},"previous":{"fields":{"slug":"/precourse-1/"},"frontmatter":{"title":"프리코스 1주차"}},"next":{"fields":{"slug":"/precourse-3/"},"frontmatter":{"title":"프리코스 3주차"}}},"pageContext":{"id":"3e440879-b393-5bfe-98b7-c97f07f9ad94","series":"우아한테크코스 4기 프리코스","previousPostId":"789c6ea4-3527-5953-b8a0-7018cb7c2cea","nextPostId":"51d28271-7e5f-5e6a-9b59-8e8b82bb2903"}},"staticQueryHashes":[],"slicesMap":{}}