{"componentChunkName":"component---src-templates-series-jsx","path":"/series/스프링이-개선한-트랜잭션/","result":{"data":{"posts":{"nodes":[{"excerpt":"작성에 사용된 예제 코드는 spring-transaction에서 확인해볼 수 있다. 트랜잭션은 논리적인 작업 셋을 모두 완벽하게 처리하거나, 처리하지 못할 경우 원래 상태로 복구하여 작업의 일부만 적용되는 현상(Partial update)을 막아준다. 또한 트랜잭션은 하나의 논리적인 작업 셋의 쿼리 개수와 관계없이 논리적인 작업 셋 자체가 전부 적용(CO…","fields":{"slug":"/spring-transaction-1/"},"frontmatter":{"date":"December 09, 2022","update":"Dec 09, 2022","title":"스프링이 개선한 트랜잭션 (1)","tags":["스프링","트랜잭션"]}},{"excerpt":"작성에 사용된 예제 코드는 spring-transaction에서 확인해볼 수 있다. 이전 시간에 트랜잭션 추상화를 통해 여러 데이터 접근 기술 변경에 유연한 구조를 만들었다. 또한 트랜잭션 동기화를 통해 멀티 스레드 환경에서도 별도의 커넥션 객체를 사용하여 독립적으로 트랜잭션이 적용될 수 있도록 구현하였다.  이번 시간에는 템플릿 콜백 패턴을 활용한 과 …","fields":{"slug":"/spring-transaction-2/"},"frontmatter":{"date":"December 10, 2022","update":"Dec 10, 2022","title":"스프링이 개선한 트랜잭션 (2)","tags":["스프링","트랜잭션"]}}]}},"pageContext":{"series":"스프링이 개선한 트랜잭션"}},"staticQueryHashes":[],"slicesMap":{}}