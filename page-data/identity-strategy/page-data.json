{"componentChunkName":"component---src-templates-post-jsx","path":"/identity-strategy/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"c8dda97d-41c7-5596-a0c8-703fd69d92e7","excerpt":"개요 기본 키 할당 전략에 대한 학습을 진행하고 있었다. 기본 키 전략을 로 진행하면 데이터베이스에게 키 생성을 위임하기 때문에 JPA에서 기본 키 값을 얻어오기 위해서는 추가적인 데이터베이스 조회가 필요하다. 하지만 저장 관련 테스트를 진행했을 때 어디에도 조회와 관련된 쿼리는 찾을 수 없었다. 이게 어떻게 된 일인지 알아보려 한다. IDENTITY 앞…","html":"<p><img src=\"https://user-images.githubusercontent.com/59357153/152970395-a31c8134-fc89-449f-b4dc-441e03df929c.png\"></p>\n<h2>개요</h2>\n<p>기본 키 할당 전략에 대한 학습을 진행하고 있었다. 기본 키 전략을 <code class=\"language-text\">IDENTITY</code>로 진행하면 데이터베이스에게 키 생성을 위임하기 때문에 JPA에서 기본 키 값을 얻어오기 위해서는 추가적인 데이터베이스 조회가 필요하다. 하지만 저장 관련 테스트를 진행했을 때 어디에도 조회와 관련된 쿼리는 찾을 수 없었다. 이게 어떻게 된 일인지 알아보려 한다.</p>\n<h2>IDENTITY</h2>\n<p>앞서 언급한 것 처럼 <code class=\"language-text\">IDENTITY</code>는 기본 키 생성을 위한 전략을 데이터베이스에 위임 하는 것이다. <code class=\"language-text\">MySQL</code>은 보통 기본 키 자동 생성을 위해 <code class=\"language-text\">AUTO_INCREMENT</code>을 활용한다. 아래와 같이 <code class=\"language-text\">DDL</code>을 작성하면 INSERT할 때 자동으로 기본 키가 채워진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> station <span class=\"token punctuation\">(</span>\n   id <span class=\"token keyword\">bigint</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만 기본 키 생성을 데이터베이스에서 진행할 경우 값이 저장되야 비로소 기본 키 값을 확인할 수 있다. 이제 JPA에 해당 전략을 적용하면 아래와 같이 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Station</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Station</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Station</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단한 예시를 위한 지하철 엔티티이다. 지하철은 이름을 가질 수 있고 기본 키 생성 전략은 <code class=\"language-text\">IDENTITY</code>이므로 데이터베이스에서 자동으로 생성된다. 만약 기본 키가 필요한 경우 조회를 위한 추가적인 쿼리가 필요할 것이다.</p>\n<p>이제 <code class=\"language-text\">Station</code>을 저장하고 id값을 조회하는 테스트를 작성한 뒤 실행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DataJpaTest</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StationRepositoryTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">StationRepository</span> stationRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Station</span> station <span class=\"token operator\">=</span> stationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Station</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잠실역\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>station<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>station<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잠실역\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2022</span>-07-10 00:56:55.797  INFO <span class=\"token number\">99986</span> --- <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> o.h.e.t.j.p.i.JtaPlatformInitiator       <span class=\"token builtin class-name\">:</span> HHH000490: Using JtaPlatform implementation: <span class=\"token punctuation\">[</span>org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform<span class=\"token punctuation\">]</span>\n<span class=\"token number\">2022</span>-07-10 00:56:55.806  INFO <span class=\"token number\">99986</span> --- <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> j.LocalContainerEntityManagerFactoryBean <span class=\"token builtin class-name\">:</span> Initialized JPA EntityManagerFactory <span class=\"token keyword\">for</span> persistence unit <span class=\"token string\">'default'</span>\n<span class=\"token number\">2022</span>-07-10 00:56:56.498  INFO <span class=\"token number\">99986</span> --- <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> subway.domain.StationRepositoryTest      <span class=\"token builtin class-name\">:</span> Started StationRepositoryTest <span class=\"token keyword\">in</span> <span class=\"token number\">2.891</span> seconds <span class=\"token punctuation\">(</span>JVM running <span class=\"token keyword\">for</span> <span class=\"token number\">3.606</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2022</span>-07-10 00:56:56.524  INFO <span class=\"token number\">99986</span> --- <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> o.s.t.c.transaction.TransactionContext   <span class=\"token builtin class-name\">:</span> Began transaction <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">test</span> context <span class=\"token punctuation\">[</span>DefaultTestContext@6a362409 testClass <span class=\"token operator\">=</span> StationRepositoryTest, testInstance <span class=\"token operator\">=</span> subway.domain.StationRepositoryTest@2aa5eecd, testMethod <span class=\"token operator\">=</span> save@StationRepositoryTest, testException <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>null<span class=\"token punctuation\">]</span>, mergedContextConfiguration <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MergedContextConfiguration@36ea6a37 testClass <span class=\"token operator\">=</span> StationRepositoryTest, locations <span class=\"token operator\">=</span> <span class=\"token string\">'{}'</span>, classes <span class=\"token operator\">=</span> <span class=\"token string\">'{class subway.Application}'</span>, contextInitializerClasses <span class=\"token operator\">=</span> <span class=\"token string\">'[]'</span>, activeProfiles <span class=\"token operator\">=</span> <span class=\"token string\">'{}'</span>, propertySourceLocations <span class=\"token operator\">=</span> <span class=\"token string\">'{}'</span>, propertySourceProperties <span class=\"token operator\">=</span> <span class=\"token string\">'{org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}'</span>, contextCustomizers <span class=\"token operator\">=</span> set<span class=\"token punctuation\">[</span>org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory<span class=\"token variable\">$DisableAutoConfigurationContextCustomizer</span>@3258d1dc, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory<span class=\"token variable\">$DisableMetricExportContextCustomizer</span>@4b4d3ed5, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@e1aa1b8f, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory<span class=\"token variable\">$Customizer</span>@22a24ec8, <span class=\"token punctuation\">[</span>ImportsContextCustomizer@84d34eb key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@3df27965, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory<span class=\"token variable\">$DuplicateJsonObjectContextCustomizer</span>@2794add4, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@0<span class=\"token punctuation\">]</span>, contextLoader <span class=\"token operator\">=</span> <span class=\"token string\">'org.springframework.boot.test.context.SpringBootContextLoader'</span>, parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>null<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, attributes <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span><span class=\"token string\">'org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents'</span> -<span class=\"token operator\">></span> false<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> transaction manager <span class=\"token punctuation\">[</span>org.springframework.orm.jpa.JpaTransactionManager@11ce4c44<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> rollback <span class=\"token punctuation\">[</span>true<span class=\"token punctuation\">]</span>\nHibernate: \n    insert \n    into\n        station\n        <span class=\"token punctuation\">(</span>id, name<span class=\"token punctuation\">)</span> \n    values\n        <span class=\"token punctuation\">(</span>null, ?<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2022</span>-07-10 00:56:56.612 TRACE <span class=\"token number\">99986</span> --- <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> o.h.type.descriptor.sql.BasicBinder      <span class=\"token builtin class-name\">:</span> binding parameter <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> as <span class=\"token punctuation\">[</span>VARCHAR<span class=\"token punctuation\">]</span> - <span class=\"token punctuation\">[</span>잠실역<span class=\"token punctuation\">]</span>\n<span class=\"token number\">2022</span>-07-10 00:56:56.671  INFO <span class=\"token number\">99986</span> --- <span class=\"token punctuation\">[</span>    Test worker<span class=\"token punctuation\">]</span> o.s.t.c.transaction.TransactionContext   <span class=\"token builtin class-name\">:</span> Rolled back transaction <span class=\"token keyword\">for</span> test: <span class=\"token punctuation\">[</span>DefaultTestContext@6a362409 testClass <span class=\"token operator\">=</span> StationRepositoryTest, testInstance <span class=\"token operator\">=</span> subway.domain.StationRepositoryTest@2aa5eecd, testMethod <span class=\"token operator\">=</span> save@StationRepositoryTest, testException <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>null<span class=\"token punctuation\">]</span>, mergedContextConfiguration <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>MergedContextConfiguration@36ea6a37 testClass <span class=\"token operator\">=</span> StationRepositoryTest, locations <span class=\"token operator\">=</span> <span class=\"token string\">'{}'</span>, classes <span class=\"token operator\">=</span> <span class=\"token string\">'{class subway.Application}'</span>, contextInitializerClasses <span class=\"token operator\">=</span> <span class=\"token string\">'[]'</span>, activeProfiles <span class=\"token operator\">=</span> <span class=\"token string\">'{}'</span>, propertySourceLocations <span class=\"token operator\">=</span> <span class=\"token string\">'{}'</span>, propertySourceProperties <span class=\"token operator\">=</span> <span class=\"token string\">'{org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}'</span>, contextCustomizers <span class=\"token operator\">=</span> set<span class=\"token punctuation\">[</span>org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory<span class=\"token variable\">$DisableAutoConfigurationContextCustomizer</span>@3258d1dc, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory<span class=\"token variable\">$DisableMetricExportContextCustomizer</span>@4b4d3ed5, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@e1aa1b8f, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory<span class=\"token variable\">$Customizer</span>@22a24ec8, <span class=\"token punctuation\">[</span>ImportsContextCustomizer@84d34eb key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@3df27965, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory<span class=\"token variable\">$DuplicateJsonObjectContextCustomizer</span>@2794add4, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1, org.springframework.boot.test.context.SpringBootTestWebEnvironment@0<span class=\"token punctuation\">]</span>, contextLoader <span class=\"token operator\">=</span> <span class=\"token string\">'org.springframework.boot.test.context.SpringBootContextLoader'</span>, parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>null<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, attributes <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span><span class=\"token string\">'org.springframework.test.context.event.ApplicationEventsTestExecutionListener.recordApplicationEvents'</span> -<span class=\"token operator\">></span> false<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">2022</span>-07-10 00:56:56.683  INFO <span class=\"token number\">99986</span> --- <span class=\"token punctuation\">[</span>extShutdownHook<span class=\"token punctuation\">]</span> j.LocalContainerEntityManagerFactoryBean <span class=\"token builtin class-name\">:</span> Closing JPA EntityManagerFactory <span class=\"token keyword\">for</span> persistence unit <span class=\"token string\">'default'</span>\nBUILD SUCCESSFUL <span class=\"token keyword\">in</span> 4s</code></pre></div>\n<p>쿼리 로그를 살펴보면 insert와 관련된 쿼리를 제외하곤 전혀 찾아볼 수 없다. 또한 위 테스트는 정상적으로 실행되므로 id 값은 적절히 잘 조회 되었을 것이다.</p>\n<h2>기본 키 조회 쿼리는 어디에?</h2>\n<p><code class=\"language-text\">IDENTITY</code> 전략은 <code class=\"language-text\">JDBC</code>에 <code class=\"language-text\">Statement</code>의 <code class=\"language-text\">getGeneratedKeys()</code> 메서드를 통해 데이터를 저장과 동시에 기본키를 얻어 올 수 있다. JPA의 구현체인 hibernate는 이 메서드를 활용하여 데이터베이스와 한 번의 통신으로 처리한다. 즉 생성과 동시에 기본 키를 얻어오기 때문에 한 번의 <code class=\"language-text\">INSERT</code>로 해결할 수 있다.</p>\n<p><code class=\"language-text\">getGeneratedKeys</code>의 공식 문서를 살펴보면 아래와 같은 내용을 확인할 수 있다.</p>\n<h3>공식 문서 중 일부</h3>\n<p>Retrieves any auto-generated keys created as a result of executing this Statement object. If this Statement object did not generate any keys, an empty ResultSet object is returned.</p>\n<p><strong>Statement로 실행한 결과로 생성된 자동 생성 키를 검색한다. 만약 Statement 객체가 키를 생성하지 않은 경우 빈 ResultSet을 반환한다.</strong></p>\n<p>Note: If the columns which represent the auto-generated keys were not specified, the JDBC driver implementation will determine the columns which best represent the auto-generated keys.</p>\n<p><strong>참고: 자동 생성된 키를 나타내는 열이 지정되지 않은 경우 JDBC 드라이버 구현에 따라 자동 생성된 키를 가장 잘 나타내는 열이 결정된다.</strong></p>\n<p>Returns: a ResultSet object containing the auto-generated key(s) generated by the execution of this Statement object</p>\n<p><strong>반환: Statement 객체의 실행으로 생성된 자동 생성 키가 들어 있는 ResultSet 객체이다.</strong></p>\n<p><code class=\"language-text\">Statement</code> 인터페이스는 현재 h2 드라이버의 의존성을 추가한 프로젝트 에서 작성하였기 때문에 내부에 구현체 <code class=\"language-text\">JdbcStatement</code>를 사용하고 있다. 간단히 디버그 모드를 통해 save 시점에 해당 메서드가 사용되는지 확인한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/59357153/178113850-3ae31510-548a-46d2-b98b-ff7e5474356a.png\"></p>\n<h2>정리</h2>\n<p><code class=\"language-text\">IDENTITY</code> 전략은 <code class=\"language-text\">INSERT</code> 이후 기본 키에 대한 조회를 진행할 수 있다. 즉 데이터베이스에 추가적인 조회가 필요하다. 하지만 JDBC Statement의 <code class=\"language-text\">getGeneratedKeys</code> 메서드 덕분에 데이터 저장과 동시에 기본 키를 얻을 수 있다.</p>\n<h3>참고 사항</h3>\n<p>JPA에서 엔티티는 영속 상태가 되기 위해 식별자를 반드시 필요로 한다. IDENTITY의 경우 데이터베이스에 저장되어야 식별자를 조회할 수 있는 특성으로 인해 트랜잭션이 지원하는 쓰기 지연을 활용할 수 없다. 즉 영속 시키는 즉시 데이터베이스에 쿼리를 전달한다.</p>\n<h2>References.</h2>\n<p><a href=\"https://www.baeldung.com/jdbc-returning-generated-keys\">Returning the Generated Keys in JDBC</a> <br>\n<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.sql/java/sql/Statement.html#getGeneratedKeys()\">Interface Statement</a> <br>\n김영한 지음, 『자바 ORM 표준 JPA 프로그래밍』, 에이콘(2015), p133-135.</p>","frontmatter":{"title":"IDENTITY 전략는 추가 조회를 하지 않을 수 있다.","date":"July 10, 2022","update":"July 10, 2022","tags":["우아한테크코스","jpa","IDENTITY"],"series":null},"fields":{"slug":"/identity-strategy/","readingTime":{"minutes":7.36}}},"seriesList":{"edges":[{"node":{"id":"2dac6856-47a1-5ef0-9c9f-d69d4234afcf","fields":{"slug":"/why-jdbc-template/"},"frontmatter":{"title":"JdbcTemplate는 어디에?"}}},{"node":{"id":"b77737b7-c888-54d0-8901-9921b4bbb703","fields":{"slug":"/spring-jdbc-batch/"},"frontmatter":{"title":"Spring JDBC로 batch 활용하기"}}},{"node":{"id":"59e94329-3d48-53b9-9995-90d61432234d","fields":{"slug":"/local-date-time/"},"frontmatter":{"title":"java에서 날짜, 시간 제대로 사용하기"}}},{"node":{"id":"c8dda97d-41c7-5596-a0c8-703fd69d92e7","fields":{"slug":"/identity-strategy/"},"frontmatter":{"title":"IDENTITY 전략는 추가 조회를 하지 않을 수 있다."}}},{"node":{"id":"c50af7e8-5953-5168-b4af-1d186a4254a7","fields":{"slug":"/separated-interface/"},"frontmatter":{"title":"외부와 의존성 분리하기"}}},{"node":{"id":"ba9d009e-d6e8-574f-9f7b-89819e3e57ca","fields":{"slug":"/properties-to-object/"},"frontmatter":{"title":"properties 객체로 다루기"}}},{"node":{"id":"7b780208-a850-5305-a51c-f0937cbdaf93","fields":{"slug":"/google-refresh-token/"},"frontmatter":{"title":"Google은 Refresh Token을 쉽게 내주지 않는다."}}},{"node":{"id":"58f32f4d-b2d6-54d6-b3dd-cb4cf4da1d70","fields":{"slug":"/basic-tomcat/"},"frontmatter":{"title":"Tomcat"}}},{"node":{"id":"d26e840e-0646-5dd9-a2d5-5670ddc81ede","fields":{"slug":"/jdbc/"},"frontmatter":{"title":"JDBC"}}},{"node":{"id":"e0a32367-096e-595a-9580-0d3d2fc6e9aa","fields":{"slug":"/template-callback/"},"frontmatter":{"title":"jdbcTemplate을 만들며 마주한 Template Callback 패턴"}}},{"node":{"id":"fa938264-2615-556e-bcfa-d749c30aa8fe","fields":{"slug":"/covering-index/"},"frontmatter":{"title":"커버링 인덱스"}}},{"node":{"id":"cf3a2936-1b1f-5d11-832e-dbb9f8051755","fields":{"slug":"/osiv/"},"frontmatter":{"title":"OSIV와 사용하며 직면한 문제"}}},{"node":{"id":"53859931-2807-5303-a90d-33df33a856de","fields":{"slug":"/save-persist-merge/"},"frontmatter":{"title":"SimpleJpaRepository의 save()는 어떻게 새로운 엔티티를 판단할까?"}}},{"node":{"id":"09a96ca9-bb95-55ab-83cf-d9d053b2ad70","fields":{"slug":"/optimistic-locking/"},"frontmatter":{"title":"낙관적 락과 동시성 테스트"}}},{"node":{"id":"647737e4-08ec-5813-a092-c27ef1da4292","fields":{"slug":"/java-string/"},"frontmatter":{"title":"문자열 생성 방식 비교하기"}}},{"node":{"id":"696ee6ba-c2ea-5e8b-a25f-aaa4eccfa5e9","fields":{"slug":"/2022-retrospect/"},"frontmatter":{"title":"조금 늦은 2022년 회고"}}},{"node":{"id":"5a61e41a-16ff-5669-bf0e-028ea40e0af3","fields":{"slug":"/jpa-auditing/"},"frontmatter":{"title":"Spring Data JPA Auditing"}}}]},"previous":{"fields":{"slug":"/local-date-time/"},"frontmatter":{"title":"java에서 날짜, 시간 제대로 사용하기"}},"next":{"fields":{"slug":"/separated-interface/"},"frontmatter":{"title":"외부와 의존성 분리하기"}}},"pageContext":{"id":"c8dda97d-41c7-5596-a0c8-703fd69d92e7","series":null,"previousPostId":"59e94329-3d48-53b9-9995-90d61432234d","nextPostId":"c50af7e8-5953-5168-b4af-1d186a4254a7"}},"staticQueryHashes":[],"slicesMap":{}}