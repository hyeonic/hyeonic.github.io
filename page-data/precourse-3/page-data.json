{"componentChunkName":"component---src-templates-post-jsx","path":"/precourse-3/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"51d28271-7e5f-5e6a-9b59-8e8b82bb2903","excerpt":"미션 - 자판기 우아한테크코스 4기 프리코스 3주차 미션을 진행하며 고민한 내용을 정리하고 추가적인 개인 목표를 세워 정리해보았다.  미션 - 자동차 경주 게임 제출 코드 목차 1. 시작하기 전 2. 구현 목록 정리 3. Can’t automatically merge 4. MVC 패턴 5. 비즈니스 로직과 UI 로직 분리 6. Stream 활용 7. en…","html":"<h2>미션 - 자판기</h2>\n<p>우아한테크코스 4기 프리코스 3주차 미션을 진행하며 고민한 내용을 정리하고 추가적인 개인 목표를 세워 정리해보았다. </p>\n<ul>\n<li><a href=\"https://github.com/hyeonic/java-vendingmachine-precourse\">미션 - 자동차 경주 게임</a></li>\n<li><a href=\"https://github.com/hyeonic/java-vendingmachine-precourse/tree/hyeonic\">제출 코드</a></li>\n</ul>\n<h2>목차</h2>\n<ul>\n<li><a href=\"#_1-%E1%84%89%E1%85%B5%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5-%E1%84%8C%E1%85%A5%E1%86%AB\">1. 시작하기 전</a></li>\n<li><a href=\"#_2-%E1%84%80%E1%85%AE%E1%84%92%E1%85%A7%E1%86%AB-%E1%84%86%E1%85%A9%E1%86%A8%E1%84%85%E1%85%A9%E1%86%A8-%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%B5\">2. 구현 목록 정리</a></li>\n<li><a href=\"#_1-can-t-automatically-merge\">3. Can’t automatically merge</a></li>\n<li><a href=\"#_4-mvc-%E1%84%91%E1%85%A2%E1%84%90%E1%85%A5%E1%86%AB\">4. MVC 패턴</a></li>\n<li><a href=\"#_5-%E1%84%87%E1%85%B5%E1%84%8C%E1%85%B3%E1%84%82%E1%85%B5%E1%84%89%E1%85%B3-%E1%84%85%E1%85%A9%E1%84%8C%E1%85%B5%E1%86%A8%E1%84%80%E1%85%AA-ui-%E1%84%85%E1%85%A9%E1%84%8C%E1%85%B5%E1%86%A8-%E1%84%87%E1%85%AE%E1%86%AB%E1%84%85%E1%85%B5\">5. 비즈니스 로직과 UI 로직 분리</a></li>\n<li><a href=\"#_6-stream-%E1%84%92%E1%85%AA%E1%86%AF%E1%84%8B%E1%85%AD%E1%86%BC\">6. Stream 활용</a></li>\n<li><a href=\"#_7-enum\">7. enum</a></li>\n<li><a href=\"#_8-%E1%84%80%E1%85%A2%E1%86%A8%E1%84%8E%E1%85%A6%E1%84%8B%E1%85%A6%E1%84%80%E1%85%A6-%E1%84%86%E1%85%A6%E1%84%89%E1%85%B5%E1%84%8C%E1%85%B5-%E1%84%87%E1%85%A9%E1%84%82%E1%85%A2%E1%84%80%E1%85%B5\">8. 객체에게 메시지 보내기</a></li>\n<li><a href=\"#_9-%E1%84%80%E1%85%AA%E1%84%83%E1%85%A9%E1%84%92%E1%85%A1%E1%86%AB-%E1%84%80%E1%85%A5%E1%86%B7%E1%84%8C%E1%85%B3%E1%86%BC-%E1%84%8F%E1%85%A9%E1%84%83%E1%85%B3%E1%84%8B%E1%85%AA-%E1%84%8E%E1%85%A2%E1%86%A8%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%8B%E1%85%B4-%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A5%E1%86%AB\">9. 과도한 검증 코드와 책임의 이전</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<h2>1. 시작하기 전</h2>\n<p>이번 주차에는 다시 한 번 초심으로 돌아가 기존에 주어진 <code class=\"language-text\">1, 2차 피드백</code>을 최대한 수용하고 객체의 <code class=\"language-text\">결합도는 줄이고 응집도를 높이기</code> 위해 노력하였다. </p>\n<p>3차 미션은 확실히 1, 2차보다 난이도가 높다는 느낌이 들었다. 이전에는 객체의 역할이 뚜렷하게 머리에 그려졌지만 다소 복잡한 자판기 로직으로 인해 객체에게 적절한 <code class=\"language-text\">역할</code>과 <code class=\"language-text\">책임</code>을 부여하는데 오랜 시간이 걸렸다. </p>\n<p>또한 현재 진행하고 있는 방식이 적절한지 끊임 없이 의심하였다. 특히 객체의 <code class=\"language-text\">응집도</code>를 높이기 위해 단순히 반복되는 검증 코드들을 남발하는 것이 아닌지 고민이 되었다. 이것은 결국 좋은 설계를 위한 <code class=\"language-text\">트레이드 오프</code>의 과정이라고 생각된다.</p>\n<h2>2. 구현 목록 정리</h2>\n<p>2주차 공통 피드백에는 아래와 같은 내용이 담겨 있었다.</p>\n<blockquote>\n<p>기능 목록 구현을 재검토한다</p>\n</blockquote>\n<blockquote>\n<p>기능 목록을 클래스 설계와 구현, 함수(메서드) 설계와 구현과 같이 너무 상세하게 작성하지 않는다. 클래스 이름, 함수(메서드) input/output은 언제든지 변경될 수 있기 때문이다. 너무 세세한 부분까지 정리하기보다 구현해야 할 기능 목록을 정리하는 데 집중한다. <strong>정상적인 경우도 중요하지만, 예외적인 상황도 기능 목록에 정리</strong> 한다. 특히 예외 상황은 시작단계에서 모두 찾기 힘들기 때문에 기능을 구현하면서 계속해서 추가해 나간다.</p>\n</blockquote>\n<h4>기능 목록 작성 예시</h4>\n<ul>\n<li>사용자가 입력한 이름은 쉼표 기준으로 분리해야 한다.</li>\n<li>사용자 이름이 5자 이하인지 검증해야 한다.</li>\n<li>자동차는 4 이상인 경우 전진한다.</li>\n<li>자동차는 4 미만인 경우 정지한다.</li>\n<li>0 ~ 9 사이의 임의의 값을 생성한다.</li>\n<li>여러 대의 자동차 중 최대 위칫값을 구한다.</li>\n<li>최대 위칫값에 해당하는 자동차 목록을 구한다.</li>\n</ul>\n<p>우선 구현해야 할 기능 목록을 정리하는 데 집중하기 위해 노력하였다. 기능 목록을 작성하고 개발을 진행하던 중에도 계속해서 고려해야 할 예외나 요구사항들이 생겨 났다. 그럴 때 마다 적절히 수정하여 <code class=\"language-text\">살아 있는 문서</code>를 만들기 위해 노력하였다.</p>\n<details>\n<summary>ver 0.1 기능 목록</summary>\n<p>반환되는 동전이 최소한이 되는 자판기를 구현한다.</p>\n<h3>1. 보유 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액으로 동전을 <code class=\"language-text\">무작위</code>로 생성한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 생성이 완료되면 동전 별 보유 개수를 <code class=\"language-text\">출력</code>한다. 보유 개수가 0개인 경우에도 출력을 진행한다.</li>\n</ul>\n<h3>2. 투입 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액으로는 동전을 생성하지 않는다.</li>\n</ul>\n<h3>3. 상품</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품명</code>, <code class=\"language-text\">가격</code>, <code class=\"language-text\">수량</code>을 <code class=\"language-text\">입력</code>하여 상품을 추가한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 개별 상품은 대괄호<code class=\"language-text\">[]</code>로 묶어 세미콜론<code class=\"language-text\">;</code>으로 구분한다. ex) <code class=\"language-text\">[콜라,1500,20];[사이다,1000,10]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 개별 상품은 <code class=\"language-text\">대괄호</code>로 묶여 있어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품이 한 개 이상인 경우 <code class=\"language-text\">세미콜론</code>으로 구분되어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 가격은 <code class=\"language-text\">100원 부터 시작</code>하며, <code class=\"language-text\">10원으로 나누어 떨어져야 한다.</code></li>\n</ul>\n<h3>4. 구매</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 위해 상품명을 <code class=\"language-text\">입력</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품이 존재하지 않는 경우</code> 예외를 던지고 재입력을 진행한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 진행 할 때 <code class=\"language-text\">현재 투입 금액</code>이 <code class=\"language-text\">출력</code>된다.</li>\n</ul>\n<h3>5. 잔돈 반환</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 구매가 완료되면 <code class=\"language-text\">잔돈을 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 남은 금액이 <code class=\"language-text\">상품의 최저 가격보다 적거나</code>, <code class=\"language-text\">모든 상품이 소진된 경우</code> 바로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 잔돈을 반환할 수 없는 경우 잔돈으로 <code class=\"language-text\">반환할 수 있는 금액만 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 현재 투입 금액을 출력하고 <code class=\"language-text\">투입 금액의 최소 개수의 동전</code>으로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 반환되지 않은 금액은 자판기에 남는다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.2 기능 목록</summary>\n<p>반환되는 동전이 최소한이 되는 자판기를 구현한다.</p>\n<h3>1. 보유 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액으로 동전을 <code class=\"language-text\">무작위</code>로 생성한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 생성이 완료되면 동전 별 보유 개수를 <code class=\"language-text\">출력</code>한다. 보유 개수가 0개인 경우에도 출력을 진행한다.</li>\n</ul>\n<h3>2. 상품</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품명</code>, <code class=\"language-text\">가격</code>, <code class=\"language-text\">수량</code>을 <code class=\"language-text\">입력</code>하여 상품을 추가한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 대괄호<code class=\"language-text\">[]</code>로 묶어 세미콜론<code class=\"language-text\">;</code>으로 구분한다. ex) <code class=\"language-text\">[콜라,1500,20];[사이다,1000,10]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품이 한 개 이상인 경우 <code class=\"language-text\">세미콜론</code>으로 구분되어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 <code class=\"language-text\">대괄호</code>로 묶여 있어야 한다. </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">비어있는 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code> ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">공백인 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code> ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">정수</code>이다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">음수가 될 수 없다.</code> ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">100원 부터 시작</code>한다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">10원으로 나누어 떨어져야 한다.</code> ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">정수</code>이다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">음수가 될 수 없다.</code> ✚</li>\n</ul>\n<h3>3. 투입 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액으로는 동전을 생성하지 않는다.</li>\n</ul>\n<h3>4. 구매</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 위해 상품명을 <code class=\"language-text\">입력</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품이 존재하지 않는 경우</code> 예외를 던지고 재입력을 진행한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 진행 할 때 <code class=\"language-text\">현재 투입 금액</code>이 <code class=\"language-text\">출력</code>된다.</li>\n</ul>\n<h3>5. 잔돈 반환</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 구매가 완료되면 <code class=\"language-text\">잔돈을 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 남은 금액이 <code class=\"language-text\">상품의 최저 가격보다 적거나</code>, <code class=\"language-text\">모든 상품이 소진된 경우</code> 바로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 잔돈을 반환할 수 없는 경우 잔돈으로 <code class=\"language-text\">반환할 수 있는 금액만 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 현재 투입 금액을 출력하고 <code class=\"language-text\">투입 금액의 최소 개수의 동전</code>으로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 반환되지 않은 금액은 자판기에 남는다.</li>\n</ul>\n<h2>ver 0.3 기능 목록</h2>\n<p>반환되는 동전이 최소한이 되는 자판기를 구현한다.</p>\n<h3>1. 보유 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액으로 동전을 <code class=\"language-text\">무작위</code>로 생성한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 생성이 완료되면 동전 별 보유 개수를 <code class=\"language-text\">출력</code>한다. 보유 개수가 0개인 경우에도 출력을 진행한다.</li>\n</ul>\n<h3>2. 상품</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품명</code>, <code class=\"language-text\">가격</code>, <code class=\"language-text\">수량</code>을 <code class=\"language-text\">입력</code>하여 상품을 추가한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 대괄호<code class=\"language-text\">[]</code>로 묶어 세미콜론<code class=\"language-text\">;</code>으로 구분한다. ex) <code class=\"language-text\">[콜라,1500,20];[사이다,1000,10]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품이 한 개 이상인 경우 <code class=\"language-text\">세미콜론</code>으로 구분되어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 <code class=\"language-text\">대괄호</code>로 묶여 있어야 한다. </li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">비어있는 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">공백인 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">100원 부터 시작</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">10원으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n</ul>\n<h3>3. 투입 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액으로는 동전을 생성하지 않는다.</li>\n</ul>\n<h3>4. 구매</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 위해 상품명을 <code class=\"language-text\">입력</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">구매 상품의 이름</code>이 <code class=\"language-text\">비어있는 경우</code> 예외를 던진다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">구매 상품의 이름</code>이 <code class=\"language-text\">공백인 경우</code> 예외를 던진다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품이 존재하지 않는 경우</code> 예외를 던지고 재입력을 진행한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 진행 할 때 <code class=\"language-text\">현재 투입 금액</code>이 <code class=\"language-text\">출력</code>된다.</li>\n</ul>\n<h3>5. 잔돈 반환</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 구매가 완료되면 <code class=\"language-text\">잔돈을 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 남은 금액이 <code class=\"language-text\">상품의 최저 가격보다 적거나</code>, <code class=\"language-text\">모든 상품이 소진된 경우</code> 바로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 잔돈을 반환할 수 없는 경우 잔돈으로 <code class=\"language-text\">반환할 수 있는 금액만 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 현재 투입 금액을 출력하고 <code class=\"language-text\">투입 금액의 최소 개수의 동전</code>으로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 반환되지 않은 금액은 자판기에 남는다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.4 기능 목록</summary>\n<h3>1. 보유 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액으로 동전을 <code class=\"language-text\">무작위</code>로 생성한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 생성이 완료되면 동전 별 보유 개수를 <code class=\"language-text\">출력</code>한다. 보유 개수가 0개인 경우에도 출력을 진행한다.</li>\n</ul>\n<h3>2. 상품</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품명</code>, <code class=\"language-text\">가격</code>, <code class=\"language-text\">수량</code>을 <code class=\"language-text\">입력</code>하여 상품을 추가한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 대괄호<code class=\"language-text\">[]</code>로 묶어 세미콜론<code class=\"language-text\">;</code>으로 구분한다. ex) <code class=\"language-text\">[콜라,1500,20];[사이다,1000,10]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품이 한 개 이상인 경우 <code class=\"language-text\">세미콜론</code>으로 구분되어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 <code class=\"language-text\">대괄호</code>로 묶여 있어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">비어있는 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">공백인 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">100원 부터 시작</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">10원으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n</ul>\n<h3>3. 투입 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액으로는 동전을 생성하지 않는다.</li>\n</ul>\n<h3>4. 구매</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 위해 상품명을 <code class=\"language-text\">입력</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">구매 상품의 이름</code>이 <code class=\"language-text\">비어있는 경우</code> 예외를 던진다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">구매 상품의 이름</code>이 <code class=\"language-text\">공백인 경우</code> 예외를 던진다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품이 존재하지 않는 경우</code> 예외를 던지고 재입력을 진행한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 진행 할 때 <code class=\"language-text\">현재 투입 금액</code>이 <code class=\"language-text\">출력</code>된다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액이 <code class=\"language-text\">구매 가능한 상품의 최저 가격보다 적거나</code>, <code class=\"language-text\">모든 상품이 소진된 경우</code> 구매가 불가능 하다. ✚</li>\n</ul>\n<h3>5. 잔돈 반환</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 구매가 완료되면 <code class=\"language-text\">잔돈을 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 잔돈을 반환할 수 없는 경우 잔돈으로 <code class=\"language-text\">반환할 수 있는 금액만 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 현재 투입 금액을 출력하고 <code class=\"language-text\">투입 금액의 최소 개수의 동전</code>으로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 반환되지 않은 금액은 자판기에 남는다.</p>\n</details>\n</li>\n</ul>\n<details>\n<summary>ver 0.5 기능 목록</summary>\n<h3>1. 보유 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 보유 금액으로 동전을 <code class=\"language-text\">무작위</code>로 생성한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 생성이 완료되면 동전 별 보유 개수를 <code class=\"language-text\">출력</code>한다. 보유 개수가 0개인 경우에도 출력을 진행한다.</li>\n</ul>\n<h3>2. 상품</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품명</code>, <code class=\"language-text\">가격</code>, <code class=\"language-text\">수량</code>을 <code class=\"language-text\">입력</code>하여 상품을 추가한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 대괄호<code class=\"language-text\">[]</code>로 묶어 세미콜론<code class=\"language-text\">;</code>으로 구분한다. ex) <code class=\"language-text\">[콜라,1500,20];[사이다,1000,10]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품이 한 개 이상인 경우 <code class=\"language-text\">세미콜론</code>으로 구분되어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>은 <code class=\"language-text\">대괄호</code>로 묶여 있어야 한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">개별 상품</code>의 형식이 잘못된 경우 예외를 던진다. ex) <code class=\"language-text\">[콜라,1500,20][콜라,1500,20]</code>, <code class=\"language-text\">[콜라,1500]</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">비어있는 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>이 <code class=\"language-text\">공백인 경우</code> 예외를 던진다. ex) <code class=\"language-text\"></code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 이름</code>은 중복될 수 없다. 중복된 경우 예외를 던진다. ✚</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">100원 부터 시작</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 가격</code>은 <code class=\"language-text\">10원으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품의 수량</code>은 적어도 <code class=\"language-text\">1개 이상</code>이다. ✚</li>\n</ul>\n<h3>3. 투입 금액</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액을 <code class=\"language-text\">입력</code> 받는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">정수</code>이다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">음수가 될 수 없다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액은 <code class=\"language-text\">10으로 나누어 떨어져야 한다.</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액으로는 동전을 생성하지 않는다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액으로 <code class=\"language-text\">제공된 상품을 구매할 수 없는 경우(구매 가능 상품 최저가 보다 적은 경우)</code> 예외를 던진다. ✚</li>\n</ul>\n<h3>4. 구매</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 위해 상품명을 <code class=\"language-text\">입력</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">구매 상품의 이름</code>이 <code class=\"language-text\">비어있는 경우</code> 예외를 던진다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">구매 상품의 이름</code>이 <code class=\"language-text\">공백인 경우</code> 예외를 던진다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code class=\"language-text\">상품이 존재하지 않는 경우</code> 예외를 던지고 재입력을 진행한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 상품 구매를 진행 할 때 <code class=\"language-text\">현재 투입 금액</code>이 <code class=\"language-text\">출력</code>된다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 투입 금액이 <code class=\"language-text\">구매 가능한 상품의 최저 가격보다 적거나</code>, <code class=\"language-text\">모든 상품이 소진된 경우</code> 구매가 불가능 하다.</li>\n</ul>\n<h3>5. 잔돈 반환</h3>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 구매가 완료되면 <code class=\"language-text\">잔돈을 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 잔돈을 반환할 수 없는 경우 잔돈으로 <code class=\"language-text\">반환할 수 있는 금액만 반환</code>한다.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 현재 투입 금액을 출력하고 <code class=\"language-text\">투입 금액의 최소 개수의 동전</code>으로 잔돈을 돌려준다.</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 반환되지 않은 금액은 자판기에 남는다.</p>\n</details>\n</li>\n</ul>\n<h2>3. Can’t automatically merge</h2>\n<p>미션 해결 중간에 테스트 코드의 수정으로 <code class=\"language-text\">upstream repository</code>에 수정에 관련된 <code class=\"language-text\">commit</code>이 추가되었다. 변경된 소스 코드를 반영하지 않고 직접 수정할 경우 <code class=\"language-text\">Pull Request</code>를 진행할 때 <code class=\"language-text\">Can’t automatically merge.</code>문구를 확인할 수 있다.</p>\n<p>변경에 관련된 공지 메일에서도 이와 같은 설명을 언급하고 있다. 즉 소스 코드 <code class=\"language-text\">병합</code>을 통해 이것을 해결해야 한다.</p>\n<h3>git rebase</h3>\n<p>병합하는 방법에는 크게 merge를 활용하는 방법과 <code class=\"language-text\">rebase</code>를 활용하는 방법이 있다. 그 중 <code class=\"language-text\">rebase</code>를 활용하여 적용해보려 한다.</p>\n<p><code class=\"language-text\">rebase</code>는 merge관련 commit을 추가적으로 생성하지 않고 해당 branch의 <code class=\"language-text\">base를 다시 설정</code>한다. 그렇기 때문에 소스 코드가 수정되어도 수정된 commit을 <code class=\"language-text\">중간에 반영</code>하고 해당 branch의 base를 재 정리한다.</p>\n<p>이러한 rebase를 사용하면 깔끔한 commit 히스토리를 유지할 수 있다.</p>\n<h2>4. MVC 패턴</h2>\n<p>MVC은 Model-View-Controller의 약자로 하나의 애플리케이션을 구성할 때 구성 요소를 세가지의 역할로 구분한 개발 방법론이다. 특히 소프트웨어의 <code class=\"language-text\">비즈니스 로직과 화면을 구분</code>하는데 중점을 두고 있다. 이러한 <code class=\"language-text\">관심사의 분리</code>는 객체가 각자의 책임을 가질 수 있도록 도와준다.</p>\n<p>또한 MVC 패턴을 사용하면 Model과 View가 다른 컴포넌트들에 종속되지 않아 변경에 유리하다는 장점을 가진다.</p>\n<h3>Model</h3>\n<p>내부 비즈니스 로직을 처리하기 위한 역할을 한다. Model은 다른 컴포넌트(ex View, Controller)들에 대해 알지 못한다. <code class=\"language-text\">자기 자신이 무엇을 수행하는지</code>만 알고 있다.</p>\n<h3>View</h3>\n<p>화면(ex 웹, console 등)에 <code class=\"language-text\">무엇</code>을 보여주기 위한 역할이다. Model이 처리한 데이터나 그 작ㅇ버 결과를 가지고 사용자에게 출력할 화면을 만든다. View 또한 다른 컴포넌트들에 대해 알지 못한다. 단순히 자신이 무엇을 수행하는지만 알고 있다. </p>\n<h3>Controller</h3>\n<p>Model과 View 사이에 있는 컴포넌트이다. Model이 데이터를 <code class=\"language-text\">어떻게 처리</code>할지 알려주는 역할이다. 클라이언트의 요청을 받으면 해당 요청에 대한 실제 업무를 수행하기 위해 Model을 호출한다. Model이 업무 수행을 완료하면 그 결과를 가지고 화면을 생성하기 위해 View에 전달한다. 클라이언트의 요청에 대해 Model과 View를 결정하여 전달하는 일종의 조정자로서의 일을 진행한다.</p>\n<p><code class=\"language-text\">Controller는 다른 컴포넌트들에 대해 알고 있다.</code> 자기 자신 외에 Model과 View가 무엇을 수행하는지 알고 있다.</p>\n<h2>5. 비즈니스 로직과 UI 로직 분리</h2>\n<h3>비즈니스 로직과 UI 로직을 분리해라</h3>\n<p>비즈니스 로직과 UI 로직을 한 클래스가 담당하지 않도록 한다. 단일 책임의 원칙에도 위배된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 자동차 이동 여부를 결정하는 비즈니스 로직</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> randomValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// UI 로직</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>현재 객체의 상태를 보기 위한 로그 메시지 성격이 강하다면 <code class=\"language-text\">toString()</code>을 통해 구현한다. View에서 사용할 데이터라면 getter 메서드를 통해 데이터를 전달한다.</p>\n<p>위 내용은 2주차 공통 피드백의 일부분이다. MVC 패턴을 기반으로 <code class=\"language-text\">비즈니스 로직</code>과 <code class=\"language-text\">UI 로직</code>을 한 클래스가 담당하지 않도록 노력하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PossessionCoin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_QUANTITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">TO_STRING_FORMAT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"%d원 - %d개\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Coin</span> coin<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Coin</span> coin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>coin <span class=\"token operator\">=</span> coin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> quantity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Coin</span> <span class=\"token function\">getCoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> coin<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> quantity <span class=\"token operator\">></span> <span class=\"token constant\">DEFAULT_QUANTITY</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculatePossibleQuantity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvestmentMoney</span> investmentMoney<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> investmentMoney<span class=\"token punctuation\">.</span><span class=\"token function\">trade</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">.</span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TO_STRING_FORMAT</span><span class=\"token punctuation\">,</span> coin<span class=\"token punctuation\">.</span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 실제 미션 코드의 일부분을 가져온 것이다. 모델의 성격을 띄는 <code class=\"language-text\">PossessionCoin</code>이 <code class=\"language-text\">UI로직</code>을 가지지 않도록 조정하였다. 단순히 객체의 상태를 로그 메시지로 만들기 위해 <code class=\"language-text\">toString</code>을 활용하여 구현하였다.</p>\n<h2>6. Stream 활용</h2>\n<p>미션을 진행하며 <code class=\"language-text\">메서드 15라인</code>과 <code class=\"language-text\">depth의 제한</code>을 지키기 위해 노력하였다. 그 중 depth를 지키기 위해 단순 반복문을 사용하기 보다 <code class=\"language-text\">Stream</code>을 활용하여 해결하기 위해 노력하였다.</p>\n<p>그중 가장 기억에 남는 리팩터링을 하나 소개해보려 한다.</p>\n<h3>반복문을 활용한 잔돈 계산</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PossessionCoins</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">></span></span> possessionCoins<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PossessionCoins</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">></span></span> possessionCoins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>possessionCoins <span class=\"token operator\">=</span> possessionCoins<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPossessionCoins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>possessionCoins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Change</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">takeChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvestmentMoney</span> investmentMoney<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Change</span><span class=\"token punctuation\">></span></span> changes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PossessionCoin</span> possessionCoin <span class=\"token operator\">:</span> possessionCoins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Coin</span> coin <span class=\"token operator\">=</span> possessionCoin<span class=\"token punctuation\">.</span><span class=\"token function\">getCoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>possessionCoin<span class=\"token punctuation\">.</span><span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> investmentMoney<span class=\"token punctuation\">.</span><span class=\"token function\">isPossibleChange</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> coinQuantity <span class=\"token operator\">=</span> possessionCoin<span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>investmentMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                changes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Change</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">,</span> coinQuantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> changes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 보유 동전 리스트를 가지고 있는 일급 컬렉션이다. 잔돈 계산을 위해서는 <code class=\"language-text\">takeChange</code> 메서드를 활용하여 잔돈 리스트를 반환 받아야 한다. </p>\n<p>최초에 단순 <code class=\"language-text\">반복문</code>을 활용하여 검증을 진행하고 잔돈 개수를 계산하여 잔돈 리스트에 추가하는 로직으로 구성하였다. 하지만 메서드에 많은 기능을 담고 있으며 검증을 위한 <code class=\"language-text\">if</code>가 <code class=\"language-text\">&amp;&amp;</code>의 사용으로 직관적이지 않게 느껴졌다. 위 코드는 <code class=\"language-text\">메서드가 한 가지 일만 잘하도록 개선</code>하고, 로직의 <code class=\"language-text\">직관성을 높여야 한다는 필요성</code>을 느끼게 되었다.</p>\n<h3>개선된 잔돈 계산</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PossessionCoins</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">></span></span> possessionCoins<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PossessionCoins</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">></span></span> possessionCoins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>possessionCoins <span class=\"token operator\">=</span> possessionCoins<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPossessionCoins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>possessionCoins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Change</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">takeChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvestmentMoney</span> investmentMoney<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> possessionCoins<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PossessionCoin</span><span class=\"token operator\">::</span><span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>investmentMoney<span class=\"token operator\">::</span><span class=\"token function\">isPossibleChange</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>possessionCoin <span class=\"token operator\">-></span> <span class=\"token function\">getChange</span><span class=\"token punctuation\">(</span>investmentMoney<span class=\"token punctuation\">,</span> possessionCoin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Change</span> <span class=\"token function\">getChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvestmentMoney</span> investmentMoney<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PossessionCoin</span> possessionCoin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> coinQuantity <span class=\"token operator\">=</span> possessionCoin<span class=\"token punctuation\">.</span><span class=\"token function\">calculatePossibleQuantity</span><span class=\"token punctuation\">(</span>investmentMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Change</span><span class=\"token punctuation\">(</span>possessionCoin<span class=\"token punctuation\">.</span><span class=\"token function\">getCoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> coinQuantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Stream을 활용하여 개선한 <code class=\"language-text\">takeChange</code>이다. 우선 <code class=\"language-text\">getChange</code>을 활용하여 메서드를 분리하였다. 또한 stream의 활용으로 depth를 1까지 줄일 수 있게 되었다. </p>\n<p>이제 보유 동전을 탐색하며 <code class=\"language-text\">filter</code>를 활용한 검증을 진행한다. 그 다음 역할은 나눈 <code class=\"language-text\">getChange</code>를 통해 <code class=\"language-text\">mapping</code>을 진행한 뒤 종료 연산인 <code class=\"language-text\">collect</code>를 통해 <code class=\"language-text\">List</code>를 반환한다. 이전에 복잡하게 얽힌 반복문과 검증 관련 로직을 <code class=\"language-text\">Stream</code>을 통해 <code class=\"language-text\">더 나은 가독성</code>을 갖추도록 노력하였다.</p>\n<h2>7. enum</h2>\n<p>이번 미션에는 동전을 나타내는 상수들이 열거 타입인 <code class=\"language-text\">Coin</code>으로 주어진다. 우선 이것이 의미하는 바를 파악하기 위해 <code class=\"language-text\">enum</code>의 등장 배경부터 살펴보았다.</p>\n<p>enum은 Java 1.5부터 등장하였다. 이전에는 상수 사용을 위해 <code class=\"language-text\">정수 열거 패턴</code>을 주로 사용하였다. 이것에는 아래와 같이 몇 가지 문제점을 가지고 있었다.</p>\n<ul>\n<li>상수에 부여된 러터럴은 상수와 관련이 없다.</li>\n<li>이름의 충돌이 발생할 수 있다.</li>\n<li>타입 안전을 보장하지 않고 표현력이 좋지 않다.</li>\n</ul>\n<p>정리하면 기존에 사용하던 상수 관리의 단점들을 보완하고 타입의 안정성과 IDE의 추가적인 지원을 받을 수 있다.</p>\n<h3>enum의 values 메서드</h3>\n<p>enum에는 선언하지 않아도 다양한 메서드를 사용할 수 있다. 그 중 하나의 예시는 <code class=\"language-text\">values()</code> 이다. <code class=\"language-text\">values()</code> 메서드는 열거 형의 모든 값을 선언된 순서대로 모든 값을 포함하여 배열을 반환한다.</p>\n<p>아래와 같이 동전을 표현하는 enum <code class=\"language-text\">Coin</code>이 있다고 가정한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Coin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">COIN_500</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">COIN_100</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">COIN_50</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">COIN_10</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같이 활용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Coin</span> coin <span class=\"token operator\">:</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>적용</h3>\n<p>아래는 실제 미션 코드의 일부분을 가져온 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Coin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">COIN_500</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">COIN_100</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">COIN_50</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">COIN_10</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Coin</span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">COINS</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Coin</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">PREFIX</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"COIN_\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCoinAmounts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">COINS</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>coin <span class=\"token operator\">-></span> coin<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Coin</span> <span class=\"token function\">parseCoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PREFIX</span> <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>enum으로 인해 클래스와 같이 필드와 메서드들을 가질 수 있게 된다. 또한 Coin의 종류를 한정할 수 있기 때문에 추가적인 검증 과정을 줄일 수 있다.</p>\n<p>아래는 Coin을 인스턴스 필드로 활용하는 <code class=\"language-text\">PossessionCoin</code>이다. PossessionCoin은 현재 자판기가 보유하고 있는 동전의 타입과 수량을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PossessionCoin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_QUANTITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">TO_STRING_FORMAT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"%d원 - %d개\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Coin</span> coin<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PossessionCoin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Coin</span> coin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>coin <span class=\"token operator\">=</span> coin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> quantity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">public PossessionCoin(Coin coin, int quantity)</code>: 생성자를 살펴보면 Coin 타입으로 받는 것을 확인할 수 있다. 만약 단순히 int로 해당 값을 받게 된다면 500, 100, 50, 10이 아닐 경우 <code class=\"language-text\">추가적인 검증</code>이 필요하게 된다. Coin으로 한정시키게 되면 선언한 상수들만 사용하여 해당 생성자를 활용하도록 <code class=\"language-text\">제한</code>할 수 있다.</li>\n</ul>\n<h2>8. 객체에게 메시지 보내기</h2>\n<p>이번 미션을 해결하면서 가장 지키기 어려웠던 사항이었다. 피드백의 일부분을 살펴보면 아래와 같다.</p>\n<h3>객체에 메시지를 보내라</h3>\n<p>상태 데이터를 가지는 객체에서 데이터를 꺼내려 (get)하지 말고 객체에게 메시지를 보내라. 예를 들어 Car가 우승자인지를 판단하기 위해 최대 이동 거리 값을 가지는 Car인지 판단 기능은?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMaxPosition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxDistance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 구현하지 않고 다음과 같이 Car에게 메시지를 보내 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">car<span class=\"token punctuation\">.</span><span class=\"token function\">isMaxPosition</span><span class=\"token punctuation\">(</span>maxDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제의 의도는 정확히 이해하였다. 하지만 실제 기능 사항을 정리하고 해결해가는 과정에서 getter를 활용하지 않고 로직을 처리하는 것은 많은 힘이 들었다. 그 중 가장 많은 고민을 진행한 것은 <code class=\"language-text\">상품의 가격과 투입 금액을 비교하는 부분</code>이다.</p>\n<h3>상품을 관리하는 책임을 가진 Product</h3>\n<p>아래는 자판기에 들어있는 상품 정보를 관리하기 위한 <code class=\"language-text\">Product</code>이다. 내부 인스턴스 변수들은 <code class=\"language-text\">원시 타입을 포장하고 있는 객체</code>를 사용하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Name</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Price</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Quantity</span> quantity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputProduct<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">NAME_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Price</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">PRICE_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Quantity</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">QUANTITY_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSameName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> productPurchaseName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>productPurchaseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>quantity<span class=\"token punctuation\">.</span><span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_PRODUCT_QUANTITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        quantity<span class=\"token punctuation\">.</span><span class=\"token function\">decreaseQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> quantity<span class=\"token punctuation\">.</span><span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">public boolean isSameName(String productPurchaseName)</code>: 외부에서 구입하기 위한 상품 이름을 전달 받아 동일 여부를 확인하고 반환한다.</li>\n<li><code class=\"language-text\">public boolean isExistQuantity()</code>: 상품의 수량의 존재 여부를 반환한다.</li>\n</ul>\n<p>위 두 메서드는 <code class=\"language-text\">Product</code>에게 메시지를 보내서 관련 로직을 처리하기 위해 노력하였다. 하지만 문제는 <code class=\"language-text\">getPrice</code>였다.</p>\n<h3>투입 금액을 관리하는 책임을 가진 InvestmentMoney</h3>\n<p>투입된 금액의 검증과 로직 처리를 위한 <code class=\"language-text\">InvestmentMoney</code>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InvestmentMoney</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> investmentMoney<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InvestmentMoney</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputInvestmentMoney<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">int</span> investmentMoney <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputInvestmentMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>investmentMoney <span class=\"token operator\">=</span> investmentMoney<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>investmentMoney <span class=\"token operator\">&lt;</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_PRODUCT_PRICE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        investmentMoney <span class=\"token operator\">-=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> investmentMoney <span class=\"token operator\">>=</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">public boolean isPay(Product product)</code> 메서드는 Product를 전달 받아 해당 price를 꺼내 <code class=\"language-text\">지불 가능 여부를 반환</code>해야 한다. 결국 투입 금액과 상품 가격을 모두 알아야 지불 여부를 확인할 수 있기 때문에 조회를 위한 getter 없이 처리하기에는 무리가 있다고 판단하였다.</p>\n<p>단순히 <code class=\"language-text\">int price</code> 매개 변수로 받는다고 해도 결국 해당 메서드를 활용하는 부분에서 getter의 사용은 불가피하게 된다. 이러한 제한 사항들을 제외하고는 최대한 객체에게 메시지를 전달하여 처리할 수 있도록 노력하였다. </p>\n<p>메시지를 전달하는 목적은 결국 협력 안에서 객체가 수행하는 책임에 초점을 맞추기 위해서 이다. 이러한 메시지를 통해 객체는 책임을 갖게 된다. 좀 더 객체지향 패러다임에 맞게 작성을 위해서 <code class=\"language-text\">메시지가 객체를 결정</code>할 수 있도록 시선을 길러야 겠다.</p>\n<h2>9. 과도한 검증 코드와 책임의 이전</h2>\n<h3>Effective Java 아이템 49. 매개변수가 유효한지 검사하라</h3>\n<blockquote>\n<p>메서드나 생성자를 작성할 때면 그 매개변수들에 어떤 제약이 있을지 생각해야 한다. 그 제약들을 문서화하고 메서드 코드 시작 부분에서 명시적으로 검사해야 한다. 이런 습관을 반드시 기르도록 하자. 그 노력은 유효성 검사가 실제 오류를 처음 걸러낼 때 충분히 보상 받을 것이다.</p>\n<p><em>Effective Java 301p</em></p>\n</blockquote>\n<p>위와 같은 내용을 확인하였고 객체 생성 시점에 올바르게 생성이 가능하도록 인스턴스 변수들을 검증하기 위해 다양한 검증 코드를 활용했다. </p>\n<p>이러한 검증 관련 코드들은 해당 객체의 인스턴스 변수와 관련된 메서드들 이기 때문에 내부에 위치하는 것이 알맞다고 판단 했다. 또한 <code class=\"language-text\">단순한 검증</code>의 경우 <code class=\"language-text\">메서드 추출</code>을 통해 직관적인 코드를 만들 수 있었다.</p>\n<p>아래는 검증 로직을 포함한 예시이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductPurchase</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">VALID_EMPTY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"[ERROR] 상품명이 비어있습니다.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">VALID_BLANK</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"[ERROR] 상품명은 공백이 될 수 없습니다.\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProductPurchase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateEmpty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateBlank</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateEmpty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateBlank</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_BLANK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메서드 추출은 비교적 간결하게 검증 로직을 표현할 수 있다. 하지만 이러한 검증 로직이 많아 지면 생성자와 검증과 관련된 메서드들이 반 이상을 차지하게 된다.</p>\n<p>아래는 실제 과도한 검증 로직으로 인해 <code class=\"language-text\">너무 많은 책임</code>을 부여한 것이 아닌지 고민하게 된 <code class=\"language-text\">Product</code>이다.</p>\n<h3>Product</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputProduct<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateStartWithAndEndWith</span><span class=\"token punctuation\">(</span>inputProduct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inputProduct <span class=\"token operator\">=</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_PREFIX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inputProduct <span class=\"token operator\">=</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_SUFFIX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splitInputProduct <span class=\"token operator\">=</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_SPLIT_REGEX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INPUT_PRODUCT_SPLIT_LIMIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateSplitInputProduct</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">NAME_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">PRICE_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">QUANTITY_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateStartWithAndEndWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputProduct<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_PREFIX</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_SUFFIX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateSplitInputProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splitInputProduct<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateName</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">NAME_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validatePrice</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">PRICE_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateQuantity</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">QUANTITY_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateEmpty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateBlank</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateEmpty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateBlank</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validatePrice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputPrice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateNumberFormat</span><span class=\"token punctuation\">(</span>inputPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">validateNumberSize</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateDivide</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNumberSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">&lt;</span> <span class=\"token constant\">DEFAULT_PRICE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateDivide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">%</span> <span class=\"token constant\">PRICE_QUOTIENT</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">REMAINDER</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateQuantity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputQuantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateNumberFormat</span><span class=\"token punctuation\">(</span>inputQuantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> quantity <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>inputQuantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateNegativeNumber</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNumberFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateNegativeNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>quantity <span class=\"token operator\">&lt;</span> <span class=\"token constant\">DEFAULT_QUANTITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>비즈니스 로직을 제외한 검증 코드만 100줄이 넘게 채워져 있다. 이것을 개선하기 위해 <code class=\"language-text\">원시 타입이 포장된 객체를 활용</code>하여 <code class=\"language-text\">객체의 책임을 이전</code>하였다.</p>\n<h3>Name</h3>\n<p>상품 이름에 관한 책임을 가지는 <code class=\"language-text\">Name</code>이다. <code class=\"language-text\">관련 검증</code> 또한 <code class=\"language-text\">해당 객체로 이동</code>하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">VALID_EMPTY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"[ERROR] 상품 이름이 비어있습니다.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">VALID_BLANK</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"[ERROR] 상품 이름이 공백입니다.\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateEmpty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateBlank</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateEmpty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateBlank</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_BLANK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Product의 다른 <code class=\"language-text\">인스턴스 변수(Price, Quantity)</code>들도 동일하게 객체로 포장하여 <code class=\"language-text\">책임을 이전</code>하였다.</p>\n<h3>개선된 Product</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Name</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Price</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Quantity</span> quantity<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputProduct<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">validateStartWithAndEndWith</span><span class=\"token punctuation\">(</span>inputProduct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inputProduct <span class=\"token operator\">=</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_PREFIX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inputProduct <span class=\"token operator\">=</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_SUFFIX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splitInputProduct <span class=\"token operator\">=</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_SPLIT_REGEX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INPUT_PRODUCT_SPLIT_LIMIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">validateArrayLength</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">NAME_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Price</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">PRICE_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Quantity</span><span class=\"token punctuation\">(</span>splitInputProduct<span class=\"token punctuation\">[</span><span class=\"token constant\">QUANTITY_INDEX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateStartWithAndEndWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> inputProduct<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_PREFIX</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> inputProduct<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INPUT_PRODUCT_SUFFIX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_START_END_WITH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateArrayLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">!=</span> <span class=\"token constant\">DEFAULT_STRING_SPLIT_LENGTH</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_STRING_SPLIT_LENGTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSameName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> productPurchaseName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>productPurchaseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>quantity<span class=\"token punctuation\">.</span><span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">VALID_PRODUCT_QUANTITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        quantity<span class=\"token punctuation\">.</span><span class=\"token function\">decreaseQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">.</span><span class=\"token function\">isExistQuantity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 각 인스턴스 변수의 <code class=\"language-text\">검증 책임</code>이 개별 포장된 객체로 <code class=\"language-text\">이전</code>되었다. 이전 보다 훨씬 깔끔한 구조를 만들 수 있도록 노력하였다.</p>\n<h3>정리</h3>\n<p>검증 관련 코드를 메서드로 추출하고 더 나아가 <code class=\"language-text\">과도한 책임</code>이 부여되면 해당 <code class=\"language-text\">책임을 분리</code>한다.</p>\n<h2>References</h2>\n<h3>MVC 패턴</h3>\n<ul>\n<li><a href=\"https://log.hodol.dev/techcourse/mvc-pattern\">세상에서 제일 쉬운 MVC 패턴</a></li>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2021-04-26-mvc/\">웹 MVC 각 컴포넌트 역할</a></li>\n</ul>\n<h3>enum</h3>\n<ul>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2020-07-29-dont-use-else/\">else 예약어를 쓰지 않는다</a></li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Enum.html\">Class Enum</a></li>\n</ul>\n<h3>과도한 검증 코드</h3>\n<ul>\n<li><a href=\"https://velog.io/@wannte/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EC%8B%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC\">[JAVA] 객체 생성시 유효성 검사에 관하여</a></li>\n</ul>","frontmatter":{"title":"프리코스 3주차","date":"November 15, 2021","update":"November 15, 2021","tags":["우아한테크코스","프리코스"],"series":"우아한테크코스 4기 프리코스"},"fields":{"slug":"/precourse-3/","readingTime":{"minutes":43.025}}},"seriesList":{"edges":[{"node":{"id":"789c6ea4-3527-5953-b8a0-7018cb7c2cea","fields":{"slug":"/precourse-1/"},"frontmatter":{"title":"프리코스 1주차"}}},{"node":{"id":"3e440879-b393-5bfe-98b7-c97f07f9ad94","fields":{"slug":"/precourse-2/"},"frontmatter":{"title":"프리코스 2주차"}}},{"node":{"id":"51d28271-7e5f-5e6a-9b59-8e8b82bb2903","fields":{"slug":"/precourse-3/"},"frontmatter":{"title":"프리코스 3주차"}}},{"node":{"id":"82313531-fb31-5b67-8ace-a356ec4bc3e3","fields":{"slug":"/precourse-pass/"},"frontmatter":{"title":"우아한테크코스 프리코스 후기"}}}]},"previous":{"fields":{"slug":"/precourse-2/"},"frontmatter":{"title":"프리코스 2주차"}},"next":{"fields":{"slug":"/precourse-pass/"},"frontmatter":{"title":"우아한테크코스 프리코스 후기"}}},"pageContext":{"id":"51d28271-7e5f-5e6a-9b59-8e8b82bb2903","series":"우아한테크코스 4기 프리코스","previousPostId":"3e440879-b393-5bfe-98b7-c97f07f9ad94","nextPostId":"82313531-fb31-5b67-8ace-a356ec4bc3e3"}},"staticQueryHashes":[],"slicesMap":{}}