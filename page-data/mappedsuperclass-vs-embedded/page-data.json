{"componentChunkName":"component---src-templates-post-jsx","path":"/mappedsuperclass-vs-embedded/","result":{"data":{"site":{"siteMetadata":{"title":"나누면 배가 되고"}},"markdownRemark":{"id":"b886feb1-ab24-59f0-8972-2d2b510ea407","excerpt":"@MappedSuperclass 부모 클래스를 상속 받는 자식 클래스에게 매핑 정보만 제공할 때 사용한다. 즉, 단순히 으로만 사용하기 때문에 추상 클래스 처럼 사용할 수 있다. 특징으로는 아래와 같다. 테이블과 직접적인 매핑 없이 자식 클래스가 매핑 정보를 상속하기 위해 사용한다. 해당 클래스는 직접 생성하여 사용할 일이 없기 때문에 추상 클래스를 권장…","html":"<h2>@MappedSuperclass</h2>\n<p>부모 클래스를 상속 받는 자식 클래스에게 매핑 정보만 제공할 때 사용한다. 즉, 단순히 <code class=\"language-text\">매핑 정보를 상속할 목적</code>으로만 사용하기 때문에 추상 클래스 처럼 사용할 수 있다. 특징으로는 아래와 같다.</p>\n<ul>\n<li>테이블과 직접적인 매핑 없이 자식 클래스가 매핑 정보를 상속하기 위해 사용한다.</li>\n<li>해당 클래스는 직접 생성하여 사용할 일이 없기 때문에 추상 클래스를 권장한다.</li>\n</ul>\n<p>정리하면 테이블과 관계 없이 단순히 엔티티가 공통으로 사용하는 <code class=\"language-text\">매핑 정보를 모아주는 역할</code>을 담당한다. </p>\n<h2>@Embedded</h2>\n<p>새로운 값 타입을 직접 정의해서 사용할 수 있다. JPA에서는 이것을 임베디드 타입이라고 한다. 보다 더 객체지향적인 코드 작성을 위해 사용할 수 있다. 해당 애노테이션을 활용하면 객체의 책임에 대한 <code class=\"language-text\">응집도</code>를 높일 수 있으며, 코드가 더욱 명확해질 것이다. 특징으로는 아래와 같다.</p>\n<ul>\n<li><code class=\"language-text\">@Embeddable</code>: 값 타입을 정의하는 곳에 표시</li>\n<li>\n<p><code class=\"language-text\">@Embedded</code>: 값 타입을 사용하는 곳에 표시</p>\n<ul>\n<li>둘 중 하나는 생략 가능</li>\n</ul>\n</li>\n<li>기본 생성자 필수</li>\n<li>임베디드 타입을 포함한 모든 값 타입은 엔티티의 생명주기에 의존한다. 즉 <code class=\"language-text\">Composition 관계</code>와 가깝게 그려진다.</li>\n</ul>\n<p>이러한 임베디드 타입은 단순히 엔티티의 값으로 표현되기 대문에 해당 값이 속한 엔티티 테이블에 매핑된다. 이러한 임베디드 타입 덕분에 객체와 테이블을 아주 세밀하게 조작하고 매핑할 수 있게 되었다. 잘 설계한 ORM 애플리케이션은 매핑한 테이블 수 보다 클래스 수가 더 많아질 것이다.</p>\n<h2>@MappedSuperclass vs @Embedded</h2>\n<p>결국 두 애노테이션 모두 엔티티의 비슷한 속성을 분리하여 효과적으로 관리할 수 있는 공통점이 있다. 이 둘이 가장 큰 차이점은 바로 <code class=\"language-text\">상속</code>을 사용하는 것과 <code class=\"language-text\">위임</code>을 사용하는 것에 대한 차이이다.</p>\n<p>아래는 객체가 생성되는 시점에 시간을 기록하기 위한 필드를 각각의 방식으로 작성한 것이다.</p>\n<h3>@MappedSuperclass를 활용한 방식</h3>\n<p>먼저 <code class=\"language-text\">@MappedSuperclass</code>를 활용한 방식이다.</p>\n<blockquote>\n<p><em>간단한 예시를 위해 필드 주입을 활용 하였다.</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MappedSuperclass</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"created_at\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createdAt <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// getter</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MappedSuperclassCrew</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Track</span> track<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">MappedSuperclassCrew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MappedSuperclassCrew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Track</span> track<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>track <span class=\"token operator\">=</span> track<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// getter</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>앞서 언급한 것처럼 <code class=\"language-text\">@MappedSuperclass</code>을 활용하면 추상 클래스를 통해 중복된 필드를 상속 받아 편리하게 활용할 수 있다.</p>\n<h3>@Embedded를 활용한 방식</h3>\n<p>다음은 <code class=\"language-text\">@Embedded</code> 활용한 방식이다.</p>\n<blockquote>\n<p><em>간단한 예시를 위해 필드 주입을 활용 하였다.</em></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Embeddable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TraceDateTime</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"created_at\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> updatable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createAt <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">TraceDateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// getter</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmbeddedCrew</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Column</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Track</span> track<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Embedded</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TraceDateTime</span> traceDateTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">EmbeddedCrew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmbeddedCrew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Track</span> track<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>track <span class=\"token operator\">=</span> track<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// getter</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>정리</h2>\n<p>결국 단순히 이야기 하면 두 애노테이션의 가장 큰 차이는 <code class=\"language-text\">상속</code>과 <code class=\"language-text\">위임</code>이다. 보다 더 유연한 객체를 다루기 위해 부모 클래스와 의존성이 강하게 엮인 <code class=\"language-text\">상속 보단 조합</code>을 고려하곤 한다. 하지만 위 같은 예시의 경우 단순히 <code class=\"language-text\">엔티티의 중복된 필드를 재사용하기 위한 목적</code>이 크기 때문에 상속을 고려하는 것이 더욱 편리하다. 또한 <code class=\"language-text\">@MappedSuperclass</code>과 <code class=\"language-text\">Auditing</code> 기능을 함께 활용하면 더 편리하게 필드 값을 다룰 수 있을 것이다.</p>\n<p><code class=\"language-text\">JPQL</code>을 활용할 때도 차이가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MappedSuperclassCrewRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MappedSuperclassCrew</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT c \"</span> \n            <span class=\"token operator\">+</span> <span class=\"token string\">\"FROM MappedSuperclassCrew c \"</span> \n            <span class=\"token operator\">+</span> <span class=\"token string\">\"WHERE c.createdAt > :dateTime\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MappedSuperclassCrew</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByCreatedAtGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">LocalDateTime</span> dateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmbeddedCrewRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EmbeddedCrew</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT c \"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\"FROM EmbeddedCrew c \"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\"WHERE c.traceDateTime.createAt > :dateTime\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EmbeddedCrewRepository</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByCreatedAtGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">LocalDateTime</span> dateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>임베디드 타입을 사용할 경우 <code class=\"language-text\">c.traceDateTime.createAt</code>과 같이 필드명을 명시해주어야 한다.</p>\n<h2>References.</h2>\n<p>김영한, 『자바 ORM 표준 JPA 프로그래밍』, 에이콘(2015), p251-254, p321-325. <br>\n<a href=\"https://www.inflearn.com/questions/18578\">임베디드 타입과 @MappedSuperclass 차이</a></p>","frontmatter":{"title":"@MappedSuperclass vs @Embedded","date":"August 22, 2022","update":"August 22, 2022","tags":["우아한테크코스","상속","조합","MappedSuperclass","Embedded"],"series":null},"fields":{"slug":"/mappedsuperclass-vs-embedded/","readingTime":{"minutes":5.915}}},"seriesList":{"edges":[{"node":{"id":"984809e6-d465-5dfd-9c59-579d12581fac","fields":{"slug":"/immutable-object/"},"frontmatter":{"title":"불변 객체"}}},{"node":{"id":"fa92531f-b76e-587c-a42b-14dedd6e2cb1","fields":{"slug":"/first-class-collection/"},"frontmatter":{"title":"일급 컬렉션"}}},{"node":{"id":"2dac6856-47a1-5ef0-9c9f-d69d4234afcf","fields":{"slug":"/why-jdbc-template/"},"frontmatter":{"title":"JdbcTemplate는 어디에?"}}},{"node":{"id":"ab71a72e-f8d9-55e6-bdd4-66e8778b0b67","fields":{"slug":"/enum/"},"frontmatter":{"title":"enum"}}},{"node":{"id":"b77737b7-c888-54d0-8901-9921b4bbb703","fields":{"slug":"/spring-jdbc-batch/"},"frontmatter":{"title":"Spring JDBC로 batch 활용하기"}}},{"node":{"id":"59e94329-3d48-53b9-9995-90d61432234d","fields":{"slug":"/local-date-time/"},"frontmatter":{"title":"java에서 날짜, 시간 제대로 사용하기"}}},{"node":{"id":"c8dda97d-41c7-5596-a0c8-703fd69d92e7","fields":{"slug":"/identity-strategy/"},"frontmatter":{"title":"IDENTITY 전략는 추가 조회를 하지 않을 수 있다."}}},{"node":{"id":"c50af7e8-5953-5168-b4af-1d186a4254a7","fields":{"slug":"/separated-interface/"},"frontmatter":{"title":"외부와 의존성 분리하기"}}},{"node":{"id":"ba9d009e-d6e8-574f-9f7b-89819e3e57ca","fields":{"slug":"/properties-to-object/"},"frontmatter":{"title":"properties 객체로 다루기"}}},{"node":{"id":"7b780208-a850-5305-a51c-f0937cbdaf93","fields":{"slug":"/google-refresh-token/"},"frontmatter":{"title":"Google은 Refresh Token을 쉽게 내주지 않는다."}}},{"node":{"id":"b886feb1-ab24-59f0-8972-2d2b510ea407","fields":{"slug":"/mappedsuperclass-vs-embedded/"},"frontmatter":{"title":"@MappedSuperclass vs @Embedded"}}},{"node":{"id":"58f32f4d-b2d6-54d6-b3dd-cb4cf4da1d70","fields":{"slug":"/basic-tomcat/"},"frontmatter":{"title":"Tomcat"}}},{"node":{"id":"d26e840e-0646-5dd9-a2d5-5670ddc81ede","fields":{"slug":"/jdbc/"},"frontmatter":{"title":"JDBC"}}},{"node":{"id":"e0a32367-096e-595a-9580-0d3d2fc6e9aa","fields":{"slug":"/template-callback/"},"frontmatter":{"title":"jdbcTemplate을 만들며 마주한 Template Callback 패턴"}}},{"node":{"id":"fa938264-2615-556e-bcfa-d749c30aa8fe","fields":{"slug":"/covering-index/"},"frontmatter":{"title":"커버링 인덱스"}}},{"node":{"id":"cf3a2936-1b1f-5d11-832e-dbb9f8051755","fields":{"slug":"/osiv/"},"frontmatter":{"title":"OSIV와 사용하며 직면한 문제"}}},{"node":{"id":"53859931-2807-5303-a90d-33df33a856de","fields":{"slug":"/save-persist-merge/"},"frontmatter":{"title":"SimpleJpaRepository의 save()는 어떻게 새로운 엔티티를 판단할까?"}}},{"node":{"id":"09a96ca9-bb95-55ab-83cf-d9d053b2ad70","fields":{"slug":"/optimistic-locking/"},"frontmatter":{"title":"낙관적 락과 동시성 테스트"}}},{"node":{"id":"647737e4-08ec-5813-a092-c27ef1da4292","fields":{"slug":"/java-string/"},"frontmatter":{"title":"문자열 생성 방식 비교하기"}}},{"node":{"id":"696ee6ba-c2ea-5e8b-a25f-aaa4eccfa5e9","fields":{"slug":"/2022-retrospect/"},"frontmatter":{"title":"조금 늦은 2022년 회고"}}},{"node":{"id":"5a61e41a-16ff-5669-bf0e-028ea40e0af3","fields":{"slug":"/jpa-auditing/"},"frontmatter":{"title":"Spring Data JPA Auditing"}}}]},"previous":{"fields":{"slug":"/google-refresh-token/"},"frontmatter":{"title":"Google은 Refresh Token을 쉽게 내주지 않는다."}},"next":{"fields":{"slug":"/basic-tomcat/"},"frontmatter":{"title":"Tomcat"}}},"pageContext":{"id":"b886feb1-ab24-59f0-8972-2d2b510ea407","series":null,"previousPostId":"7b780208-a850-5305-a51c-f0937cbdaf93","nextPostId":"58f32f4d-b2d6-54d6-b3dd-cb4cf4da1d70"}},"staticQueryHashes":[],"slicesMap":{}}